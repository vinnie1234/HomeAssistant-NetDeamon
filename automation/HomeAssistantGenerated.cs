//------------------------------------------------------------------------------
// <auto-generated>
// Generated using NetDaemon CodeGenerator nd-codegen v23.14.0.0
//   At: 2023-09-06T00:44:05.0648740+02:00
//
// *** Make sure the version of the codegen tool and your nugets Joysoftware.NetDaemon.* have the same version.***
// You can use following command to keep it up to date with the latest version:
//   dotnet tool update JoySoftware.NetDaemon.HassModel.CodeGen
//
// To update this file with latest entities run this command in your project directory:
//   dotnet tool run nd-codegen
//
// In the template projects we provided a convenience powershell script that will update
// the codegen and nugets to latest versions update_all_dependencies.ps1.
//
// For more information: https://netdaemon.xyz/docs/v3/hass_model/hass_model_codegen
// For more information about NetDaemon: https://netdaemon.xyz/
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Collections.Generic;
using Microsoft.Extensions.DependencyInjection;
using System.Text.Json.Serialization;
using NetDaemon.HassModel;
using NetDaemon.HassModel.Entities;
using NetDaemon.HassModel.Entities.Core;

namespace HomeAssistantGenerated;
public static class GeneratedExtensions
{
    ///<summary>Registers all injectable generated types in the serviceCollection</summary>
    public static IServiceCollection AddHomeAssistantGenerated(this IServiceCollection serviceCollection)
    {
        serviceCollection.AddTransient<Entities>();
        serviceCollection.AddTransient<AutomationEntities>();
        serviceCollection.AddTransient<BinarySensorEntities>();
        serviceCollection.AddTransient<ButtonEntities>();
        serviceCollection.AddTransient<CalendarEntities>();
        serviceCollection.AddTransient<CameraEntities>();
        serviceCollection.AddTransient<DeviceTrackerEntities>();
        serviceCollection.AddTransient<InputBooleanEntities>();
        serviceCollection.AddTransient<InputButtonEntities>();
        serviceCollection.AddTransient<InputDatetimeEntities>();
        serviceCollection.AddTransient<InputNumberEntities>();
        serviceCollection.AddTransient<InputSelectEntities>();
        serviceCollection.AddTransient<InputTextEntities>();
        serviceCollection.AddTransient<LightEntities>();
        serviceCollection.AddTransient<MediaPlayerEntities>();
        serviceCollection.AddTransient<NumberEntities>();
        serviceCollection.AddTransient<PersistentNotificationEntities>();
        serviceCollection.AddTransient<PersonEntities>();
        serviceCollection.AddTransient<SensorEntities>();
        serviceCollection.AddTransient<SunEntities>();
        serviceCollection.AddTransient<SwitchEntities>();
        serviceCollection.AddTransient<UpdateEntities>();
        serviceCollection.AddTransient<WeatherEntities>();
        serviceCollection.AddTransient<ZoneEntities>();
        serviceCollection.AddTransient<SceneEntities>();
        serviceCollection.AddTransient<CoverEntities>();
        serviceCollection.AddTransient<SelectEntities>();
        serviceCollection.AddTransient<VacuumEntities>();
        serviceCollection.AddTransient<RemoteEntities>();
        serviceCollection.AddTransient<TtsEntities>();
        serviceCollection.AddTransient<EventEntities>();
        serviceCollection.AddTransient<Services>();
        serviceCollection.AddTransient<AlarmControlPanelServices>();
        serviceCollection.AddTransient<AsusrouterServices>();
        serviceCollection.AddTransient<AutomationServices>();
        serviceCollection.AddTransient<BlueprintServices>();
        serviceCollection.AddTransient<ButtonServices>();
        serviceCollection.AddTransient<CalendarServices>();
        serviceCollection.AddTransient<CameraServices>();
        serviceCollection.AddTransient<CastServices>();
        serviceCollection.AddTransient<ClimateServices>();
        serviceCollection.AddTransient<CloudServices>();
        serviceCollection.AddTransient<ConversationServices>();
        serviceCollection.AddTransient<CounterServices>();
        serviceCollection.AddTransient<CoverServices>();
        serviceCollection.AddTransient<DeviceTrackerServices>();
        serviceCollection.AddTransient<DwainsDashboardServices>();
        serviceCollection.AddTransient<FanServices>();
        serviceCollection.AddTransient<FfmpegServices>();
        serviceCollection.AddTransient<FrontendServices>();
        serviceCollection.AddTransient<GoogleServices>();
        serviceCollection.AddTransient<GoogleAssistantServices>();
        serviceCollection.AddTransient<GoogleHomeServices>();
        serviceCollection.AddTransient<GroupServices>();
        serviceCollection.AddTransient<HassioServices>();
        serviceCollection.AddTransient<HomeassistantServices>();
        serviceCollection.AddTransient<HueServices>();
        serviceCollection.AddTransient<HuesyncboxServices>();
        serviceCollection.AddTransient<HumidifierServices>();
        serviceCollection.AddTransient<InputBooleanServices>();
        serviceCollection.AddTransient<InputButtonServices>();
        serviceCollection.AddTransient<InputDatetimeServices>();
        serviceCollection.AddTransient<InputNumberServices>();
        serviceCollection.AddTransient<InputSelectServices>();
        serviceCollection.AddTransient<InputTextServices>();
        serviceCollection.AddTransient<LightServices>();
        serviceCollection.AddTransient<LocaltuyaServices>();
        serviceCollection.AddTransient<LockServices>();
        serviceCollection.AddTransient<LogbookServices>();
        serviceCollection.AddTransient<LoggerServices>();
        serviceCollection.AddTransient<MailAndPackagesServices>();
        serviceCollection.AddTransient<MediaPlayerServices>();
        serviceCollection.AddTransient<MotionBlindsServices>();
        serviceCollection.AddTransient<MqttServices>();
        serviceCollection.AddTransient<NotifyServices>();
        serviceCollection.AddTransient<NumberServices>();
        serviceCollection.AddTransient<OpenaiConversationServices>();
        serviceCollection.AddTransient<PersistentNotificationServices>();
        serviceCollection.AddTransient<PersonServices>();
        serviceCollection.AddTransient<PicnicServices>();
        serviceCollection.AddTransient<PingServices>();
        serviceCollection.AddTransient<PowercalcServices>();
        serviceCollection.AddTransient<RecorderServices>();
        serviceCollection.AddTransient<RemoteServices>();
        serviceCollection.AddTransient<RepairsServices>();
        serviceCollection.AddTransient<RingServices>();
        serviceCollection.AddTransient<SceneServices>();
        serviceCollection.AddTransient<ScheduleServices>();
        serviceCollection.AddTransient<ScriptServices>();
        serviceCollection.AddTransient<SelectServices>();
        serviceCollection.AddTransient<SirenServices>();
        serviceCollection.AddTransient<SpookServices>();
        serviceCollection.AddTransient<SwitchServices>();
        serviceCollection.AddTransient<SynologyDsmServices>();
        serviceCollection.AddTransient<SystemLogServices>();
        serviceCollection.AddTransient<TemplateServices>();
        serviceCollection.AddTransient<TextServices>();
        serviceCollection.AddTransient<TimeServices>();
        serviceCollection.AddTransient<TimerServices>();
        serviceCollection.AddTransient<TtsServices>();
        serviceCollection.AddTransient<UpdateServices>();
        serviceCollection.AddTransient<UtilityMeterServices>();
        serviceCollection.AddTransient<VacuumServices>();
        serviceCollection.AddTransient<WatchmanServices>();
        serviceCollection.AddTransient<WaterHeaterServices>();
        return serviceCollection;
    }
}

public interface IEntities
{
    AutomationEntities Automation { get; }

    BinarySensorEntities BinarySensor { get; }

    ButtonEntities Button { get; }

    CalendarEntities Calendar { get; }

    CameraEntities Camera { get; }

    DeviceTrackerEntities DeviceTracker { get; }

    InputBooleanEntities InputBoolean { get; }

    InputButtonEntities InputButton { get; }

    InputDatetimeEntities InputDatetime { get; }

    InputNumberEntities InputNumber { get; }

    InputSelectEntities InputSelect { get; }

    InputTextEntities InputText { get; }

    LightEntities Light { get; }

    MediaPlayerEntities MediaPlayer { get; }

    NumberEntities Number { get; }

    PersistentNotificationEntities PersistentNotification { get; }

    PersonEntities Person { get; }

    SensorEntities Sensor { get; }

    SunEntities Sun { get; }

    SwitchEntities Switch { get; }

    UpdateEntities Update { get; }

    WeatherEntities Weather { get; }

    ZoneEntities Zone { get; }

    SceneEntities Scene { get; }

    CoverEntities Cover { get; }

    SelectEntities Select { get; }

    VacuumEntities Vacuum { get; }

    RemoteEntities Remote { get; }

    TtsEntities Tts { get; }

    EventEntities Event { get; }
}

public partial class Entities : IEntities
{
    private readonly IHaContext _haContext;
    public Entities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public AutomationEntities Automation => new(_haContext);
    public BinarySensorEntities BinarySensor => new(_haContext);
    public ButtonEntities Button => new(_haContext);
    public CalendarEntities Calendar => new(_haContext);
    public CameraEntities Camera => new(_haContext);
    public DeviceTrackerEntities DeviceTracker => new(_haContext);
    public InputBooleanEntities InputBoolean => new(_haContext);
    public InputButtonEntities InputButton => new(_haContext);
    public InputDatetimeEntities InputDatetime => new(_haContext);
    public InputNumberEntities InputNumber => new(_haContext);
    public InputSelectEntities InputSelect => new(_haContext);
    public InputTextEntities InputText => new(_haContext);
    public LightEntities Light => new(_haContext);
    public MediaPlayerEntities MediaPlayer => new(_haContext);
    public NumberEntities Number => new(_haContext);
    public PersistentNotificationEntities PersistentNotification => new(_haContext);
    public PersonEntities Person => new(_haContext);
    public SensorEntities Sensor => new(_haContext);
    public SunEntities Sun => new(_haContext);
    public SwitchEntities Switch => new(_haContext);
    public UpdateEntities Update => new(_haContext);
    public WeatherEntities Weather => new(_haContext);
    public ZoneEntities Zone => new(_haContext);
    public SceneEntities Scene => new(_haContext);
    public CoverEntities Cover => new(_haContext);
    public SelectEntities Select => new(_haContext);
    public VacuumEntities Vacuum => new(_haContext);
    public RemoteEntities Remote => new(_haContext);
    public TtsEntities Tts => new(_haContext);
    public EventEntities Event => new(_haContext);
}

public partial class AutomationEntities
{
    private readonly IHaContext _haContext;
    public AutomationEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Away</summary>
    public AutomationEntity Away => new(_haContext, "automation.away");
    ///<summary>Open door</summary>
    public AutomationEntity OpenDoor => new(_haContext, "automation.open_door");
    ///<summary>Sleeping</summary>
    public AutomationEntity Sleeping => new(_haContext, "automation.sleeping");
    ///<summary>Update notifications</summary>
    public AutomationEntity UpdateNotifications => new(_haContext, "automation.update_notifications");
    ///<summary>Update UV</summary>
    public AutomationEntity UpdateUv => new(_haContext, "automation.update_uv");
}

public partial class BinarySensorEntities
{
    private readonly IHaContext _haContext;
    public BinarySensorEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>AiMesh RT-AX88U (04:D9:F5:FB:BA:18)</summary>
    public BinarySensorEntity AimeshRtAx88u04D9F5FbBa18 => new(_haContext, "binary_sensor.aimesh_rt_ax88u_04_d9_f5_fb_ba_18");
    ///<summary>Amazon Image Updated</summary>
    public BinarySensorEntity AmazonImageUpdated => new(_haContext, "binary_sensor.amazon_image_updated");
    ///<summary>Badkamer Motion</summary>
    public BinarySensorEntity BadkamerMotion => new(_haContext, "binary_sensor.badkamer_motion");
    ///<summary>Berging Motion</summary>
    public BinarySensorEntity BergingMotion => new(_haContext, "binary_sensor.berging_motion");
    ///<summary>Disco Huis: Entertainment Configuration</summary>
    public BinarySensorEntity DiscoHuisEntertainmentConfiguration => new(_haContext, "binary_sensor.disco_huis_entertainment_configuration");
    ///<summary>Gang Motion</summary>
    public BinarySensorEntity GangMotion => new(_haContext, "binary_sensor.gang_motion");
    ///<summary>Jaap Bin full</summary>
    public BinarySensorEntity JaapBinFull => new(_haContext, "binary_sensor.jaap_bin_full");
    ///<summary>Muziekruimte: Entertainment Configuration</summary>
    public BinarySensorEntity MuziekruimteEntertainmentConfiguration => new(_haContext, "binary_sensor.muziekruimte_entertainment_configuration");
    ///<summary>Only TV: Entertainment Configuration</summary>
    public BinarySensorEntity OnlyTvEntertainmentConfiguration => new(_haContext, "binary_sensor.only_tv_entertainment_configuration");
    ///<summary>ping</summary>
    public BinarySensorEntity Ping => new(_haContext, "binary_sensor.ping");
    ///<summary>Bescherming venster</summary>
    public BinarySensorEntity ProtectionWindow => new(_haContext, "binary_sensor.protection_window");
    ///<summary>Remote UI</summary>
    public BinarySensorEntity RemoteUi => new(_haContext, "binary_sensor.remote_ui");
    ///<summary>RonaldB1982</summary>
    public BinarySensorEntity Ronaldb1982 => new(_haContext, "binary_sensor.ronaldb1982");
    ///<summary>RPi Power status</summary>
    public BinarySensorEntity RpiPowerStatus => new(_haContext, "binary_sensor.rpi_power_status");
    ///<summary>RT-AX88U WAN</summary>
    public BinarySensorEntity RtAx88uWan => new(_haContext, "binary_sensor.rt_ax88u_wan");
    ///<summary>SM-S908B Is charging</summary>
    public BinarySensorEntity SmS908bIsCharging => new(_haContext, "binary_sensor.sm_s908b_is_charging");
    ///<summary>SM-T860 Is charging</summary>
    public BinarySensorEntity SmT860IsCharging => new(_haContext, "binary_sensor.sm_t860_is_charging");
    ///<summary>TV area: Entertainment Configuration</summary>
    public BinarySensorEntity TvAreaEntertainmentConfiguration => new(_haContext, "binary_sensor.tv_area_entertainment_configuration");
    ///<summary>USPS Image Updated</summary>
    public BinarySensorEntity UspsImageUpdated => new(_haContext, "binary_sensor.usps_image_updated");
    ///<summary>VINCENT-NAS Beveiligingsstatus</summary>
    public BinarySensorEntity VincentNasBeveiligingsstatus => new(_haContext, "binary_sensor.vincent_nas_beveiligingsstatus");
    ///<summary>VINCENT-NAS (Schijf 1) Onder de minimale resterende levensduur</summary>
    public BinarySensorEntity VincentNasSchijf1BelowMinRemainingLife => new(_haContext, "binary_sensor.vincent_nas_schijf_1_below_min_remaining_life");
    ///<summary>VINCENT-NAS (Schijf 1) Maximum slechte sectoren overschreden</summary>
    public BinarySensorEntity VincentNasSchijf1ExceededMaxBadSectors => new(_haContext, "binary_sensor.vincent_nas_schijf_1_exceeded_max_bad_sectors");
    ///<summary>vinnie12349491</summary>
    public BinarySensorEntity Vinnie12349491 => new(_haContext, "binary_sensor.vinnie12349491");
    ///<summary>Voordeur Ding</summary>
    public BinarySensorEntity VoordeurDing => new(_haContext, "binary_sensor.voordeur_ding");
    ///<summary>Voordeur Beweging</summary>
    public BinarySensorEntity VoordeurMotion => new(_haContext, "binary_sensor.voordeur_motion");
}

public partial class ButtonEntities
{
    private readonly IHaContext _haContext;
    public ButtonEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>EnergySocket (5c2faf02a546) Identificeren</summary>
    public ButtonEntity Energysocket5c2faf02a546Identify => new(_haContext, "button.energysocket_5c2faf02a546_identify");
    ///<summary>EnergySocket (5c2faf0c7564) Identificeren</summary>
    public ButtonEntity Energysocket5c2faf0c7564Identify => new(_haContext, "button.energysocket_5c2faf0c7564_identify");
    ///<summary>EnergySocket (5c2faf0d8364) Identificeren</summary>
    public ButtonEntity Energysocket5c2faf0d8364Identify => new(_haContext, "button.energysocket_5c2faf0d8364_identify");
    ///<summary>Home Assistant Herladen</summary>
    public ButtonEntity HomeassistantReload => new(_haContext, "button.homeassistant_reload");
    ///<summary>Home Assistant Herstarten</summary>
    public ButtonEntity HomeassistantRestart => new(_haContext, "button.homeassistant_restart");
    ///<summary>Repairs Negeer alles</summary>
    public ButtonEntity IgnoreAllIssues => new(_haContext, "button.ignore_all_issues");
    ///<summary>P1 meter (3c39e72a64e8) Identificeren</summary>
    public ButtonEntity P1Meter3c39e72a64e8Identify => new(_haContext, "button.p1_meter_3c39e72a64e8_identify");
    ///<summary>Herstarten</summary>
    public ButtonEntity RtAx88uReboot => new(_haContext, "button.rt_ax88u_reboot");
    ///<summary>RT-AX88U Restart HTTP daemon</summary>
    public ButtonEntity RtAx88uRestartHttpDaemon => new(_haContext, "button.rt_ax88u_restart_http_daemon");
    ///<summary>RT-AX88U Restart wireless</summary>
    public ButtonEntity RtAx88uRestartWireless => new(_haContext, "button.rt_ax88u_restart_wireless");
    ///<summary>Google Assistant Apparaten synchroniseren</summary>
    public ButtonEntity SynchronizeDevices => new(_haContext, "button.synchronize_devices");
    ///<summary>Repairs Alles herstellen</summary>
    public ButtonEntity UnignoreAllIssues => new(_haContext, "button.unignore_all_issues");
    ///<summary>VINCENT-NAS Reboot</summary>
    public ButtonEntity VincentNasReboot => new(_haContext, "button.vincent_nas_reboot");
    ///<summary>VINCENT-NAS Shutdown</summary>
    public ButtonEntity VincentNasShutdown => new(_haContext, "button.vincent_nas_shutdown");
}

public partial class CalendarEntities
{
    private readonly IHaContext _haContext;
    public CalendarEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Feestdagen in nederland</summary>
    public CalendarEntity FeestdagenInNederland => new(_haContext, "calendar.feestdagen_in_nederland");
    ///<summary>Gezin</summary>
    public CalendarEntity Gezin => new(_haContext, "calendar.gezin");
    ///<summary>Vincentmaarschalkerweerd@gmail.com</summary>
    public CalendarEntity VincentmaarschalkerweerdGmailCom => new(_haContext, "calendar.vincentmaarschalkerweerd_gmail_com");
}

public partial class CameraEntities
{
    private readonly IHaContext _haContext;
    public CameraEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Buienradar</summary>
    public CameraEntity Buienradar => new(_haContext, "camera.buienradar");
    ///<summary>Mail Amazon Delivery Camera</summary>
    public CameraEntity MailAmazonDeliveryCamera => new(_haContext, "camera.mail_amazon_delivery_camera");
    ///<summary>Mail USPS Camera</summary>
    public CameraEntity MailUspsCamera => new(_haContext, "camera.mail_usps_camera");
    ///<summary>Voordeur</summary>
    public CameraEntity Voordeur => new(_haContext, "camera.voordeur");
}

public partial class DeviceTrackerEntities
{
    private readonly IHaContext _haContext;
    public DeviceTrackerEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>9E:CD:3E:06:30:79</summary>
    public DeviceTrackerEntity _9eCd3e063079 => new(_haContext, "device_tracker.9e_cd_3e_06_30_79");
    ///<summary>B6:B0:C4:16:45:49</summary>
    public DeviceTrackerEntity A52sVanEddy => new(_haContext, "device_tracker.a52s_van_eddy");
    ///<summary>Zedar (Voer kat)</summary>
    public DeviceTrackerEntity Cc8cBf1b7482 => new(_haContext, "device_tracker.cc_8c_bf_1b_74_82");
    ///<summary>Hue Hub</summary>
    public DeviceTrackerEntity Ecb5fa88bf6f2 => new(_haContext, "device_tracker.ecb5fa88bf6f_2");
    ///<summary>Philips</summary>
    public DeviceTrackerEntity Espressif => new(_haContext, "device_tracker.espressif");
    ///<summary>Switchbot</summary>
    public DeviceTrackerEntity EspressifInc => new(_haContext, "device_tracker.espressif_inc");
    ///<summary>Galaxy-Tab-S6</summary>
    public DeviceTrackerEntity GalaxyTabS62 => new(_haContext, "device_tracker.galaxy_tab_s6_2");
    ///<summary>Google-Home-Mini</summary>
    public DeviceTrackerEntity GoogleHomeMini2 => new(_haContext, "device_tracker.google_home_mini_2");
    ///<summary>Google</summary>
    public DeviceTrackerEntity GoogleNestHub2 => new(_haContext, "device_tracker.google_nest_hub_2");
    ///<summary>Syncbox</summary>
    public DeviceTrackerEntity HuesyncboxC4299607ba622 => new(_haContext, "device_tracker.huesyncbox_c4299607ba62_2");
    ///<summary>Energiemeter</summary>
    public DeviceTrackerEntity HwP1meter2a64e82 => new(_haContext, "device_tracker.hw_p1meter_2a64e8_2");
    ///<summary>50:14:79:F8:F9:F9</summary>
    public DeviceTrackerEntity IrobotStofzuiger => new(_haContext, "device_tracker.irobot_stofzuiger");
    ///<summary>MBP-van-Vincent</summary>
    public DeviceTrackerEntity MbpVanVincent2 => new(_haContext, "device_tracker.mbp_van_vincent_2");
    ///<summary>Home Assistant (PI)</summary>
    public DeviceTrackerEntity RaspberryPiTradingLtd => new(_haContext, "device_tracker.raspberry_pi_trading_ltd");
    ///<summary>Bureau internet kastje</summary>
    public DeviceTrackerEntity RealtekSemiconductorCorp => new(_haContext, "device_tracker.realtek_semiconductor_corp");
    ///<summary>Rolluik</summary>
    public DeviceTrackerEntity Rolluik => new(_haContext, "device_tracker.rolluik");
    ///<summary>32:89:09:8C:49:F2</summary>
    public DeviceTrackerEntity S20FeVanJannette => new(_haContext, "device_tracker.s20_fe_van_jannette");
    ///<summary>Telefoon S22</summary>
    public DeviceTrackerEntity S22UltraVanVincent2 => new(_haContext, "device_tracker.s22_ultra_van_vincent_2");
    ///<summary>TV</summary>
    public DeviceTrackerEntity Samsung3 => new(_haContext, "device_tracker.samsung_3");
    ///<summary>SM-G780G</summary>
    public DeviceTrackerEntity SmG780g => new(_haContext, "device_tracker.sm_g780g");
    ///<summary>SM-S908B</summary>
    public DeviceTrackerEntity SmS908b => new(_haContext, "device_tracker.sm_s908b");
    ///<summary>SM-T860</summary>
    public DeviceTrackerEntity SmT860 => new(_haContext, "device_tracker.sm_t860");
    ///<summary>PS5</summary>
    public DeviceTrackerEntity Sony => new(_haContext, "device_tracker.sony");
    ///<summary>Soundbar</summary>
    public DeviceTrackerEntity Soundbar => new(_haContext, "device_tracker.soundbar");
    ///<summary>Wasmachine</summary>
    public DeviceTrackerEntity Wasmachine => new(_haContext, "device_tracker.wasmachine");
    ///<summary>XBOX</summary>
    public DeviceTrackerEntity Xbox2 => new(_haContext, "device_tracker.xbox_2");
}

public partial class InputBooleanEntities
{
    private readonly IHaContext _haContext;
    public InputBooleanEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Away</summary>
    public InputBooleanEntity Away => new(_haContext, "input_boolean.away");
    ///<summary>DisableLightAutomationBathroom</summary>
    public InputBooleanEntity Disablelightautomationbathroom => new(_haContext, "input_boolean.disablelightautomationbathroom");
    ///<summary>DisableLightAutomationBedRoom</summary>
    public InputBooleanEntity Disablelightautomationbedroom => new(_haContext, "input_boolean.disablelightautomationbedroom");
    ///<summary>DisableLightAutomationGeneral</summary>
    public InputBooleanEntity Disablelightautomationgeneral => new(_haContext, "input_boolean.disablelightautomationgeneral");
    ///<summary>DisableLightAutomationHall</summary>
    public InputBooleanEntity Disablelightautomationhall => new(_haContext, "input_boolean.disablelightautomationhall");
    ///<summary>DisableLightAutomationLivingRoom</summary>
    public InputBooleanEntity Disablelightautomationlivingroom => new(_haContext, "input_boolean.disablelightautomationlivingroom");
    ///<summary>DisableReset</summary>
    public InputBooleanEntity Disablereset => new(_haContext, "input_boolean.disablereset");
    ///<summary>Douchen</summary>
    public InputBooleanEntity Douchen => new(_haContext, "input_boolean.douchen");
    ///<summary>Holliday</summary>
    public InputBooleanEntity Holliday => new(_haContext, "input_boolean.holliday");
    ///<summary>netdaemon_alarm</summary>
    public InputBooleanEntity NetdaemonAlarm => new(_haContext, "input_boolean.netdaemon_alarm");
    ///<summary>netdaemon_away_manager</summary>
    public InputBooleanEntity NetdaemonAwayManager => new(_haContext, "input_boolean.netdaemon_away_manager");
    ///<summary>netdaemon_bath_room_light_on_movement</summary>
    public InputBooleanEntity NetdaemonBathRoomLightOnMovement => new(_haContext, "input_boolean.netdaemon_bath_room_light_on_movement");
    ///<summary>netdaemon_battery_monitoring</summary>
    public InputBooleanEntity NetdaemonBatteryMonitoring => new(_haContext, "input_boolean.netdaemon_battery_monitoring");
    ///<summary>netdaemon_bed_room_lights</summary>
    public InputBooleanEntity NetdaemonBedRoomLights => new(_haContext, "input_boolean.netdaemon_bed_room_lights");
    ///<summary>netdaemon_cat</summary>
    public InputBooleanEntity NetdaemonCat => new(_haContext, "input_boolean.netdaemon_cat");
    ///<summary>netdaemon_fun_app</summary>
    public InputBooleanEntity NetdaemonFunApp => new(_haContext, "input_boolean.netdaemon_fun_app");
    ///<summary>netdaemon_gaming</summary>
    public InputBooleanEntity NetdaemonGaming => new(_haContext, "input_boolean.netdaemon_gaming");
    ///<summary>netdaemon_hall_light_on_movement</summary>
    public InputBooleanEntity NetdaemonHallLightOnMovement => new(_haContext, "input_boolean.netdaemon_hall_light_on_movement");
    ///<summary>netdaemon_holiday_manager</summary>
    public InputBooleanEntity NetdaemonHolidayManager => new(_haContext, "input_boolean.netdaemon_holiday_manager");
    ///<summary>netdaemon_house_state_manager</summary>
    public InputBooleanEntity NetdaemonHouseStateManager => new(_haContext, "input_boolean.netdaemon_house_state_manager");
    ///<summary>netdaemon_living_room_lights</summary>
    public InputBooleanEntity NetdaemonLivingRoomLights => new(_haContext, "input_boolean.netdaemon_living_room_lights");
    ///<summary>netdaemon_reset</summary>
    public InputBooleanEntity NetdaemonReset => new(_haContext, "input_boolean.netdaemon_reset");
    ///<summary>netdaemon_save_in_state</summary>
    public InputBooleanEntity NetdaemonSaveInState => new(_haContext, "input_boolean.netdaemon_save_in_state");
    ///<summary>netdaemon_sleep_manager</summary>
    public InputBooleanEntity NetdaemonSleepManager => new(_haContext, "input_boolean.netdaemon_sleep_manager");
    ///<summary>netdaemon_test_app</summary>
    public InputBooleanEntity NetdaemonTestApp => new(_haContext, "input_boolean.netdaemon_test_app");
    ///<summary>netdaemon_tv</summary>
    public InputBooleanEntity NetdaemonTv => new(_haContext, "input_boolean.netdaemon_tv");
    ///<summary>netdaemon_water_management</summary>
    public InputBooleanEntity NetdaemonWaterManagement => new(_haContext, "input_boolean.netdaemon_water_management");
    ///<summary>OnVacation </summary>
    public InputBooleanEntity Onvacation => new(_haContext, "input_boolean.onvacation");
    ///<summary>PixelSkipNextAutoFeed</summary>
    public InputBooleanEntity Pixelskipnextautofeed => new(_haContext, "input_boolean.pixelskipnextautofeed");
    ///<summary>Sleeping</summary>
    public InputBooleanEntity Sleeping => new(_haContext, "input_boolean.sleeping");
    ///<summary>Working</summary>
    public InputBooleanEntity Working => new(_haContext, "input_boolean.working");
}

public partial class InputButtonEntities
{
    private readonly IHaContext _haContext;
    public InputButtonEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>CleanPetSnowy</summary>
    public InputButtonEntity Cleanpetsnowy => new(_haContext, "input_button.cleanpetsnowy");
    ///<summary>EmptyPetSnowy</summary>
    public InputButtonEntity Emptypetsnowy => new(_haContext, "input_button.emptypetsnowy");
    ///<summary>FeedCat</summary>
    public InputButtonEntity Feedcat => new(_haContext, "input_button.feedcat");
    ///<summary>PixelGiveNextFeedEary</summary>
    public InputButtonEntity Pixelgivenextfeedeary => new(_haContext, "input_button.pixelgivenextfeedeary");
}

public partial class InputDatetimeEntities
{
    private readonly IHaContext _haContext;
    public InputDatetimeEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>DaytimeHomeWork</summary>
    public InputDatetimeEntity Daytimehomework => new(_haContext, "input_datetime.daytimehomework");
    ///<summary>DaytimeOffice</summary>
    public InputDatetimeEntity Daytimeoffice => new(_haContext, "input_datetime.daytimeoffice");
    ///<summary>DaytimeWeekend</summary>
    public InputDatetimeEntity Daytimeweekend => new(_haContext, "input_datetime.daytimeweekend");
    ///<summary>NighttimeWeekdays</summary>
    public InputDatetimeEntity Nighttimeweekdays => new(_haContext, "input_datetime.nighttimeweekdays");
    ///<summary>NighttimeWeekends</summary>
    public InputDatetimeEntity Nighttimeweekends => new(_haContext, "input_datetime.nighttimeweekends");
    ///<summary>PixelFeedFirstTime</summary>
    public InputDatetimeEntity Pixelfeedfirsttime => new(_haContext, "input_datetime.pixelfeedfirsttime");
    ///<summary>PixelFeedFourthTime</summary>
    public InputDatetimeEntity Pixelfeedfourthtime => new(_haContext, "input_datetime.pixelfeedfourthtime");
    ///<summary>PixelFeedSecondTime</summary>
    public InputDatetimeEntity Pixelfeedsecondtime => new(_haContext, "input_datetime.pixelfeedsecondtime");
    ///<summary>PixelFeedThirdTime</summary>
    public InputDatetimeEntity Pixelfeedthirdtime => new(_haContext, "input_datetime.pixelfeedthirdtime");
    ///<summary>PixelLastAutomatedFeed</summary>
    public InputDatetimeEntity Pixellastautomatedfeed => new(_haContext, "input_datetime.pixellastautomatedfeed");
    ///<summary>PixelLastManualFeed</summary>
    public InputDatetimeEntity Pixellastmanualfeed => new(_haContext, "input_datetime.pixellastmanualfeed");
}

public partial class InputNumberEntities
{
    private readonly IHaContext _haContext;
    public InputNumberEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>BathroomLightDayTime</summary>
    public InputNumberEntity Bathroomlightdaytime => new(_haContext, "input_number.bathroomlightdaytime");
    ///<summary>BathroomLightNightTime</summary>
    public InputNumberEntity Bathroomlightnighttime => new(_haContext, "input_number.bathroomlightnighttime");
    ///<summary>CleaningPetSnowyTime</summary>
    public InputNumberEntity Cleaningpetsnowytime => new(_haContext, "input_number.cleaningpetsnowytime");
    ///<summary>HallLightDayTime</summary>
    public InputNumberEntity Halllightdaytime => new(_haContext, "input_number.halllightdaytime");
    ///<summary>HallLightNightTime</summary>
    public InputNumberEntity Halllightnighttime => new(_haContext, "input_number.halllightnighttime");
    ///<summary>PixelFeedFirstAmount</summary>
    public InputNumberEntity Pixelfeedfirstamount => new(_haContext, "input_number.pixelfeedfirstamount");
    ///<summary>PixelFeedFourthAmount</summary>
    public InputNumberEntity Pixelfeedfourthamount => new(_haContext, "input_number.pixelfeedfourthamount");
    ///<summary>PixelFeedSecondAmount</summary>
    public InputNumberEntity Pixelfeedsecondamount => new(_haContext, "input_number.pixelfeedsecondamount");
    ///<summary>PixelFeedThirdAmount</summary>
    public InputNumberEntity Pixelfeedthirdamount => new(_haContext, "input_number.pixelfeedthirdamount");
    ///<summary>PixelInPetSnowyTime</summary>
    public InputNumberEntity Pixelinpetsnowytime => new(_haContext, "input_number.pixelinpetsnowytime");
    ///<summary>PixelLastAmountAutomationFeed</summary>
    public InputNumberEntity Pixellastamountautomationfeed => new(_haContext, "input_number.pixellastamountautomationfeed");
    ///<summary>PixelLastAmountManualFeed</summary>
    public InputNumberEntity Pixellastamountmanualfeed => new(_haContext, "input_number.pixellastamountmanualfeed");
    ///<summary>PixelNumberOfManualFood</summary>
    public InputNumberEntity Pixelnumberofmanualfood => new(_haContext, "input_number.pixelnumberofmanualfood");
    ///<summary>PixelTotalAmountFeedAllTime</summary>
    public InputNumberEntity Pixeltotalamountfeedalltime => new(_haContext, "input_number.pixeltotalamountfeedalltime");
    ///<summary>PixelTotalAmountFeedDay</summary>
    public InputNumberEntity Pixeltotalamountfeedday => new(_haContext, "input_number.pixeltotalamountfeedday");
}

public partial class InputSelectEntities
{
    private readonly IHaContext _haContext;
    public InputSelectEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>HouseModeSelect</summary>
    public InputSelectEntity Housemodeselect => new(_haContext, "input_select.housemodeselect");
    ///<summary>Water Usage Selector</summary>
    public InputSelectEntity WaterUsageSelector => new(_haContext, "input_select.water_usage_selector");
}

public partial class InputTextEntities
{
    private readonly IHaContext _haContext;
    public InputTextEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>ZedarDeviceId</summary>
    public InputTextEntity Zedardeviceid => new(_haContext, "input_text.zedardeviceid");
}

public partial class LightEntities
{
    private readonly IHaContext _haContext;
    public LightEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Badkamer</summary>
    public LightEntity Badkamer => new(_haContext, "light.badkamer");
    ///<summary>Badkamer spiegel</summary>
    public LightEntity BadkamerSpiegel => new(_haContext, "light.badkamer_spiegel");
    ///<summary>TV Kast</summary>
    public LightEntity Bank => new(_haContext, "light.bank");
    ///<summary>Berging</summary>
    public LightEntity Berging => new(_haContext, "light.berging");
    ///<summary>Berging</summary>
    public LightEntity Berging2 => new(_haContext, "light.berging_2");
    ///<summary>Buiten deur</summary>
    public LightEntity BuitenDeur => new(_haContext, "light.buiten_deur");
    ///<summary>Plug: Bureau</summary>
    public LightEntity Bureau => new(_haContext, "light.bureau");
    ///<summary>Bureau</summary>
    public LightEntity Bureau2 => new(_haContext, "light.bureau_2");
    ///<summary>Gang</summary>
    public LightEntity Gang => new(_haContext, "light.gang");
    ///<summary>Hal</summary>
    public LightEntity Hal => new(_haContext, "light.hal");
    ///<summary>Hal</summary>
    public LightEntity Hal2 => new(_haContext, "light.hal_2");
    ///<summary>Plafond Woonkamer</summary>
    public LightEntity HueFilamentBulb1 => new(_haContext, "light.hue_filament_bulb_1");
    ///<summary>Plafond Woonkamer</summary>
    public LightEntity HueFilamentBulb2 => new(_haContext, "light.hue_filament_bulb_2");
    ///<summary>Hue Play Links</summary>
    public LightEntity HuePlayLinks => new(_haContext, "light.hue_play_links");
    ///<summary>Hue Play Midden</summary>
    public LightEntity HuePlayMidden => new(_haContext, "light.hue_play_midden");
    ///<summary>Hue Play Rechts</summary>
    public LightEntity HuePlayRechts => new(_haContext, "light.hue_play_rechts");
    ///<summary>Koelkast</summary>
    public LightEntity Koelkast => new(_haContext, "light.koelkast");
    ///<summary>Lampen Keuken</summary>
    public LightEntity LampenKeuken => new(_haContext, "light.lampen_keuken");
    ///<summary>Nachtkastje</summary>
    public LightEntity Nachtkastje => new(_haContext, "light.nachtkastje");
    ///<summary>Plafond Slaapkamer</summary>
    public LightEntity Plafond => new(_haContext, "light.plafond");
    ///<summary>Plafond Badkamer</summary>
    public LightEntity PlafondBadkamer => new(_haContext, "light.plafond_badkamer");
    ///<summary>Plafond Woonkamer</summary>
    public LightEntity PlafondWoonkamer => new(_haContext, "light.plafond_woonkamer");
    ///<summary>RT-AX88U LED</summary>
    public LightEntity RtAx88uLed => new(_haContext, "light.rt_ax88u_led");
    ///<summary>Slaapkamer</summary>
    public LightEntity Slaapkamer => new(_haContext, "light.slaapkamer");
    ///<summary>TV</summary>
    public LightEntity Tv => new(_haContext, "light.tv");
    ///<summary>Woonkamer</summary>
    public LightEntity Woonkamer => new(_haContext, "light.woonkamer");
}

public partial class MediaPlayerEntities
{
    private readonly IHaContext _haContext;
    public MediaPlayerEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public MediaPlayerEntity AvSoundbar => new(_haContext, "media_player.av_soundbar");
    ///<summary>Hub Vincent</summary>
    public MediaPlayerEntity HubVincent => new(_haContext, "media_player.hub_vincent");
    public MediaPlayerEntity Thuis => new(_haContext, "media_player.thuis");
    ///<summary>TV</summary>
    public MediaPlayerEntity Tv => new(_haContext, "media_player.tv");
    ///<summary>Woonkamer</summary>
    public MediaPlayerEntity Woonkamer => new(_haContext, "media_player.woonkamer");
    ///<summary>Xbox Vincent</summary>
    public MediaPlayerEntity XboxVincent => new(_haContext, "media_player.xbox_vincent");
}

public partial class NumberEntities
{
    private readonly IHaContext _haContext;
    public NumberEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>EnergySocket (5c2faf02a546) Status lampje helderheid</summary>
    public NumberEntity Energysocket5c2faf02a546StatusLightBrightness => new(_haContext, "number.energysocket_5c2faf02a546_status_light_brightness");
    ///<summary>EnergySocket (5c2faf0c7564) Status lampje helderheid</summary>
    public NumberEntity Energysocket5c2faf0c7564StatusLightBrightness => new(_haContext, "number.energysocket_5c2faf0c7564_status_light_brightness");
    ///<summary>EnergySocket (5c2faf0d8364) Status lampje helderheid</summary>
    public NumberEntity Energysocket5c2faf0d8364StatusLightBrightness => new(_haContext, "number.energysocket_5c2faf0d8364_status_light_brightness");
    ///<summary>Hub Vincent alarm volume</summary>
    public NumberEntity HubVincentAlarmVolume => new(_haContext, "number.hub_vincent_alarm_volume");
    ///<summary>Sync Box Brightness</summary>
    public NumberEntity SyncBoxBrightness => new(_haContext, "number.sync_box_brightness");
    ///<summary>Woonkamer alarm volume</summary>
    public NumberEntity WoonkamerAlarmVolume => new(_haContext, "number.woonkamer_alarm_volume");
}

public partial class PersistentNotificationEntities
{
    private readonly IHaContext _haContext;
    public PersistentNotificationEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>New devices discovered</summary>
    public PersistentNotificationEntity ConfigEntryDiscovery => new(_haContext, "persistent_notification.config_entry_discovery");
    ///<summary>RT-AX88U Firmware update</summary>
    public PersistentNotificationEntity RtAx88uFirmwareUpdate => new(_haContext, "persistent_notification.rt_ax88u_firmware_update");
}

public partial class PersonEntities
{
    private readonly IHaContext _haContext;
    public PersonEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Timo</summary>
    public PersonEntity Timo => new(_haContext, "person.timo");
    ///<summary>Vincent Maarschalkerweerd</summary>
    public PersonEntity VincentMaarschalkerweerd => new(_haContext, "person.vincent_maarschalkerweerd");
}

public partial class SensorEntities
{
    private readonly IHaContext _haContext;
    public SensorEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>afval GFT</summary>
    public SensorEntity AfvalGft => new(_haContext, "sensor.afval_gft");
    ///<summary>afval Morgen</summary>
    public SensorEntity AfvalMorgen => new(_haContext, "sensor.afval_morgen");
    ///<summary>afval Papier</summary>
    public SensorEntity AfvalPapier => new(_haContext, "sensor.afval_papier");
    ///<summary>afval PMD</summary>
    public SensorEntity AfvalPmd => new(_haContext, "sensor.afval_pmd");
    ///<summary>afval Rest</summary>
    public SensorEntity AfvalRest => new(_haContext, "sensor.afval_rest");
    ///<summary>afval Textiel</summary>
    public SensorEntity AfvalTextiel => new(_haContext, "sensor.afval_textiel");
    ///<summary>afval Vandaag</summary>
    public SensorEntity AfvalVandaag => new(_haContext, "sensor.afval_vandaag");
    ///<summary>Home Assistant Luchtkwaliteit</summary>
    public SensorEntity AirQuality => new(_haContext, "sensor.air_quality");
    ///<summary>Ajax</summary>
    public SensorEntity Ajax => new(_haContext, "sensor.ajax");
    ///<summary>Home Assistant Alarm bedieningspanelen</summary>
    public SensorEntity AlarmControlPanels => new(_haContext, "sensor.alarm_control_panels");
    ///<summary>alarm_time</summary>
    public SensorEntity AlarmTime => new(_haContext, "sensor.alarm_time");
    ///<summary>Home Assistant Ruimtes</summary>
    public SensorEntity Areas => new(_haContext, "sensor.areas");
    ///<summary>Home Assistant Automatiseringen</summary>
    public SensorEntity Automations => new(_haContext, "sensor.automations");
    ///<summary>[AV] Soundbar device</summary>
    public SensorEntity AvSoundbarDevice => new(_haContext, "sensor.av_soundbar_device");
    ///<summary>Az</summary>
    public SensorEntity Az => new(_haContext, "sensor.az");
    ///<summary>Home Assistant Binaire sensoren</summary>
    public SensorEntity BinarySensors => new(_haContext, "sensor.binary_sensors");
    ///<summary>Barometer</summary>
    public SensorEntity BuienradarBarometer => new(_haContext, "sensor.buienradar_barometer");
    ///<summary>Barometer</summary>
    public SensorEntity BuienradarBarometer2 => new(_haContext, "sensor.buienradar_barometer_2");
    ///<summary>Barometerwaarde</summary>
    public SensorEntity BuienradarBarometerValue => new(_haContext, "sensor.buienradar_barometer_value");
    ///<summary>Staat</summary>
    public SensorEntity BuienradarCondition => new(_haContext, "sensor.buienradar_condition");
    ///<summary>Staat 1d</summary>
    public SensorEntity BuienradarCondition1d => new(_haContext, "sensor.buienradar_condition_1d");
    ///<summary>Staat 2d</summary>
    public SensorEntity BuienradarCondition2d => new(_haContext, "sensor.buienradar_condition_2d");
    ///<summary>Staat 3d</summary>
    public SensorEntity BuienradarCondition3d => new(_haContext, "sensor.buienradar_condition_3d");
    ///<summary>Staat 4d</summary>
    public SensorEntity BuienradarCondition4d => new(_haContext, "sensor.buienradar_condition_4d");
    ///<summary>Staat 5d</summary>
    public SensorEntity BuienradarCondition5d => new(_haContext, "sensor.buienradar_condition_5d");
    ///<summary>Staatcode</summary>
    public SensorEntity BuienradarConditionCode => new(_haContext, "sensor.buienradar_condition_code");
    ///<summary>Staatcode 1d</summary>
    public SensorEntity BuienradarConditionCode1d => new(_haContext, "sensor.buienradar_condition_code_1d");
    ///<summary>Staatcode 2d</summary>
    public SensorEntity BuienradarConditionCode2d => new(_haContext, "sensor.buienradar_condition_code_2d");
    ///<summary>Staatcode 3d</summary>
    public SensorEntity BuienradarConditionCode3d => new(_haContext, "sensor.buienradar_condition_code_3d");
    ///<summary>Staatcode 4d</summary>
    public SensorEntity BuienradarConditionCode4d => new(_haContext, "sensor.buienradar_condition_code_4d");
    ///<summary>Staatcode 5d</summary>
    public SensorEntity BuienradarConditionCode5d => new(_haContext, "sensor.buienradar_condition_code_5d");
    ///<summary>Gedetailleerde staat</summary>
    public SensorEntity BuienradarDetailedCondition => new(_haContext, "sensor.buienradar_detailed_condition");
    ///<summary>Gedetailleerde staat 1d</summary>
    public SensorEntity BuienradarDetailedCondition1d => new(_haContext, "sensor.buienradar_detailed_condition_1d");
    ///<summary>Gedetailleerde staat 2d</summary>
    public SensorEntity BuienradarDetailedCondition2d => new(_haContext, "sensor.buienradar_detailed_condition_2d");
    ///<summary>Gedetailleerde staat 3d</summary>
    public SensorEntity BuienradarDetailedCondition3d => new(_haContext, "sensor.buienradar_detailed_condition_3d");
    ///<summary>Gedetailleerde staat 4d</summary>
    public SensorEntity BuienradarDetailedCondition4d => new(_haContext, "sensor.buienradar_detailed_condition_4d");
    ///<summary>Gedetailleerde staat 5d</summary>
    public SensorEntity BuienradarDetailedCondition5d => new(_haContext, "sensor.buienradar_detailed_condition_5d");
    ///<summary>Volledige staat</summary>
    public SensorEntity BuienradarFullCondition => new(_haContext, "sensor.buienradar_full_condition");
    ///<summary>Volledige staat 1d</summary>
    public SensorEntity BuienradarFullCondition1d => new(_haContext, "sensor.buienradar_full_condition_1d");
    ///<summary>Volledige staat 1d</summary>
    public SensorEntity BuienradarFullCondition2d => new(_haContext, "sensor.buienradar_full_condition_2d");
    ///<summary>Volledige staat 3d</summary>
    public SensorEntity BuienradarFullCondition3d => new(_haContext, "sensor.buienradar_full_condition_3d");
    ///<summary>Volledige staat 4d</summary>
    public SensorEntity BuienradarFullCondition4d => new(_haContext, "sensor.buienradar_full_condition_4d");
    ///<summary>Volledige staat 5d</summary>
    public SensorEntity BuienradarFullCondition5d => new(_haContext, "sensor.buienradar_full_condition_5d");
    ///<summary>Stationnaam</summary>
    public SensorEntity BuienradarStationname => new(_haContext, "sensor.buienradar_stationname");
    ///<summary>Symbool</summary>
    public SensorEntity BuienradarSymbol => new(_haContext, "sensor.buienradar_symbol");
    ///<summary>Symbool 1d</summary>
    public SensorEntity BuienradarSymbol1d => new(_haContext, "sensor.buienradar_symbol_1d");
    ///<summary>Symbool 2d</summary>
    public SensorEntity BuienradarSymbol2d => new(_haContext, "sensor.buienradar_symbol_2d");
    ///<summary>Symbool 3d</summary>
    public SensorEntity BuienradarSymbol3d => new(_haContext, "sensor.buienradar_symbol_3d");
    ///<summary>Symbool 4d</summary>
    public SensorEntity BuienradarSymbol4d => new(_haContext, "sensor.buienradar_symbol_4d");
    ///<summary>Symbool 5d</summary>
    public SensorEntity BuienradarSymbol5d => new(_haContext, "sensor.buienradar_symbol_5d");
    ///<summary>Windrichting</summary>
    public SensorEntity BuienradarWindDirection => new(_haContext, "sensor.buienradar_wind_direction");
    ///<summary>Windrichting 1d</summary>
    public SensorEntity BuienradarWindDirection1d => new(_haContext, "sensor.buienradar_wind_direction_1d");
    ///<summary>Windrichting 2d</summary>
    public SensorEntity BuienradarWindDirection2d => new(_haContext, "sensor.buienradar_wind_direction_2d");
    ///<summary>Windrichting 3d</summary>
    public SensorEntity BuienradarWindDirection3d => new(_haContext, "sensor.buienradar_wind_direction_3d");
    ///<summary>Windrichting 4d</summary>
    public SensorEntity BuienradarWindDirection4d => new(_haContext, "sensor.buienradar_wind_direction_4d");
    ///<summary>Windrichting 5d</summary>
    public SensorEntity BuienradarWindDirection5d => new(_haContext, "sensor.buienradar_wind_direction_5d");
    ///<summary>Home Assistant Knoppen</summary>
    public SensorEntity Buttons => new(_haContext, "sensor.buttons");
    ///<summary>Home Assistant Kalenders</summary>
    public SensorEntity Calendars => new(_haContext, "sensor.calendars");
    ///<summary>Home Assistant Camera&apos;s</summary>
    public SensorEntity Cameras => new(_haContext, "sensor.cameras");
    ///<summary>Home Assistant Klimaat</summary>
    public SensorEntity Climate => new(_haContext, "sensor.climate");
    ///<summary>Home Assistant Bedekkingen</summary>
    public SensorEntity Covers => new(_haContext, "sensor.covers");
    ///<summary>Huidig UV-niveau</summary>
    public SensorEntity CurrentUvLevel => new(_haContext, "sensor.current_uv_level");
    ///<summary>Home Assistant Custom integraties</summary>
    public SensorEntity CustomIntegrations => new(_haContext, "sensor.custom_integrations");
    ///<summary>Home Assistant Datums</summary>
    public SensorEntity Dates => new(_haContext, "sensor.dates");
    ///<summary>Home Assistant Datum/tijden</summary>
    public SensorEntity Datetimes => new(_haContext, "sensor.datetimes");
    ///<summary>Home Assistant Locatie trackers</summary>
    public SensorEntity DeviceTrackers => new(_haContext, "sensor.device_trackers");
    ///<summary>Home Assistant Apparaten</summary>
    public SensorEntity Devices => new(_haContext, "sensor.devices");
    ///<summary>EnergySocket (5c2faf02a546) Wi-Fi SSID</summary>
    public SensorEntity Energysocket5c2faf02a546WiFiSsid => new(_haContext, "sensor.energysocket_5c2faf02a546_wi_fi_ssid");
    ///<summary>EnergySocket (5c2faf0c7564) Wi-Fi SSID</summary>
    public SensorEntity Energysocket5c2faf0c7564WiFiSsid => new(_haContext, "sensor.energysocket_5c2faf0c7564_wi_fi_ssid");
    ///<summary>EnergySocket (5c2faf0d8364) Wi-Fi SSID</summary>
    public SensorEntity Energysocket5c2faf0d8364WiFiSsid => new(_haContext, "sensor.energysocket_5c2faf0d8364_wi_fi_ssid");
    ///<summary>Home Assistant Entiteiten</summary>
    public SensorEntity Entities => new(_haContext, "sensor.entities");
    ///<summary>Home Assistant Ventilatoren</summary>
    public SensorEntity Fans => new(_haContext, "sensor.fans");
    ///<summary>FC Emmen</summary>
    public SensorEntity FcEmmen => new(_haContext, "sensor.fc_emmen");
    ///<summary>FC Groningen</summary>
    public SensorEntity FcGroningen => new(_haContext, "sensor.fc_groningen");
    ///<summary>FC Twente</summary>
    public SensorEntity FcTwente => new(_haContext, "sensor.fc_twente");
    ///<summary>FC Utrecht</summary>
    public SensorEntity FcUtrecht => new(_haContext, "sensor.fc_utrecht");
    ///<summary>FC Volendam</summary>
    public SensorEntity FcVolendam => new(_haContext, "sensor.fc_volendam");
    ///<summary>Feyenoord</summary>
    public SensorEntity Feyenoord => new(_haContext, "sensor.feyenoord");
    ///<summary>Fortuna Sittard</summary>
    public SensorEntity FortunaSittard => new(_haContext, "sensor.fortuna_sittard");
    ///<summary>Go Ahead Eagles</summary>
    public SensorEntity GoAheadEagles => new(_haContext, "sensor.go_ahead_eagles");
    ///<summary>Hub Vincent alarms</summary>
    public SensorEntity HubVincentAlarms => new(_haContext, "sensor.hub_vincent_alarms");
    ///<summary>Hub Vincent device</summary>
    public SensorEntity HubVincentDevice => new(_haContext, "sensor.hub_vincent_device");
    ///<summary>Home Assistant Luchtbevochtigers</summary>
    public SensorEntity Humidifiers => new(_haContext, "sensor.humidifiers");
    ///<summary>Home Assistant Afbeeldingen</summary>
    public SensorEntity Images => new(_haContext, "sensor.images");
    ///<summary>Home Assistant Invoer booleans</summary>
    public SensorEntity InputBooleans => new(_haContext, "sensor.input_booleans");
    ///<summary>Home Assistant Invoer knoppen</summary>
    public SensorEntity InputButtons => new(_haContext, "sensor.input_buttons");
    ///<summary>Home Assistant Invoer datum/tijden</summary>
    public SensorEntity InputDatetimes => new(_haContext, "sensor.input_datetimes");
    ///<summary>Home Assistant Invoer getallen</summary>
    public SensorEntity InputNumbers => new(_haContext, "sensor.input_numbers");
    ///<summary>Home Assistant Invoer selecties</summary>
    public SensorEntity InputSelects => new(_haContext, "sensor.input_selects");
    ///<summary>Home Assistant Invoer teksten</summary>
    public SensorEntity InputTexts => new(_haContext, "sensor.input_texts");
    ///<summary>Home Assistant Integraties</summary>
    public SensorEntity Integrations => new(_haContext, "sensor.integrations");
    ///<summary>IPv4 address eth0</summary>
    public SensorEntity Ipv4AddressEth0 => new(_haContext, "sensor.ipv4_address_eth0");
    ///<summary>KNMI Kleur code</summary>
    public SensorEntity Knmicolorcode => new(_haContext, "sensor.knmicolorcode");
    ///<summary>KNMI Melding</summary>
    public SensorEntity Knmimessage => new(_haContext, "sensor.knmimessage");
    ///<summary>Last boot</summary>
    public SensorEntity LastBoot => new(_haContext, "sensor.last_boot");
    ///<summary>Home Assistant Lichten</summary>
    public SensorEntity Lights => new(_haContext, "sensor.lights");
    ///<summary>Home Assistant Sloten</summary>
    public SensorEntity Locks => new(_haContext, "sensor.locks");
    ///<summary>Mail Image System Path</summary>
    public SensorEntity MailImageSystemPath => new(_haContext, "sensor.mail_image_system_path");
    ///<summary>Mail Image URL</summary>
    public SensorEntity MailImageUrl => new(_haContext, "sensor.mail_image_url");
    ///<summary>Home Assistant Media spelers</summary>
    public SensorEntity MediaPlayers => new(_haContext, "sensor.media_players");
    ///<summary>Moon Phase</summary>
    public SensorEntity MoonPhase => new(_haContext, "sensor.moon_phase");
    ///<summary>N.E.C.</summary>
    public SensorEntity NEC => new(_haContext, "sensor.n_e_c");
    ///<summary>neerslag_buienalarm_regen_data</summary>
    public SensorEntity NeerslagBuienalarmRegenData => new(_haContext, "sensor.neerslag_buienalarm_regen_data");
    ///<summary>neerslag_buienradar_regen_data</summary>
    public SensorEntity NeerslagBuienradarRegenData => new(_haContext, "sensor.neerslag_buienradar_regen_data");
    ///<summary>Home Assistant Getallen</summary>
    public SensorEntity Numbers => new(_haContext, "sensor.numbers");
    public SensorEntity Onedrivebackup => new(_haContext, "sensor.onedrivebackup");
    ///<summary>P1 meter (3c39e72a64e8) Huidig tarief</summary>
    public SensorEntity P1Meter3c39e72a64e8ActiveTariff => new(_haContext, "sensor.p1_meter_3c39e72a64e8_active_tariff");
    ///<summary>P1 meter (3c39e72a64e8) DSMR versie</summary>
    public SensorEntity P1Meter3c39e72a64e8DsmrVersion => new(_haContext, "sensor.p1_meter_3c39e72a64e8_dsmr_version");
    ///<summary>P1 meter (3c39e72a64e8) Lange stroomstoringen gedetecteerd</summary>
    public SensorEntity P1Meter3c39e72a64e8LongPowerFailuresDetected => new(_haContext, "sensor.p1_meter_3c39e72a64e8_long_power_failures_detected");
    ///<summary>P1 meter (3c39e72a64e8) Stroomstoringen gedetecteerd</summary>
    public SensorEntity P1Meter3c39e72a64e8PowerFailuresDetected => new(_haContext, "sensor.p1_meter_3c39e72a64e8_power_failures_detected");
    ///<summary>P1 meter (3c39e72a64e8) Slimme meter identificatie</summary>
    public SensorEntity P1Meter3c39e72a64e8SmartMeterIdentifier => new(_haContext, "sensor.p1_meter_3c39e72a64e8_smart_meter_identifier");
    ///<summary>P1 meter (3c39e72a64e8) Slimme meter model</summary>
    public SensorEntity P1Meter3c39e72a64e8SmartMeterModel => new(_haContext, "sensor.p1_meter_3c39e72a64e8_smart_meter_model");
    ///<summary>P1 meter (3c39e72a64e8) Spanningsdips gedetecteerd fase 3</summary>
    public SensorEntity P1Meter3c39e72a64e8VoltageSagsDetectedL1 => new(_haContext, "sensor.p1_meter_3c39e72a64e8_voltage_sags_detected_l1");
    ///<summary>P1 meter (3c39e72a64e8) Spanningsdips gedetecteerd fase 2</summary>
    public SensorEntity P1Meter3c39e72a64e8VoltageSagsDetectedL2 => new(_haContext, "sensor.p1_meter_3c39e72a64e8_voltage_sags_detected_l2");
    ///<summary>P1 meter (3c39e72a64e8) Spanningsdips gedetecteerd fase 1</summary>
    public SensorEntity P1Meter3c39e72a64e8VoltageSagsDetectedL3 => new(_haContext, "sensor.p1_meter_3c39e72a64e8_voltage_sags_detected_l3");
    ///<summary>P1 meter (3c39e72a64e8) Spanningspieken gedetecteerd fase 1</summary>
    public SensorEntity P1Meter3c39e72a64e8VoltageSwellsDetectedL1 => new(_haContext, "sensor.p1_meter_3c39e72a64e8_voltage_swells_detected_l1");
    ///<summary>P1 meter (3c39e72a64e8) Spanningspieken gedetecteerd fase 2</summary>
    public SensorEntity P1Meter3c39e72a64e8VoltageSwellsDetectedL2 => new(_haContext, "sensor.p1_meter_3c39e72a64e8_voltage_swells_detected_l2");
    ///<summary>P1 meter (3c39e72a64e8) Spanningspieken gedetecteerd fase 3</summary>
    public SensorEntity P1Meter3c39e72a64e8VoltageSwellsDetectedL3 => new(_haContext, "sensor.p1_meter_3c39e72a64e8_voltage_swells_detected_l3");
    ///<summary>P1 meter (3c39e72a64e8) Wi-Fi SSID</summary>
    public SensorEntity P1Meter3c39e72a64e8WiFiSsid => new(_haContext, "sensor.p1_meter_3c39e72a64e8_wi_fi_ssid");
    ///<summary>paper_pickup_day</summary>
    public SensorEntity PaperPickupDay => new(_haContext, "sensor.paper_pickup_day");
    ///<summary>Home Assistant Aanhoudende meldingen</summary>
    public SensorEntity PersistentNotifications => new(_haContext, "sensor.persistent_notifications");
    ///<summary>Home Assistant Personen</summary>
    public SensorEntity Persons => new(_haContext, "sensor.persons");
    ///<summary>PetSnowy Error</summary>
    public SensorEntity PetsnowyError => new(_haContext, "sensor.petsnowy_error");
    ///<summary>PetSnowy Filter Remaining</summary>
    public SensorEntity PetsnowyFilterRemaining => new(_haContext, "sensor.petsnowy_filter_remaining");
    ///<summary>PetSnowy Notification</summary>
    public SensorEntity PetsnowyNotification => new(_haContext, "sensor.petsnowy_notification");
    ///<summary>PetSnowy Status</summary>
    public SensorEntity PetsnowyStatus => new(_haContext, "sensor.petsnowy_status");
    ///<summary>PetSnowy Toilet Trips Per Day</summary>
    public SensorEntity PetsnowyToiletTripsPerDay => new(_haContext, "sensor.petsnowy_toilet_trips_per_day");
    ///<summary>Picnic: Ida Gerhardtlaan 28 Aantal items in winkelwagen</summary>
    public SensorEntity PicnicCartItemsCount => new(_haContext, "sensor.picnic_cart_items_count");
    ///<summary>Picnic: Ida Gerhardtlaan 28 Bezorgtijd laatste bestelling</summary>
    public SensorEntity PicnicLastOrderDeliveryTime => new(_haContext, "sensor.picnic_last_order_delivery_time");
    ///<summary>Picnic: Ida Gerhardtlaan 28 Maximale besteltijd voor de laatste bestelling</summary>
    public SensorEntity PicnicLastOrderMaxOrderTime => new(_haContext, "sensor.picnic_last_order_max_order_time");
    ///<summary>Picnic: Ida Gerhardtlaan 28 Einde van het tijdslot van de laatste bestelling</summary>
    public SensorEntity PicnicLastOrderSlotEnd => new(_haContext, "sensor.picnic_last_order_slot_end");
    ///<summary>Picnic: Ida Gerhardtlaan 28 Start van het tijdslot van de laatste bestelling</summary>
    public SensorEntity PicnicLastOrderSlotStart => new(_haContext, "sensor.picnic_last_order_slot_start");
    ///<summary>Picnic: Ida Gerhardtlaan 28 Verwacht einde van de volgende bestelling</summary>
    public SensorEntity PicnicNextDeliveryEtaEnd => new(_haContext, "sensor.picnic_next_delivery_eta_end");
    ///<summary>Picnic: Ida Gerhardtlaan 28 Verwacht begin van de volgende bestelling</summary>
    public SensorEntity PicnicNextDeliveryEtaStart => new(_haContext, "sensor.picnic_next_delivery_eta_start");
    ///<summary>Picnic: Ida Gerhardtlaan 28 Einde van het tijdslot van de volgende bestelling</summary>
    public SensorEntity PicnicNextDeliverySlotEnd => new(_haContext, "sensor.picnic_next_delivery_slot_end");
    ///<summary>Picnic: Ida Gerhardtlaan 28 Begin van het tijdslot van de volgende bestelling</summary>
    public SensorEntity PicnicNextDeliverySlotStart => new(_haContext, "sensor.picnic_next_delivery_slot_start");
    ///<summary>Picnic: Ida Gerhardtlaan 28 Einde van het geselecteerde tijdslot</summary>
    public SensorEntity PicnicSelectedSlotEnd => new(_haContext, "sensor.picnic_selected_slot_end");
    ///<summary>Picnic: Ida Gerhardtlaan 28 Maximale besteltijd voor het geselecteerde tijdslot</summary>
    public SensorEntity PicnicSelectedSlotMaxOrderTime => new(_haContext, "sensor.picnic_selected_slot_max_order_time");
    ///<summary>Picnic: Ida Gerhardtlaan 28 Begin van het geselecteerde tijdslot</summary>
    public SensorEntity PicnicSelectedSlotStart => new(_haContext, "sensor.picnic_selected_slot_start");
    ///<summary>PixelHaveFood</summary>
    public SensorEntity Pixelhavefood => new(_haContext, "sensor.pixelhavefood");
    ///<summary>pmd_pickup_day</summary>
    public SensorEntity PmdPickupDay => new(_haContext, "sensor.pmd_pickup_day");
    ///<summary>Solar production forecast Hoogste vermogenspiek tijd - vandaag</summary>
    public SensorEntity PowerHighestPeakTimeToday => new(_haContext, "sensor.power_highest_peak_time_today");
    ///<summary>Solar production forecast Hoogste vermogenspiek tijd - morgen</summary>
    public SensorEntity PowerHighestPeakTimeTomorrow => new(_haContext, "sensor.power_highest_peak_time_tomorrow");
    ///<summary>PS5-Vincent activity</summary>
    public SensorEntity Ps5VincentActivity => new(_haContext, "sensor.ps5_vincent_activity");
    ///<summary>PS5TurnOn</summary>
    public SensorEntity Ps5turnon => new(_haContext, "sensor.ps5turnon");
    ///<summary>PSNImage</summary>
    public SensorEntity Psnimage => new(_haContext, "sensor.psnimage");
    ///<summary>PSV</summary>
    public SensorEntity Psv => new(_haContext, "sensor.psv");
    ///<summary>Home Assistant Afstandsbedieningen</summary>
    public SensorEntity Remotes => new(_haContext, "sensor.remotes");
    ///<summary>RKC Waalwijk</summary>
    public SensorEntity RkcWaalwijk => new(_haContext, "sensor.rkc_waalwijk");
    ///<summary>RT-AX88U AiMesh</summary>
    public SensorEntity RtAx88uAimesh => new(_haContext, "sensor.rt_ax88u_aimesh");
    ///<summary>RT-AX88U Boot Time</summary>
    public SensorEntity RtAx88uBootTime => new(_haContext, "sensor.rt_ax88u_boot_time");
    ///<summary>RT-AX88U Connected Devices</summary>
    public SensorEntity RtAx88uConnectedDevices => new(_haContext, "sensor.rt_ax88u_connected_devices");
    ///<summary>RT-AX88U Latest Connected</summary>
    public SensorEntity RtAx88uLatestConnected => new(_haContext, "sensor.rt_ax88u_latest_connected");
    ///<summary>RT-AX88U Load Average (1 min)</summary>
    public SensorEntity RtAx88uLoadAverage1Min => new(_haContext, "sensor.rt_ax88u_load_average_1_min");
    ///<summary>RT-AX88U Load Average (15 min)</summary>
    public SensorEntity RtAx88uLoadAverage15Min => new(_haContext, "sensor.rt_ax88u_load_average_15_min");
    ///<summary>RT-AX88U Load Average (5 min)</summary>
    public SensorEntity RtAx88uLoadAverage5Min => new(_haContext, "sensor.rt_ax88u_load_average_5_min");
    ///<summary>RT-AX88U WAN IP</summary>
    public SensorEntity RtAx88uWanIp => new(_haContext, "sensor.rt_ax88u_wan_ip");
    ///<summary>SBV Excelsior</summary>
    public SensorEntity SbvExcelsior => new(_haContext, "sensor.sbv_excelsior");
    ///<summary>SC Cambuur</summary>
    public SensorEntity ScCambuur => new(_haContext, "sensor.sc_cambuur");
    ///<summary>sc Heerenveen</summary>
    public SensorEntity ScHeerenveen => new(_haContext, "sensor.sc_heerenveen");
    ///<summary>Home Assistant Scènes</summary>
    public SensorEntity Scenes => new(_haContext, "sensor.scenes");
    ///<summary>Home Assistant Scripts</summary>
    public SensorEntity Scripts => new(_haContext, "sensor.scripts");
    ///<summary>Season</summary>
    public SensorEntity Season => new(_haContext, "sensor.season");
    ///<summary>Home Assistant Selecties</summary>
    public SensorEntity Selects => new(_haContext, "sensor.selects");
    ///<summary>Home Assistant Sensoren</summary>
    public SensorEntity Sensors => new(_haContext, "sensor.sensors");
    ///<summary>Home Assistant Sirenes</summary>
    public SensorEntity Sirens => new(_haContext, "sensor.sirens");
    ///<summary>SM-G780G Battery state</summary>
    public SensorEntity SmG780gBatteryState => new(_haContext, "sensor.sm_g780g_battery_state");
    ///<summary>SM-G780G Charger type</summary>
    public SensorEntity SmG780gChargerType => new(_haContext, "sensor.sm_g780g_charger_type");
    ///<summary>SM-S908B Battery health</summary>
    public SensorEntity SmS908bBatteryHealth => new(_haContext, "sensor.sm_s908b_battery_health");
    ///<summary>SM-S908B Battery state</summary>
    public SensorEntity SmS908bBatteryState => new(_haContext, "sensor.sm_s908b_battery_state");
    ///<summary>SM-S908B Charger type</summary>
    public SensorEntity SmS908bChargerType => new(_haContext, "sensor.sm_s908b_charger_type");
    ///<summary>SM-T860 Battery health</summary>
    public SensorEntity SmT860BatteryHealth => new(_haContext, "sensor.sm_t860_battery_health");
    ///<summary>SM-T860 Battery state</summary>
    public SensorEntity SmT860BatteryState => new(_haContext, "sensor.sm_t860_battery_state");
    ///<summary>SM-T860 Charger type</summary>
    public SensorEntity SmT860ChargerType => new(_haContext, "sensor.sm_t860_charger_type");
    ///<summary>Smart Series 4000 97AE Mode</summary>
    public SensorEntity SmartSeries400097aeMode => new(_haContext, "sensor.smart_series_4000_97ae_mode");
    ///<summary>Smart Series 4000 97AE Number of sectors</summary>
    public SensorEntity SmartSeries400097aeNumberOfSectors => new(_haContext, "sensor.smart_series_4000_97ae_number_of_sectors");
    ///<summary>Smart Series 4000 97AE Pressure</summary>
    public SensorEntity SmartSeries400097aePressure => new(_haContext, "sensor.smart_series_4000_97ae_pressure");
    ///<summary>Smart Series 4000 97AE Sector</summary>
    public SensorEntity SmartSeries400097aeSector => new(_haContext, "sensor.smart_series_4000_97ae_sector");
    ///<summary>Smart Series 4000 97AE Toothbrush State</summary>
    public SensorEntity SmartSeries400097aeToothbrushState => new(_haContext, "sensor.smart_series_4000_97ae_toothbrush_state");
    ///<summary>Snowy Pet Feeder Manual Feed Times</summary>
    public SensorEntity SnowyPetFeederManualFeedTimes => new(_haContext, "sensor.snowy_pet_feeder_manual_feed_times");
    ///<summary>Snowy Pet Feeder Status</summary>
    public SensorEntity SnowyPetFeederStatus => new(_haContext, "sensor.snowy_pet_feeder_status");
    ///<summary>Snowy Pet Water Fountain Cleaning Time</summary>
    public SensorEntity SnowyPetWaterFountainCleaningTime => new(_haContext, "sensor.snowy_pet_water_fountain_cleaning_time");
    ///<summary>Snowy Pet Water Fountain  Cut Off Time</summary>
    public SensorEntity SnowyPetWaterFountainCutOffTime => new(_haContext, "sensor.snowy_pet_water_fountain_cut_off_time");
    ///<summary>Snowy Pet Water Fountain Discharge Time</summary>
    public SensorEntity SnowyPetWaterFountainDischargeTime => new(_haContext, "sensor.snowy_pet_water_fountain_discharge_time");
    ///<summary>Snowy Pet Water Fountain Filter Time</summary>
    public SensorEntity SnowyPetWaterFountainFilterTime => new(_haContext, "sensor.snowy_pet_water_fountain_filter_time");
    ///<summary>Snowy Pet Water Fountain Mode</summary>
    public SensorEntity SnowyPetWaterFountainMode => new(_haContext, "sensor.snowy_pet_water_fountain_mode");
    ///<summary>Soundbar Media Input Source</summary>
    public SensorEntity SoundbarMediaInputSource => new(_haContext, "sensor.soundbar_media_input_source");
    ///<summary>Soundbar Media Playback Status</summary>
    public SensorEntity SoundbarMediaPlaybackStatus => new(_haContext, "sensor.soundbar_media_playback_status");
    ///<summary>Sparta Rotterdam</summary>
    public SensorEntity SpartaRotterdam => new(_haContext, "sensor.sparta_rotterdam");
    ///<summary>StatusPetSnowy</summary>
    public SensorEntity Statuspetsnowy => new(_haContext, "sensor.statuspetsnowy");
    ///<summary>Home Assistant Spraak-naar-tekst</summary>
    public SensorEntity Stt => new(_haContext, "sensor.stt");
    ///<summary>Sun Volgende dageraad</summary>
    public SensorEntity SunNextDawn => new(_haContext, "sensor.sun_next_dawn");
    ///<summary>Sun Volgende schemering</summary>
    public SensorEntity SunNextDusk => new(_haContext, "sensor.sun_next_dusk");
    ///<summary>Sun Volgende middernacht</summary>
    public SensorEntity SunNextMidnight => new(_haContext, "sensor.sun_next_midnight");
    ///<summary>Sun Volgende middag</summary>
    public SensorEntity SunNextNoon => new(_haContext, "sensor.sun_next_noon");
    ///<summary>Sun Volgende opkomst</summary>
    public SensorEntity SunNextRising => new(_haContext, "sensor.sun_next_rising");
    ///<summary>Sun Volgende ondergang</summary>
    public SensorEntity SunNextSetting => new(_haContext, "sensor.sun_next_setting");
    ///<summary>Home Assistant Zonnen</summary>
    public SensorEntity Suns => new(_haContext, "sensor.suns");
    ///<summary>Home Assistant Schakelaars</summary>
    public SensorEntity Switches => new(_haContext, "sensor.switches");
    ///<summary>Sync Box HDMI1 status</summary>
    public SensorEntity SyncBoxHdmi1Status => new(_haContext, "sensor.sync_box_hdmi1_status");
    ///<summary>Sync Box HDMI2 status</summary>
    public SensorEntity SyncBoxHdmi2Status => new(_haContext, "sensor.sync_box_hdmi2_status");
    ///<summary>Sync Box HDMI3 status</summary>
    public SensorEntity SyncBoxHdmi3Status => new(_haContext, "sensor.sync_box_hdmi3_status");
    ///<summary>Sync Box HDMI4 status</summary>
    public SensorEntity SyncBoxHdmi4Status => new(_haContext, "sensor.sync_box_hdmi4_status");
    ///<summary>Home Assistant Teksten</summary>
    public SensorEntity Texts => new(_haContext, "sensor.texts");
    ///<summary>Home Assistant Tijden</summary>
    public SensorEntity Times => new(_haContext, "sensor.times");
    ///<summary>Home Assistant Tekst-naar-spraak</summary>
    public SensorEntity Tts => new(_haContext, "sensor.tts");
    ///<summary>TV Media Input Source</summary>
    public SensorEntity TvMediaInputSource => new(_haContext, "sensor.tv_media_input_source");
    ///<summary>TV Tv Channel</summary>
    public SensorEntity TvTvChannel => new(_haContext, "sensor.tv_tv_channel");
    ///<summary>TV Tv Channel Name</summary>
    public SensorEntity TvTvChannelName => new(_haContext, "sensor.tv_tv_channel_name");
    ///<summary>Home Assistant Update</summary>
    public SensorEntity Update => new(_haContext, "sensor.update");
    ///<summary>Home Assistant Stofzuigers</summary>
    public SensorEntity Vacuums => new(_haContext, "sensor.vacuums");
    ///<summary>VINCENT-NAS (Schijf 1) Status</summary>
    public SensorEntity VincentNasSchijf1Status => new(_haContext, "sensor.vincent_nas_schijf_1_status");
    ///<summary>VINCENT-NAS (Volume 1) Status</summary>
    public SensorEntity VincentNasVolume1Status => new(_haContext, "sensor.vincent_nas_volume_1_status");
    ///<summary>Vitesse</summary>
    public SensorEntity Vitesse => new(_haContext, "sensor.vitesse");
    ///<summary>Voordeur Last activity</summary>
    public SensorEntity VoordeurLastActivity => new(_haContext, "sensor.voordeur_last_activity");
    ///<summary>Voordeur Last ding</summary>
    public SensorEntity VoordeurLastDing => new(_haContext, "sensor.voordeur_last_ding");
    ///<summary>Voordeur Last motion</summary>
    public SensorEntity VoordeurLastMotion => new(_haContext, "sensor.voordeur_last_motion");
    ///<summary>Voordeur Volume</summary>
    public SensorEntity VoordeurVolume => new(_haContext, "sensor.voordeur_volume");
    ///<summary>Wasmachine Washer Completion Time</summary>
    public SensorEntity WasmachineWasherCompletionTime => new(_haContext, "sensor.wasmachine_washer_completion_time");
    ///<summary>Wasmachine Washer Job State</summary>
    public SensorEntity WasmachineWasherJobState => new(_haContext, "sensor.wasmachine_washer_job_state");
    ///<summary>Wasmachine Washer Machine State</summary>
    public SensorEntity WasmachineWasherMachineState => new(_haContext, "sensor.wasmachine_washer_machine_state");
    ///<summary>watchman_last_updated</summary>
    public SensorEntity WatchmanLastUpdated => new(_haContext, "sensor.watchman_last_updated");
    ///<summary>Home Assistant Boilers</summary>
    public SensorEntity WaterHeaters => new(_haContext, "sensor.water_heaters");
    ///<summary>Watermeter (5c2faf0e9b0a) Wi-Fi SSID</summary>
    public SensorEntity Watermeter5c2faf0e9b0aWiFiSsid => new(_haContext, "sensor.watermeter_5c2faf0e9b0a_wi_fi_ssid");
    ///<summary>Home Assistant Weer</summary>
    public SensorEntity Weather => new(_haContext, "sensor.weather");
    ///<summary>Woonkamer device</summary>
    public SensorEntity WoonkamerDevice => new(_haContext, "sensor.woonkamer_device");
    ///<summary>Home Assistant Zones</summary>
    public SensorEntity Zones => new(_haContext, "sensor.zones");
    ///<summary>Repairs Actief</summary>
    public NumericSensorEntity ActiveIssues => new(_haContext, "sensor.active_issues");
    ///<summary>All standby energy</summary>
    public NumericSensorEntity AllStandbyEnergy => new(_haContext, "sensor.all_standby_energy");
    ///<summary>All standby power</summary>
    public NumericSensorEntity AllStandbyPower => new(_haContext, "sensor.all_standby_power");
    ///<summary>Badkamer Battery</summary>
    public NumericSensorEntity BadkamerBattery => new(_haContext, "sensor.badkamer_battery");
    ///<summary>Badkamer Battery</summary>
    public NumericSensorEntity BadkamerBattery2 => new(_haContext, "sensor.badkamer_battery_2");
    ///<summary>Badkamer Illuminance</summary>
    public NumericSensorEntity BadkamerIlluminance => new(_haContext, "sensor.badkamer_illuminance");
    ///<summary>Badkamer Temperature</summary>
    public NumericSensorEntity BadkamerTemperature => new(_haContext, "sensor.badkamer_temperature");
    ///<summary>Badkamer Battery</summary>
    public NumericSensorEntity BadkamermotionBattery => new(_haContext, "sensor.badkamermotion_battery");
    ///<summary>Berging Battery</summary>
    public NumericSensorEntity BergingBattery => new(_haContext, "sensor.berging_battery");
    ///<summary>Berging Device Energy</summary>
    public NumericSensorEntity BergingDeviceEnergy => new(_haContext, "sensor.berging_device_energy");
    ///<summary>Berging Device Power</summary>
    public NumericSensorEntity BergingDevicePower => new(_haContext, "sensor.berging_device_power");
    ///<summary>Berging Illuminance</summary>
    public NumericSensorEntity BergingIlluminance => new(_haContext, "sensor.berging_illuminance");
    ///<summary>Berging Temperature</summary>
    public NumericSensorEntity BergingTemperature => new(_haContext, "sensor.berging_temperature");
    ///<summary>Bot A801 Batterij</summary>
    public NumericSensorEntity BotA801Battery => new(_haContext, "sensor.bot_a801_battery");
    ///<summary>Gevoelstemperatuur</summary>
    public NumericSensorEntity BuienradarFeelTemperature => new(_haContext, "sensor.buienradar_feel_temperature");
    ///<summary>Grondtemperatuur</summary>
    public NumericSensorEntity BuienradarGroundTemperature => new(_haContext, "sensor.buienradar_ground_temperature");
    ///<summary>Luchtvochtigheid</summary>
    public NumericSensorEntity BuienradarHumidity => new(_haContext, "sensor.buienradar_humidity");
    ///<summary>Straling</summary>
    public NumericSensorEntity BuienradarIrradiance => new(_haContext, "sensor.buienradar_irradiance");
    ///<summary>Maximale regen 1d</summary>
    public NumericSensorEntity BuienradarMaximumRain1d => new(_haContext, "sensor.buienradar_maximum_rain_1d");
    ///<summary>Maximale regen 2d</summary>
    public NumericSensorEntity BuienradarMaximumRain2d => new(_haContext, "sensor.buienradar_maximum_rain_2d");
    ///<summary>Maximale regen 3d</summary>
    public NumericSensorEntity BuienradarMaximumRain3d => new(_haContext, "sensor.buienradar_maximum_rain_3d");
    ///<summary>Maximale regen 4d</summary>
    public NumericSensorEntity BuienradarMaximumRain4d => new(_haContext, "sensor.buienradar_maximum_rain_4d");
    ///<summary>Maximale regen 5d</summary>
    public NumericSensorEntity BuienradarMaximumRain5d => new(_haContext, "sensor.buienradar_maximum_rain_5d");
    ///<summary>Minimale regen 1d</summary>
    public NumericSensorEntity BuienradarMinimumRain1d => new(_haContext, "sensor.buienradar_minimum_rain_1d");
    ///<summary>Minimale regen 2d</summary>
    public NumericSensorEntity BuienradarMinimumRain2d => new(_haContext, "sensor.buienradar_minimum_rain_2d");
    ///<summary>Minimale regen 3d</summary>
    public NumericSensorEntity BuienradarMinimumRain3d => new(_haContext, "sensor.buienradar_minimum_rain_3d");
    ///<summary>Minimale regen 4d</summary>
    public NumericSensorEntity BuienradarMinimumRain4d => new(_haContext, "sensor.buienradar_minimum_rain_4d");
    ///<summary>Minimale regen 5d</summary>
    public NumericSensorEntity BuienradarMinimumRain5d => new(_haContext, "sensor.buienradar_minimum_rain_5d");
    ///<summary>Minimale temperatuur 1d</summary>
    public NumericSensorEntity BuienradarMinimumTemperature1d => new(_haContext, "sensor.buienradar_minimum_temperature_1d");
    ///<summary>Minimale temperatuur 2d</summary>
    public NumericSensorEntity BuienradarMinimumTemperature2d => new(_haContext, "sensor.buienradar_minimum_temperature_2d");
    ///<summary>Minimale temperatuur 3d</summary>
    public NumericSensorEntity BuienradarMinimumTemperature3d => new(_haContext, "sensor.buienradar_minimum_temperature_3d");
    ///<summary>Minimale temperatuur 4d</summary>
    public NumericSensorEntity BuienradarMinimumTemperature4d => new(_haContext, "sensor.buienradar_minimum_temperature_4d");
    ///<summary>Minimale temperatuur 5d</summary>
    public NumericSensorEntity BuienradarMinimumTemperature5d => new(_haContext, "sensor.buienradar_minimum_temperature_5d");
    ///<summary>Neerslag</summary>
    public NumericSensorEntity BuienradarPrecipitation => new(_haContext, "sensor.buienradar_precipitation");
    ///<summary>Neerslagverwachting gemiddeld</summary>
    public NumericSensorEntity BuienradarPrecipitationForecastAverage => new(_haContext, "sensor.buienradar_precipitation_forecast_average");
    ///<summary>Neerslagverwachting totaal</summary>
    public NumericSensorEntity BuienradarPrecipitationForecastTotal => new(_haContext, "sensor.buienradar_precipitation_forecast_total");
    ///<summary>Druk</summary>
    public NumericSensorEntity BuienradarPressure => new(_haContext, "sensor.buienradar_pressure");
    ///<summary>Regen 1d</summary>
    public NumericSensorEntity BuienradarRain1d => new(_haContext, "sensor.buienradar_rain_1d");
    ///<summary>Regen 2d</summary>
    public NumericSensorEntity BuienradarRain2d => new(_haContext, "sensor.buienradar_rain_2d");
    ///<summary>Regen 3d</summary>
    public NumericSensorEntity BuienradarRain3d => new(_haContext, "sensor.buienradar_rain_3d");
    ///<summary>Regen 4d</summary>
    public NumericSensorEntity BuienradarRain4d => new(_haContext, "sensor.buienradar_rain_4d");
    ///<summary>Regen 5d</summary>
    public NumericSensorEntity BuienradarRain5d => new(_haContext, "sensor.buienradar_rain_5d");
    ///<summary>Regen laatste 24u</summary>
    public NumericSensorEntity BuienradarRainLast24h => new(_haContext, "sensor.buienradar_rain_last_24h");
    ///<summary>Regen laatste uur</summary>
    public NumericSensorEntity BuienradarRainLastHour => new(_haContext, "sensor.buienradar_rain_last_hour");
    ///<summary>Regenkans 1d</summary>
    public NumericSensorEntity BuienradarRainchance1d => new(_haContext, "sensor.buienradar_rainchance_1d");
    ///<summary>Regenkans 2d</summary>
    public NumericSensorEntity BuienradarRainchance2d => new(_haContext, "sensor.buienradar_rainchance_2d");
    ///<summary>Regenkans 3d</summary>
    public NumericSensorEntity BuienradarRainchance3d => new(_haContext, "sensor.buienradar_rainchance_3d");
    ///<summary>Regenkans 4d</summary>
    public NumericSensorEntity BuienradarRainchance4d => new(_haContext, "sensor.buienradar_rainchance_4d");
    ///<summary>Regenkans 5d</summary>
    public NumericSensorEntity BuienradarRainchance5d => new(_haContext, "sensor.buienradar_rainchance_5d");
    ///<summary>Zonkans 1d</summary>
    public NumericSensorEntity BuienradarSunchance1d => new(_haContext, "sensor.buienradar_sunchance_1d");
    ///<summary>Zonkans 2d</summary>
    public NumericSensorEntity BuienradarSunchance2d => new(_haContext, "sensor.buienradar_sunchance_2d");
    ///<summary>Zonkans 3d</summary>
    public NumericSensorEntity BuienradarSunchance3d => new(_haContext, "sensor.buienradar_sunchance_3d");
    ///<summary>Zonkans 4d</summary>
    public NumericSensorEntity BuienradarSunchance4d => new(_haContext, "sensor.buienradar_sunchance_4d");
    ///<summary>Zonkans 5d</summary>
    public NumericSensorEntity BuienradarSunchance5d => new(_haContext, "sensor.buienradar_sunchance_5d");
    ///<summary>Temperatuur</summary>
    public NumericSensorEntity BuienradarTemperature => new(_haContext, "sensor.buienradar_temperature");
    ///<summary>Temperatuur 1d</summary>
    public NumericSensorEntity BuienradarTemperature1d => new(_haContext, "sensor.buienradar_temperature_1d");
    ///<summary>Temperatuur 2d</summary>
    public NumericSensorEntity BuienradarTemperature2d => new(_haContext, "sensor.buienradar_temperature_2d");
    ///<summary>Temperatuur 3d</summary>
    public NumericSensorEntity BuienradarTemperature3d => new(_haContext, "sensor.buienradar_temperature_3d");
    ///<summary>Temperatuur 4d</summary>
    public NumericSensorEntity BuienradarTemperature4d => new(_haContext, "sensor.buienradar_temperature_4d");
    ///<summary>Temperatuur 5d</summary>
    public NumericSensorEntity BuienradarTemperature5d => new(_haContext, "sensor.buienradar_temperature_5d");
    ///<summary>Zichtbaarheid</summary>
    public NumericSensorEntity BuienradarVisibility => new(_haContext, "sensor.buienradar_visibility");
    ///<summary>Windrichting azimut</summary>
    public NumericSensorEntity BuienradarWindDirectionAzimuth => new(_haContext, "sensor.buienradar_wind_direction_azimuth");
    ///<summary>Windrichting azimut 1d</summary>
    public NumericSensorEntity BuienradarWindDirectionAzimuth1d => new(_haContext, "sensor.buienradar_wind_direction_azimuth_1d");
    ///<summary>Windrichting azimut 2d</summary>
    public NumericSensorEntity BuienradarWindDirectionAzimuth2d => new(_haContext, "sensor.buienradar_wind_direction_azimuth_2d");
    ///<summary>Windrichting azimut 3d</summary>
    public NumericSensorEntity BuienradarWindDirectionAzimuth3d => new(_haContext, "sensor.buienradar_wind_direction_azimuth_3d");
    ///<summary>Windrichting azimut 4d</summary>
    public NumericSensorEntity BuienradarWindDirectionAzimuth4d => new(_haContext, "sensor.buienradar_wind_direction_azimuth_4d");
    ///<summary>Windrichting azimut 5d</summary>
    public NumericSensorEntity BuienradarWindDirectionAzimuth5d => new(_haContext, "sensor.buienradar_wind_direction_azimuth_5d");
    ///<summary>Windkracht</summary>
    public NumericSensorEntity BuienradarWindForce => new(_haContext, "sensor.buienradar_wind_force");
    ///<summary>Windkracht 1d</summary>
    public NumericSensorEntity BuienradarWindForce1d => new(_haContext, "sensor.buienradar_wind_force_1d");
    ///<summary>Windkracht 2d</summary>
    public NumericSensorEntity BuienradarWindForce2d => new(_haContext, "sensor.buienradar_wind_force_2d");
    ///<summary>Windkracht 3d</summary>
    public NumericSensorEntity BuienradarWindForce3d => new(_haContext, "sensor.buienradar_wind_force_3d");
    ///<summary>Windkracht 4d</summary>
    public NumericSensorEntity BuienradarWindForce4d => new(_haContext, "sensor.buienradar_wind_force_4d");
    ///<summary>Windkracht 5d</summary>
    public NumericSensorEntity BuienradarWindForce5d => new(_haContext, "sensor.buienradar_wind_force_5d");
    ///<summary>Windvlaag</summary>
    public NumericSensorEntity BuienradarWindGust => new(_haContext, "sensor.buienradar_wind_gust");
    ///<summary>Windsnelheid</summary>
    public NumericSensorEntity BuienradarWindSpeed => new(_haContext, "sensor.buienradar_wind_speed");
    ///<summary>Windsnelheid 1d</summary>
    public NumericSensorEntity BuienradarWindSpeed1d => new(_haContext, "sensor.buienradar_wind_speed_1d");
    ///<summary>Windsnelheid 2d</summary>
    public NumericSensorEntity BuienradarWindSpeed2d => new(_haContext, "sensor.buienradar_wind_speed_2d");
    ///<summary>Windsnelheid 3d</summary>
    public NumericSensorEntity BuienradarWindSpeed3d => new(_haContext, "sensor.buienradar_wind_speed_3d");
    ///<summary>Windsnelheid 4d</summary>
    public NumericSensorEntity BuienradarWindSpeed4d => new(_haContext, "sensor.buienradar_wind_speed_4d");
    ///<summary>Windsnelheid 5d</summary>
    public NumericSensorEntity BuienradarWindSpeed5d => new(_haContext, "sensor.buienradar_wind_speed_5d");
    ///<summary>Electricity Maps CO2-intensiteit</summary>
    public NumericSensorEntity Co2SignalCo2Intensiteit => new(_haContext, "sensor.co2_signal_co2_intensiteit");
    ///<summary>Electricity Maps Elektriciteitsnet percentage fossiele brandstoffen</summary>
    public NumericSensorEntity Co2SignalElektriciteitsnetPercentageFossieleBrandstoffen => new(_haContext, "sensor.co2_signal_elektriciteitsnet_percentage_fossiele_brandstoffen");
    ///<summary>Huidig Ozonniveau</summary>
    public NumericSensorEntity CurrentOzoneLevel => new(_haContext, "sensor.current_ozone_level");
    ///<summary>Huidige UV-index</summary>
    public NumericSensorEntity CurrentUvIndex => new(_haContext, "sensor.current_uv_index");
    ///<summary>DHL Parcel NL Delivered</summary>
    public NumericSensorEntity DhlParcelNlDelivered => new(_haContext, "sensor.dhl_parcel_nl_delivered");
    ///<summary>DHL Parcel NL Delivering</summary>
    public NumericSensorEntity DhlParcelNlDelivering => new(_haContext, "sensor.dhl_parcel_nl_delivering");
    ///<summary>DHL Parcel NL Packages</summary>
    public NumericSensorEntity DhlParcelNlPackages => new(_haContext, "sensor.dhl_parcel_nl_packages");
    ///<summary>Disk use (percent) /</summary>
    public NumericSensorEntity DiskUsePercent => new(_haContext, "sensor.disk_use_percent");
    ///<summary>Dwains Dashboard Latest version</summary>
    public NumericSensorEntity DwainsDashboardLatestVersion => new(_haContext, "sensor.dwains_dashboard_latest_version");
    ///<summary>Solar production forecast Geschatte energieproductie - dit uur</summary>
    public NumericSensorEntity EnergyCurrentHour => new(_haContext, "sensor.energy_current_hour");
    ///<summary>Solar production forecast Geschatte energieproductie - volgend uur</summary>
    public NumericSensorEntity EnergyNextHour => new(_haContext, "sensor.energy_next_hour");
    ///<summary>Solar production forecast Geschatte energieproductie - vandaag</summary>
    public NumericSensorEntity EnergyProductionToday => new(_haContext, "sensor.energy_production_today");
    ///<summary>Solar production forecast Geschatte energieproductie - resterend vandaag</summary>
    public NumericSensorEntity EnergyProductionTodayRemaining => new(_haContext, "sensor.energy_production_today_remaining");
    ///<summary>Solar production forecast Geschatte energieproductie - morgen</summary>
    public NumericSensorEntity EnergyProductionTomorrow => new(_haContext, "sensor.energy_production_tomorrow");
    ///<summary>EnergyKwhNetPriceInCents</summary>
    public NumericSensorEntity Energykwhnetpriceincents => new(_haContext, "sensor.energykwhnetpriceincents");
    ///<summary>EnergyKwhPriceInCent</summary>
    public NumericSensorEntity Energykwhpriceincent => new(_haContext, "sensor.energykwhpriceincent");
    ///<summary>EnergySocket (5c2faf02a546) Actueel vermogen</summary>
    public NumericSensorEntity Energysocket5c2faf02a546ActivePower => new(_haContext, "sensor.energysocket_5c2faf02a546_active_power");
    ///<summary>EnergySocket (5c2faf02a546) Actueel vermogen fase 1</summary>
    public NumericSensorEntity Energysocket5c2faf02a546ActivePowerL1 => new(_haContext, "sensor.energysocket_5c2faf02a546_active_power_l1");
    ///<summary>Warmtepomp Energie</summary>
    public NumericSensorEntity Energysocket5c2faf02a546TotalPowerImportT1 => new(_haContext, "sensor.energysocket_5c2faf02a546_total_power_import_t1");
    ///<summary>EnergySocket (5c2faf0c7564) Actueel vermogen</summary>
    public NumericSensorEntity Energysocket5c2faf0c7564ActivePower => new(_haContext, "sensor.energysocket_5c2faf0c7564_active_power");
    ///<summary>EnergySocket (5c2faf0c7564) Actueel vermogen fase 1</summary>
    public NumericSensorEntity Energysocket5c2faf0c7564ActivePowerL1 => new(_haContext, "sensor.energysocket_5c2faf0c7564_active_power_l1");
    ///<summary>Ventilatie Energie</summary>
    public NumericSensorEntity Energysocket5c2faf0c7564TotalPowerImportT1 => new(_haContext, "sensor.energysocket_5c2faf0c7564_total_power_import_t1");
    ///<summary>EnergySocket (5c2faf0d8364) Actueel vermogen</summary>
    public NumericSensorEntity Energysocket5c2faf0d8364ActivePower => new(_haContext, "sensor.energysocket_5c2faf0d8364_active_power");
    ///<summary>EnergySocket (5c2faf0d8364) Actueel vermogen fase 1</summary>
    public NumericSensorEntity Energysocket5c2faf0d8364ActivePowerL1 => new(_haContext, "sensor.energysocket_5c2faf0d8364_active_power_l1");
    ///<summary>Game hoek Energie</summary>
    public NumericSensorEntity Energysocket5c2faf0d8364TotalPowerImportT1 => new(_haContext, "sensor.energysocket_5c2faf0d8364_total_power_import_t1");
    ///<summary>EPEX Spot NL Average Price</summary>
    public NumericSensorEntity EpexSpotNlAveragePrice => new(_haContext, "sensor.epex_spot_nl_average_price");
    ///<summary>EPEX Spot NL Buy Volume</summary>
    public NumericSensorEntity EpexSpotNlBuyVolume => new(_haContext, "sensor.epex_spot_nl_buy_volume");
    ///<summary>EPEX Spot NL Highest Price</summary>
    public NumericSensorEntity EpexSpotNlHighestPrice => new(_haContext, "sensor.epex_spot_nl_highest_price");
    ///<summary>EPEX Spot NL Lowest Price</summary>
    public NumericSensorEntity EpexSpotNlLowestPrice => new(_haContext, "sensor.epex_spot_nl_lowest_price");
    ///<summary>EPEX Spot NL Net Price</summary>
    public NumericSensorEntity EpexSpotNlNetPrice => new(_haContext, "sensor.epex_spot_nl_net_price");
    ///<summary>EPEX Spot NL Price</summary>
    public NumericSensorEntity EpexSpotNlPrice => new(_haContext, "sensor.epex_spot_nl_price");
    ///<summary>EPEX Spot NL Quantile</summary>
    public NumericSensorEntity EpexSpotNlQuantile => new(_haContext, "sensor.epex_spot_nl_quantile");
    ///<summary>EPEX Spot NL Rank</summary>
    public NumericSensorEntity EpexSpotNlRank => new(_haContext, "sensor.epex_spot_nl_rank");
    ///<summary>EPEX Spot NL Sell Volume</summary>
    public NumericSensorEntity EpexSpotNlSellVolume => new(_haContext, "sensor.epex_spot_nl_sell_volume");
    ///<summary>EPEX Spot NL Volume</summary>
    public NumericSensorEntity EpexSpotNlVolume => new(_haContext, "sensor.epex_spot_nl_volume");
    ///<summary>Gang Battery</summary>
    public NumericSensorEntity GangBattery => new(_haContext, "sensor.gang_battery");
    ///<summary>Gang Battery</summary>
    public NumericSensorEntity GangBattery2 => new(_haContext, "sensor.gang_battery_2");
    ///<summary>Gang Illuminance</summary>
    public NumericSensorEntity GangIlluminance => new(_haContext, "sensor.gang_illuminance");
    ///<summary>Gang Temperature</summary>
    public NumericSensorEntity GangTemperature => new(_haContext, "sensor.gang_temperature");
    ///<summary>hacs</summary>
    public NumericSensorEntity Hacs => new(_haContext, "sensor.hacs");
    ///<summary>Hal Battery</summary>
    public NumericSensorEntity HalBattery => new(_haContext, "sensor.hal_battery");
    ///<summary>Hal Device Energy</summary>
    public NumericSensorEntity HalDeviceEnergy => new(_haContext, "sensor.hal_device_energy");
    ///<summary>Hal Device Power</summary>
    public NumericSensorEntity HalDevicePower => new(_haContext, "sensor.hal_device_power");
    ///<summary>Hal energy</summary>
    public NumericSensorEntity HalEnergy => new(_haContext, "sensor.hal_energy");
    ///<summary>Hal power</summary>
    public NumericSensorEntity HalPower => new(_haContext, "sensor.hal_power");
    ///<summary>Hue Play Links energy</summary>
    public NumericSensorEntity HuePlayLinksEnergy => new(_haContext, "sensor.hue_play_links_energy");
    ///<summary>Hue Play Links power</summary>
    public NumericSensorEntity HuePlayLinksPower => new(_haContext, "sensor.hue_play_links_power");
    ///<summary>Hue Play Midden energy</summary>
    public NumericSensorEntity HuePlayMiddenEnergy => new(_haContext, "sensor.hue_play_midden_energy");
    ///<summary>Hue Play Midden power</summary>
    public NumericSensorEntity HuePlayMiddenPower => new(_haContext, "sensor.hue_play_midden_power");
    ///<summary>Hue Play Rechts energy</summary>
    public NumericSensorEntity HuePlayRechtsEnergy => new(_haContext, "sensor.hue_play_rechts_energy");
    ///<summary>Hue Play Rechts power</summary>
    public NumericSensorEntity HuePlayRechtsPower => new(_haContext, "sensor.hue_play_rechts_power");
    ///<summary>Repairs Genegeerd</summary>
    public NumericSensorEntity IgnoredIssues => new(_haContext, "sensor.ignored_issues");
    ///<summary>Repairs Totaal</summary>
    public NumericSensorEntity Issues => new(_haContext, "sensor.issues");
    ///<summary>Jaap Batterij</summary>
    public NumericSensorEntity JaapBatteryLevel => new(_haContext, "sensor.jaap_battery_level");
    ///<summary>Keuken afstandbediening Batterij</summary>
    public NumericSensorEntity KeukenAfstandbediening => new(_haContext, "sensor.keuken_afstandbediening");
    ///<summary>Max UV-index</summary>
    public NumericSensorEntity MaxUvIndex => new(_haContext, "sensor.max_uv_index");
    ///<summary>Memory use (percent)</summary>
    public NumericSensorEntity MemoryUsePercent => new(_haContext, "sensor.memory_use_percent");
    ///<summary>Network throughput in eth0</summary>
    public NumericSensorEntity NetworkThroughputInEth0 => new(_haContext, "sensor.network_throughput_in_eth0");
    ///<summary>Network throughput out eth0</summary>
    public NumericSensorEntity NetworkThroughputOutEth0 => new(_haContext, "sensor.network_throughput_out_eth0");
    public NumericSensorEntity Onedrivefreespace => new(_haContext, "sensor.onedrivefreespace");
    ///<summary>P1 meter (3c39e72a64e8) Actueel vermogen</summary>
    public NumericSensorEntity P1Meter3c39e72a64e8ActivePower => new(_haContext, "sensor.p1_meter_3c39e72a64e8_active_power");
    ///<summary>P1 meter (3c39e72a64e8) Actueel vermogen fase 1</summary>
    public NumericSensorEntity P1Meter3c39e72a64e8ActivePowerL1 => new(_haContext, "sensor.p1_meter_3c39e72a64e8_active_power_l1");
    ///<summary>P1 meter (3c39e72a64e8) Actueel vermogen fase 2</summary>
    public NumericSensorEntity P1Meter3c39e72a64e8ActivePowerL2 => new(_haContext, "sensor.p1_meter_3c39e72a64e8_active_power_l2");
    ///<summary>P1 meter (3c39e72a64e8) Actueel vermogen fase 3</summary>
    public NumericSensorEntity P1Meter3c39e72a64e8ActivePowerL3 => new(_haContext, "sensor.p1_meter_3c39e72a64e8_active_power_l3");
    ///<summary>P1 meter (3c39e72a64e8) Totaal teruglevering</summary>
    public NumericSensorEntity P1Meter3c39e72a64e8TotalPowerExport => new(_haContext, "sensor.p1_meter_3c39e72a64e8_total_power_export");
    ///<summary>P1 meter (3c39e72a64e8) Totaal teruglevering tarief 1</summary>
    public NumericSensorEntity P1Meter3c39e72a64e8TotalPowerExportT1 => new(_haContext, "sensor.p1_meter_3c39e72a64e8_total_power_export_t1");
    ///<summary>sensor Compensation</summary>
    public NumericSensorEntity P1Meter3c39e72a64e8TotalPowerExportT1Compensation => new(_haContext, "sensor.p1_meter_3c39e72a64e8_total_power_export_t1_compensation");
    ///<summary>P1 meter (3c39e72a64e8) Totaal teruglevering tarief 2</summary>
    public NumericSensorEntity P1Meter3c39e72a64e8TotalPowerExportT2 => new(_haContext, "sensor.p1_meter_3c39e72a64e8_total_power_export_t2");
    ///<summary>sensor Compensation</summary>
    public NumericSensorEntity P1Meter3c39e72a64e8TotalPowerExportT2Compensation => new(_haContext, "sensor.p1_meter_3c39e72a64e8_total_power_export_t2_compensation");
    ///<summary>P1 meter (3c39e72a64e8) Totaal verbruik</summary>
    public NumericSensorEntity P1Meter3c39e72a64e8TotalPowerImport => new(_haContext, "sensor.p1_meter_3c39e72a64e8_total_power_import");
    ///<summary>P1 meter (3c39e72a64e8) Totaal afname tarief 1</summary>
    public NumericSensorEntity P1Meter3c39e72a64e8TotalPowerImportT1 => new(_haContext, "sensor.p1_meter_3c39e72a64e8_total_power_import_t1");
    ///<summary>sensor Cost</summary>
    public NumericSensorEntity P1Meter3c39e72a64e8TotalPowerImportT1Cost => new(_haContext, "sensor.p1_meter_3c39e72a64e8_total_power_import_t1_cost");
    ///<summary>P1 meter (3c39e72a64e8) Totaal afname tarief 2</summary>
    public NumericSensorEntity P1Meter3c39e72a64e8TotalPowerImportT2 => new(_haContext, "sensor.p1_meter_3c39e72a64e8_total_power_import_t2");
    ///<summary>sensor Cost</summary>
    public NumericSensorEntity P1Meter3c39e72a64e8TotalPowerImportT2Cost => new(_haContext, "sensor.p1_meter_3c39e72a64e8_total_power_import_t2_cost");
    ///<summary>PetSnowy Toilet Time Per Day</summary>
    public NumericSensorEntity PetsnowyToiletTimePerDay => new(_haContext, "sensor.petsnowy_toilet_time_per_day");
    ///<summary>Picnic: Ida Gerhardtlaan 28 Totale waarde winkelwagen</summary>
    public NumericSensorEntity PicnicCartTotalPrice => new(_haContext, "sensor.picnic_cart_total_price");
    ///<summary>Picnic: Ida Gerhardtlaan 28 Totale waarde van de laatste bestelling</summary>
    public NumericSensorEntity PicnicLastOrderTotalPrice => new(_haContext, "sensor.picnic_last_order_total_price");
    ///<summary>Picnic: Ida Gerhardtlaan 28 Minimum bestelwaarde voor het geselecteerde tijdslot</summary>
    public NumericSensorEntity PicnicSelectedSlotMinOrderValue => new(_haContext, "sensor.picnic_selected_slot_min_order_value");
    ///<summary>Ping</summary>
    public NumericSensorEntity Ping => new(_haContext, "sensor.ping");
    ///<summary>Plafond Badkamer energy</summary>
    public NumericSensorEntity PlafondBadkamerEnergy => new(_haContext, "sensor.plafond_badkamer_energy");
    ///<summary>Plafond Badkamer power</summary>
    public NumericSensorEntity PlafondBadkamerPower => new(_haContext, "sensor.plafond_badkamer_power");
    ///<summary>Plafond Slaapkamer energy</summary>
    public NumericSensorEntity PlafondSlaapkamerEnergy => new(_haContext, "sensor.plafond_slaapkamer_energy");
    ///<summary>Plafond Slaapkamer power</summary>
    public NumericSensorEntity PlafondSlaapkamerPower => new(_haContext, "sensor.plafond_slaapkamer_power");
    ///<summary>Plafond Woonkamer energy</summary>
    public NumericSensorEntity PlafondWoonkamerEnergy => new(_haContext, "sensor.plafond_woonkamer_energy");
    ///<summary>Plafond Woonkamer energy</summary>
    public NumericSensorEntity PlafondWoonkamerEnergy2 => new(_haContext, "sensor.plafond_woonkamer_energy_2");
    ///<summary>Plafond Woonkamer energy</summary>
    public NumericSensorEntity PlafondWoonkamerEnergy3 => new(_haContext, "sensor.plafond_woonkamer_energy_3");
    ///<summary>Plafond Woonkamer power</summary>
    public NumericSensorEntity PlafondWoonkamerPower => new(_haContext, "sensor.plafond_woonkamer_power");
    ///<summary>Plafond Woonkamer power</summary>
    public NumericSensorEntity PlafondWoonkamerPower2 => new(_haContext, "sensor.plafond_woonkamer_power_2");
    ///<summary>Plafond Woonkamer power</summary>
    public NumericSensorEntity PlafondWoonkamerPower3 => new(_haContext, "sensor.plafond_woonkamer_power_3");
    ///<summary>Plug: Bureau Device Energy</summary>
    public NumericSensorEntity PlugBureauDeviceEnergy => new(_haContext, "sensor.plug_bureau_device_energy");
    ///<summary>Plug: Bureau Device Power</summary>
    public NumericSensorEntity PlugBureauDevicePower => new(_haContext, "sensor.plug_bureau_device_power");
    ///<summary>Post NL Delivered</summary>
    public NumericSensorEntity PostNlDelivered => new(_haContext, "sensor.post_nl_delivered");
    ///<summary>Post NL Delivering</summary>
    public NumericSensorEntity PostNlDelivering => new(_haContext, "sensor.post_nl_delivering");
    ///<summary>Post NL Missed Delivery</summary>
    public NumericSensorEntity PostNlMissedDelivery => new(_haContext, "sensor.post_nl_missed_delivery");
    ///<summary>Post NL Packages</summary>
    public NumericSensorEntity PostNlPackages => new(_haContext, "sensor.post_nl_packages");
    ///<summary>Solar production forecast Geschatte energieproductie - nu</summary>
    public NumericSensorEntity PowerProductionNow => new(_haContext, "sensor.power_production_now");
    ///<summary>Processor temperature</summary>
    public NumericSensorEntity ProcessorTemperature => new(_haContext, "sensor.processor_temperature");
    ///<summary>Processor use</summary>
    public NumericSensorEntity ProcessorUse => new(_haContext, "sensor.processor_use");
    ///<summary>RollerBlind 0001 battery</summary>
    public NumericSensorEntity Rollerblind0001Battery => new(_haContext, "sensor.rollerblind_0001_battery");
    ///<summary>RouterUptime</summary>
    public NumericSensorEntity Routeruptime => new(_haContext, "sensor.routeruptime");
    ///<summary>RT-AX88U CPU</summary>
    public NumericSensorEntity RtAx88uCpu => new(_haContext, "sensor.rt_ax88u_cpu");
    ///<summary>RT-AX88U RAM</summary>
    public NumericSensorEntity RtAx88uRam => new(_haContext, "sensor.rt_ax88u_ram");
    ///<summary>RT-AX88U Temperature 2.4 GHz</summary>
    public NumericSensorEntity RtAx88uTemperature24Ghz2 => new(_haContext, "sensor.rt_ax88u_temperature_2_4_ghz_2");
    ///<summary>RT-AX88U Temperature 5 GHz</summary>
    public NumericSensorEntity RtAx88uTemperature5Ghz2 => new(_haContext, "sensor.rt_ax88u_temperature_5_ghz_2");
    ///<summary>RT-AX88U Temperature CPU</summary>
    public NumericSensorEntity RtAx88uTemperatureCpu2 => new(_haContext, "sensor.rt_ax88u_temperature_cpu_2");
    ///<summary>Huidtype 1 veilige blootstellingstijd</summary>
    public NumericSensorEntity SkinType1SafeExposureTime => new(_haContext, "sensor.skin_type_1_safe_exposure_time");
    ///<summary>Huidtype 2 veilige blootstellingstijd</summary>
    public NumericSensorEntity SkinType2SafeExposureTime => new(_haContext, "sensor.skin_type_2_safe_exposure_time");
    ///<summary>Huidtype 3 veilige blootstellingstijd</summary>
    public NumericSensorEntity SkinType3SafeExposureTime => new(_haContext, "sensor.skin_type_3_safe_exposure_time");
    ///<summary>Huidtype 4 veilige blootstellingstijd</summary>
    public NumericSensorEntity SkinType4SafeExposureTime => new(_haContext, "sensor.skin_type_4_safe_exposure_time");
    ///<summary>Huidtype 5 veilige blootstellingstijd</summary>
    public NumericSensorEntity SkinType5SafeExposureTime => new(_haContext, "sensor.skin_type_5_safe_exposure_time");
    ///<summary>Huidtype 6 veilige blootstellingstijd</summary>
    public NumericSensorEntity SkinType6SafeExposureTime => new(_haContext, "sensor.skin_type_6_safe_exposure_time");
    ///<summary>Slaapkamer Battery</summary>
    public NumericSensorEntity SlaapkamerBattery => new(_haContext, "sensor.slaapkamer_battery");
    ///<summary>SM-G780G Battery level</summary>
    public NumericSensorEntity SmG780gBatteryLevel => new(_haContext, "sensor.sm_g780g_battery_level");
    ///<summary>SM-S908B Battery level</summary>
    public NumericSensorEntity SmS908bBatteryLevel => new(_haContext, "sensor.sm_s908b_battery_level");
    ///<summary>SM-S908B Battery power</summary>
    public NumericSensorEntity SmS908bBatteryPower => new(_haContext, "sensor.sm_s908b_battery_power");
    ///<summary>SM-S908B Battery temperature</summary>
    public NumericSensorEntity SmS908bBatteryTemperature => new(_haContext, "sensor.sm_s908b_battery_temperature");
    ///<summary>SM-T860 Battery level</summary>
    public NumericSensorEntity SmT860BatteryLevel => new(_haContext, "sensor.sm_t860_battery_level");
    ///<summary>SM-T860 Battery power</summary>
    public NumericSensorEntity SmT860BatteryPower => new(_haContext, "sensor.sm_t860_battery_power");
    ///<summary>SM-T860 Battery temperature</summary>
    public NumericSensorEntity SmT860BatteryTemperature => new(_haContext, "sensor.sm_t860_battery_temperature");
    ///<summary>Battery</summary>
    public NumericSensorEntity SmartSeries400097aeBattery => new(_haContext, "sensor.smart_series_4000_97ae_battery");
    ///<summary>Smart Series 4000 97AE Time</summary>
    public NumericSensorEntity SmartSeries400097aeTime => new(_haContext, "sensor.smart_series_4000_97ae_time");
    ///<summary>Soundbar Energy Meter</summary>
    public NumericSensorEntity SoundbarEnergyMeter => new(_haContext, "sensor.soundbar_energy_meter");
    ///<summary>Soundbar Power Meter</summary>
    public NumericSensorEntity SoundbarPowerMeter => new(_haContext, "sensor.soundbar_power_meter");
    ///<summary>Soundbar Volume</summary>
    public NumericSensorEntity SoundbarVolume => new(_haContext, "sensor.soundbar_volume");
    ///<summary>SpeedTest Download</summary>
    public NumericSensorEntity SpeedtestDownload => new(_haContext, "sensor.speedtest_download");
    ///<summary>SpeedTest Ping</summary>
    public NumericSensorEntity SpeedtestPing => new(_haContext, "sensor.speedtest_ping");
    ///<summary>SpeedTest Upload</summary>
    public NumericSensorEntity SpeedtestUpload => new(_haContext, "sensor.speedtest_upload");
    ///<summary>Switch badkamer spiegel Battery</summary>
    public NumericSensorEntity SwitchBadkamerSpiegelBattery => new(_haContext, "sensor.switch_badkamer_spiegel_battery");
    ///<summary>Switch Slaapkamer Battery</summary>
    public NumericSensorEntity SwitchSlaapkamerBattery => new(_haContext, "sensor.switch_slaapkamer_battery");
    ///<summary>TimeHomeToWork</summary>
    public NumericSensorEntity Timehometowork => new(_haContext, "sensor.timehometowork");
    ///<summary>TimeWorkToHome</summary>
    public NumericSensorEntity Timeworktohome => new(_haContext, "sensor.timeworktohome");
    ///<summary>TV Energy Meter</summary>
    public NumericSensorEntity TvEnergyMeter => new(_haContext, "sensor.tv_energy_meter");
    ///<summary>TV Kast energy</summary>
    public NumericSensorEntity TvKastEnergy => new(_haContext, "sensor.tv_kast_energy");
    ///<summary>TV Kast power</summary>
    public NumericSensorEntity TvKastPower => new(_haContext, "sensor.tv_kast_power");
    ///<summary>TV Power Meter</summary>
    public NumericSensorEntity TvPowerMeter => new(_haContext, "sensor.tv_power_meter");
    ///<summary>TV Volume</summary>
    public NumericSensorEntity TvVolume => new(_haContext, "sensor.tv_volume");
    ///<summary>VINCENT-NAS CPU-gebruik (gebruiker)</summary>
    public NumericSensorEntity VincentNasCpuGebruikGebruiker => new(_haContext, "sensor.vincent_nas_cpu_gebruik_gebruiker");
    ///<summary>VINCENT-NAS CPU-gebruik (totaal)</summary>
    public NumericSensorEntity VincentNasCpuGebruikTotaal => new(_haContext, "sensor.vincent_nas_cpu_gebruik_totaal");
    ///<summary>VINCENT-NAS Gemiddelde CPU-belasting (15 min)</summary>
    public NumericSensorEntity VincentNasCpuLoadAverage15Min => new(_haContext, "sensor.vincent_nas_cpu_load_average_15_min");
    ///<summary>VINCENT-NAS Gemiddelde CPU-belasting (5 min)</summary>
    public NumericSensorEntity VincentNasCpuLoadAverage5Min => new(_haContext, "sensor.vincent_nas_cpu_load_average_5_min");
    ///<summary>VINCENT-NAS Download doorvoer</summary>
    public NumericSensorEntity VincentNasDownloadThroughput => new(_haContext, "sensor.vincent_nas_download_throughput");
    ///<summary>VINCENT-NAS Geheugen beschikbaar (fysiek)</summary>
    public NumericSensorEntity VincentNasGeheugenBeschikbaarFysiek => new(_haContext, "sensor.vincent_nas_geheugen_beschikbaar_fysiek");
    ///<summary>VINCENT-NAS Geheugen beschikbaar (swap)</summary>
    public NumericSensorEntity VincentNasGeheugenBeschikbaarSwap => new(_haContext, "sensor.vincent_nas_geheugen_beschikbaar_swap");
    ///<summary>VINCENT-NAS Geheugengebruik (fysiek)</summary>
    public NumericSensorEntity VincentNasGeheugengebruikFysiek => new(_haContext, "sensor.vincent_nas_geheugengebruik_fysiek");
    ///<summary>VINCENT-NAS Geheugen totaal (real)</summary>
    public NumericSensorEntity VincentNasMemoryTotalReal => new(_haContext, "sensor.vincent_nas_memory_total_real");
    ///<summary>VINCENT-NAS Geheugen totaal (swap)</summary>
    public NumericSensorEntity VincentNasMemoryTotalSwap => new(_haContext, "sensor.vincent_nas_memory_total_swap");
    ///<summary>VINCENT-NAS (Schijf 1) Temperatuur</summary>
    public NumericSensorEntity VincentNasSchijf1Temperatuur => new(_haContext, "sensor.vincent_nas_schijf_1_temperatuur");
    ///<summary>VINCENT-NAS Temperatuur</summary>
    public NumericSensorEntity VincentNasTemperatuur => new(_haContext, "sensor.vincent_nas_temperatuur");
    ///<summary>VINCENT-NAS Upload doorvoer</summary>
    public NumericSensorEntity VincentNasUploadThroughput => new(_haContext, "sensor.vincent_nas_upload_throughput");
    ///<summary>VINCENT-NAS (Volume 1) Gemiddelde schijftemperatuur</summary>
    public NumericSensorEntity VincentNasVolume1AverageDiskTemp => new(_haContext, "sensor.vincent_nas_volume_1_average_disk_temp");
    ///<summary>VINCENT-NAS (Volume 1) Gebruikte ruimte</summary>
    public NumericSensorEntity VincentNasVolume1GebruikteRuimte => new(_haContext, "sensor.vincent_nas_volume_1_gebruikte_ruimte");
    ///<summary>VINCENT-NAS (Volume 1) Volume gebruikt</summary>
    public NumericSensorEntity VincentNasVolume1VolumeGebruikt => new(_haContext, "sensor.vincent_nas_volume_1_volume_gebruikt");
    ///<summary>Voordeur Batterij</summary>
    public NumericSensorEntity VoordeurBattery => new(_haContext, "sensor.voordeur_battery");
    ///<summary>Wasmachine deltaEnergy</summary>
    public NumericSensorEntity WasmachineDeltaenergy => new(_haContext, "sensor.wasmachine_deltaenergy");
    ///<summary>Wasmachine energy</summary>
    public NumericSensorEntity WasmachineEnergy => new(_haContext, "sensor.wasmachine_energy");
    ///<summary>Wasmachine Energy Meter</summary>
    public NumericSensorEntity WasmachineEnergyMeter => new(_haContext, "sensor.wasmachine_energy_meter");
    ///<summary>Wasmachine energySaved</summary>
    public NumericSensorEntity WasmachineEnergysaved => new(_haContext, "sensor.wasmachine_energysaved");
    ///<summary>Wasmachine power</summary>
    public NumericSensorEntity WasmachinePower => new(_haContext, "sensor.wasmachine_power");
    ///<summary>Wasmachine Power Meter</summary>
    public NumericSensorEntity WasmachinePowerMeter => new(_haContext, "sensor.wasmachine_power_meter");
    ///<summary>Wasmachine powerEnergy</summary>
    public NumericSensorEntity WasmachinePowerenergy => new(_haContext, "sensor.wasmachine_powerenergy");
    ///<summary>watchman_missing_entities</summary>
    public NumericSensorEntity WatchmanMissingEntities => new(_haContext, "sensor.watchman_missing_entities");
    ///<summary>watchman_missing_services</summary>
    public NumericSensorEntity WatchmanMissingServices => new(_haContext, "sensor.watchman_missing_services");
    ///<summary>Watermeter (5c2faf0e9b0a) Actueel water gebruik</summary>
    public NumericSensorEntity Watermeter5c2faf0e9b0aActiveWaterUsage => new(_haContext, "sensor.watermeter_5c2faf0e9b0a_active_water_usage");
    ///<summary>Watermeter (5c2faf0e9b0a) Totaal water verbruik</summary>
    public NumericSensorEntity Watermeter5c2faf0e9b0aTotalWaterUsage => new(_haContext, "sensor.watermeter_5c2faf0e9b0a_total_water_usage");
    ///<summary>sensor Cost</summary>
    public NumericSensorEntity Watermeter5c2faf0e9b0aTotalWaterUsageCost => new(_haContext, "sensor.watermeter_5c2faf0e9b0a_total_water_usage_cost");
    ///<summary>Woonkamer Battery</summary>
    public NumericSensorEntity WoonkamerBattery => new(_haContext, "sensor.woonkamer_battery");
    ///<summary>Woonkamer Battery</summary>
    public NumericSensorEntity WoonkamerBattery2 => new(_haContext, "sensor.woonkamer_battery_2");
    ///<summary>woonkamer energy</summary>
    public NumericSensorEntity WoonkamerEnergy => new(_haContext, "sensor.woonkamer_energy");
    ///<summary>woonkamer power</summary>
    public NumericSensorEntity WoonkamerPower => new(_haContext, "sensor.woonkamer_power");
}

public partial class SunEntities
{
    private readonly IHaContext _haContext;
    public SunEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sun</summary>
    public SunEntity Sun => new(_haContext, "sun.sun");
}

public partial class SwitchEntities
{
    private readonly IHaContext _haContext;
    public SwitchEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Badkamer Illuminance</summary>
    public SwitchEntity BadkamerIlluminance => new(_haContext, "switch.badkamer_illuminance");
    ///<summary>Badkamer Motion</summary>
    public SwitchEntity BadkamerMotion => new(_haContext, "switch.badkamer_motion");
    ///<summary>Berging Illuminance</summary>
    public SwitchEntity BergingIlluminance => new(_haContext, "switch.berging_illuminance");
    ///<summary>Berging Motion</summary>
    public SwitchEntity BergingMotion => new(_haContext, "switch.berging_motion");
    ///<summary>Galarij deur</summary>
    public SwitchEntity BotA801 => new(_haContext, "switch.bot_a801");
    ///<summary>EnergySocket (5c2faf02a546) Cloud verbinding</summary>
    public SwitchEntity Energysocket5c2faf02a546CloudConnection => new(_haContext, "switch.energysocket_5c2faf02a546_cloud_connection");
    ///<summary>EnergySocket (5c2faf02a546) Schakelslot</summary>
    public SwitchEntity Energysocket5c2faf02a546SwitchLock => new(_haContext, "switch.energysocket_5c2faf02a546_switch_lock");
    ///<summary>EnergySocket (5c2faf0c7564) Cloud verbinding</summary>
    public SwitchEntity Energysocket5c2faf0c7564CloudConnection => new(_haContext, "switch.energysocket_5c2faf0c7564_cloud_connection");
    ///<summary>EnergySocket (5c2faf0c7564) Schakelslot</summary>
    public SwitchEntity Energysocket5c2faf0c7564SwitchLock => new(_haContext, "switch.energysocket_5c2faf0c7564_switch_lock");
    ///<summary>EnergySocket (5c2faf0d8364) Cloud verbinding</summary>
    public SwitchEntity Energysocket5c2faf0d8364CloudConnection => new(_haContext, "switch.energysocket_5c2faf0d8364_cloud_connection");
    ///<summary>EnergySocket (5c2faf0d8364) Schakelslot</summary>
    public SwitchEntity Energysocket5c2faf0d8364SwitchLock => new(_haContext, "switch.energysocket_5c2faf0d8364_switch_lock");
    ///<summary>Gang Illuminance</summary>
    public SwitchEntity GangIlluminance => new(_haContext, "switch.gang_illuminance");
    ///<summary>Gang Motion</summary>
    public SwitchEntity GangMotion => new(_haContext, "switch.gang_motion");
    ///<summary>Hub Vincent Do Not Disturb</summary>
    public SwitchEntity HubVincentDoNotDisturb => new(_haContext, "switch.hub_vincent_do_not_disturb");
    ///<summary>P1 meter (3c39e72a64e8) Cloud verbinding</summary>
    public SwitchEntity P1Meter3c39e72a64e8CloudConnection => new(_haContext, "switch.p1_meter_3c39e72a64e8_cloud_connection");
    ///<summary>PetSnowy Auto Clean</summary>
    public SwitchEntity PetsnowyAutoClean => new(_haContext, "switch.petsnowy_auto_clean");
    ///<summary>PetSnowy Auto Deodorization</summary>
    public SwitchEntity PetsnowyAutoDeodorization => new(_haContext, "switch.petsnowy_auto_deodorization");
    ///<summary>PetSnowy Child Safety Lock</summary>
    public SwitchEntity PetsnowyChildSafetyLock => new(_haContext, "switch.petsnowy_child_safety_lock");
    ///<summary>PetSnowy Empty</summary>
    public SwitchEntity PetsnowyEmpty => new(_haContext, "switch.petsnowy_empty");
    ///<summary>PetSnowy Globe Reset</summary>
    public SwitchEntity PetsnowyGlobeReset => new(_haContext, "switch.petsnowy_globe_reset");
    ///<summary>PetSnowy Light</summary>
    public SwitchEntity PetsnowyLight => new(_haContext, "switch.petsnowy_light");
    ///<summary>PetSnowy Manual Clean</summary>
    public SwitchEntity PetsnowyManualClean => new(_haContext, "switch.petsnowy_manual_clean");
    ///<summary>PetSnowy Mode</summary>
    public SwitchEntity PetsnowyMode => new(_haContext, "switch.petsnowy_mode");
    ///<summary>PetSnowy NoInfo</summary>
    public SwitchEntity PetsnowyNoinfo => new(_haContext, "switch.petsnowy_noinfo");
    ///<summary>PetSnowy Scheduled Clean Cycle</summary>
    public SwitchEntity PetsnowyScheduledCleanCycle => new(_haContext, "switch.petsnowy_scheduled_clean_cycle");
    ///<summary>PetSnowy Scheduled Deodorization</summary>
    public SwitchEntity PetsnowyScheduledDeodorization => new(_haContext, "switch.petsnowy_scheduled_deodorization");
    ///<summary>PS5</summary>
    public SwitchEntity Ps5VincentPower => new(_haContext, "switch.ps5_vincent_power");
    ///<summary>RT-AX88U Guest 2.4 GHz 1</summary>
    public SwitchEntity RtAx88uGuest24Ghz1 => new(_haContext, "switch.rt_ax88u_guest_2_4_ghz_1");
    ///<summary>IOT Network</summary>
    public SwitchEntity RtAx88uGuest24Ghz2 => new(_haContext, "switch.rt_ax88u_guest_2_4_ghz_2");
    ///<summary>RT-AX88U Guest 2.4 GHz 3</summary>
    public SwitchEntity RtAx88uGuest24Ghz3 => new(_haContext, "switch.rt_ax88u_guest_2_4_ghz_3");
    ///<summary>RT-AX88U Guest 5 GHz 1</summary>
    public SwitchEntity RtAx88uGuest5Ghz1 => new(_haContext, "switch.rt_ax88u_guest_5_ghz_1");
    ///<summary>RT-AX88U Guest 5 GHz 2</summary>
    public SwitchEntity RtAx88uGuest5Ghz2 => new(_haContext, "switch.rt_ax88u_guest_5_ghz_2");
    ///<summary>RT-AX88U Guest 5 GHz 3</summary>
    public SwitchEntity RtAx88uGuest5Ghz3 => new(_haContext, "switch.rt_ax88u_guest_5_ghz_3");
    ///<summary>RT-AX88U OpenVPN Client 1</summary>
    public SwitchEntity RtAx88uOpenvpnClient1 => new(_haContext, "switch.rt_ax88u_openvpn_client_1");
    ///<summary>RT-AX88U OpenVPN Client 2</summary>
    public SwitchEntity RtAx88uOpenvpnClient2 => new(_haContext, "switch.rt_ax88u_openvpn_client_2");
    ///<summary>RT-AX88U OpenVPN Client 3</summary>
    public SwitchEntity RtAx88uOpenvpnClient3 => new(_haContext, "switch.rt_ax88u_openvpn_client_3");
    ///<summary>RT-AX88U OpenVPN Client 4</summary>
    public SwitchEntity RtAx88uOpenvpnClient4 => new(_haContext, "switch.rt_ax88u_openvpn_client_4");
    ///<summary>RT-AX88U OpenVPN Client 5</summary>
    public SwitchEntity RtAx88uOpenvpnClient5 => new(_haContext, "switch.rt_ax88u_openvpn_client_5");
    ///<summary>RT-AX88U OpenVPN Server 1</summary>
    public SwitchEntity RtAx88uOpenvpnServer1 => new(_haContext, "switch.rt_ax88u_openvpn_server_1");
    ///<summary>RT-AX88U OpenVPN Server 2</summary>
    public SwitchEntity RtAx88uOpenvpnServer2 => new(_haContext, "switch.rt_ax88u_openvpn_server_2");
    ///<summary>RT-AX88U Parental control</summary>
    public SwitchEntity RtAx88uParentalControl => new(_haContext, "switch.rt_ax88u_parental_control");
    ///<summary>RT-AX88U Port forwarding</summary>
    public SwitchEntity RtAx88uPortForwarding => new(_haContext, "switch.rt_ax88u_port_forwarding");
    ///<summary>RT-AX88U Wireless 2.4 GHz</summary>
    public SwitchEntity RtAx88uWireless24Ghz => new(_haContext, "switch.rt_ax88u_wireless_2_4_ghz");
    ///<summary>RT-AX88U Wireless 5 GHz</summary>
    public SwitchEntity RtAx88uWireless5Ghz => new(_haContext, "switch.rt_ax88u_wireless_5_ghz");
    ///<summary>Snowy Pet Water Fountain Light</summary>
    public SwitchEntity SnowyPetWaterFountainLight => new(_haContext, "switch.snowy_pet_water_fountain_light");
    ///<summary>Snowy Pet Water Fountain On/Off</summary>
    public SwitchEntity SnowyPetWaterFountainOnOff => new(_haContext, "switch.snowy_pet_water_fountain_on_off");
    ///<summary>Soundbar</summary>
    public SwitchEntity Soundbar => new(_haContext, "switch.soundbar");
    ///<summary>Sync Box Dolby Vision compatibility</summary>
    public SwitchEntity SyncBoxDolbyVisionCompatibility => new(_haContext, "switch.sync_box_dolby_vision_compatibility");
    ///<summary>Sync Box Light Sync</summary>
    public SwitchEntity SyncBoxLightSync => new(_haContext, "switch.sync_box_light_sync");
    ///<summary>Sync Box Power</summary>
    public SwitchEntity SyncBoxPower => new(_haContext, "switch.sync_box_power");
    ///<summary>TV</summary>
    public SwitchEntity Tv => new(_haContext, "switch.tv");
    ///<summary>Wasmachine</summary>
    public SwitchEntity Wasmachine => new(_haContext, "switch.wasmachine");
    ///<summary>Woonkamer Do Not Disturb</summary>
    public SwitchEntity WoonkamerDoNotDisturb => new(_haContext, "switch.woonkamer_do_not_disturb");
}

public partial class UpdateEntities
{
    private readonly IHaContext _haContext;
    public UpdateEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Elasticsearch server Update</summary>
    public UpdateEntity ElasticsearchServerUpdate => new(_haContext, "update.elasticsearch_server_update");
    ///<summary>Filebrowser Update</summary>
    public UpdateEntity FilebrowserUpdate => new(_haContext, "update.filebrowser_update");
    ///<summary>FTP Update</summary>
    public UpdateEntity FtpUpdate => new(_haContext, "update.ftp_update");
    ///<summary>Grafana Update</summary>
    public UpdateEntity GrafanaUpdate => new(_haContext, "update.grafana_update");
    ///<summary>Home Assistant Core Update</summary>
    public UpdateEntity HomeAssistantCoreUpdate => new(_haContext, "update.home_assistant_core_update");
    ///<summary>Home Assistant Operating System Update</summary>
    public UpdateEntity HomeAssistantOperatingSystemUpdate => new(_haContext, "update.home_assistant_operating_system_update");
    ///<summary>Home Assistant Supervisor Update</summary>
    public UpdateEntity HomeAssistantSupervisorUpdate => new(_haContext, "update.home_assistant_supervisor_update");
    ///<summary>Jackett NAS Update</summary>
    public UpdateEntity JackettNasUpdate => new(_haContext, "update.jackett_nas_update");
    ///<summary>Log Viewer Update</summary>
    public UpdateEntity LogViewerUpdate => new(_haContext, "update.log_viewer_update");
    ///<summary>Mosquitto broker Update</summary>
    public UpdateEntity MosquittoBrokerUpdate => new(_haContext, "update.mosquitto_broker_update");
    ///<summary>NetDaemon V3.1 (.NET 7) Update</summary>
    public UpdateEntity NetdaemonV31Net7Update => new(_haContext, "update.netdaemon_v3_1_net_7_update");
    ///<summary>NGINX Home Assistant SSL proxy Update</summary>
    public UpdateEntity NginxHomeAssistantSslProxyUpdate => new(_haContext, "update.nginx_home_assistant_ssl_proxy_update");
    ///<summary>OneDrive Backup Update</summary>
    public UpdateEntity OnedriveBackupUpdate => new(_haContext, "update.onedrive_backup_update");
    ///<summary>PS5 MQTT Update</summary>
    public UpdateEntity Ps5MqttUpdate => new(_haContext, "update.ps5_mqtt_update");
    ///<summary>PSA Car Controller Update</summary>
    public UpdateEntity PsaCarControllerUpdate => new(_haContext, "update.psa_car_controller_update");
    ///<summary>Radarr Update</summary>
    public UpdateEntity RadarrUpdate => new(_haContext, "update.radarr_update");
    ///<summary>rest980_2 Docker Image Update</summary>
    public UpdateEntity Rest9802DockerImageUpdate => new(_haContext, "update.rest980_2_docker_image_update");
    ///<summary>RT-AX88U Firmware update</summary>
    public UpdateEntity RtAx88uFirmwareUpdate => new(_haContext, "update.rt_ax88u_firmware_update");
    ///<summary>Samba share Update</summary>
    public UpdateEntity SambaShareUpdate => new(_haContext, "update.samba_share_update");
    ///<summary>Sonarr Update</summary>
    public UpdateEntity SonarrUpdate => new(_haContext, "update.sonarr_update");
    ///<summary>Studio Code Server Update</summary>
    public UpdateEntity StudioCodeServerUpdate => new(_haContext, "update.studio_code_server_update");
    ///<summary>Syncthing Update</summary>
    public UpdateEntity SyncthingUpdate => new(_haContext, "update.syncthing_update");
    ///<summary>Terminal &amp; SSH Update</summary>
    public UpdateEntity TerminalSshUpdate => new(_haContext, "update.terminal_ssh_update");
    ///<summary>VINCENT-NAS DSM update</summary>
    public UpdateEntity VincentNasDsmUpdate => new(_haContext, "update.vincent_nas_dsm_update");
    ///<summary>Whoogle Search Update</summary>
    public UpdateEntity WhoogleSearchUpdate => new(_haContext, "update.whoogle_search_update");
}

public partial class WeatherEntities
{
    private readonly IHaContext _haContext;
    public WeatherEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Buienradar</summary>
    public WeatherEntity Buienradar => new(_haContext, "weather.buienradar");
    ///<summary>Forecast Thuis</summary>
    public WeatherEntity ForecastThuis => new(_haContext, "weather.forecast_thuis");
}

public partial class ZoneEntities
{
    private readonly IHaContext _haContext;
    public ZoneEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Boodschappen AH</summary>
    public ZoneEntity Boodschappen => new(_haContext, "zone.boodschappen");
    ///<summary>Boodschappen COOP </summary>
    public ZoneEntity BoodschappenCoop => new(_haContext, "zone.boodschappen_coop");
    ///<summary>Dewin</summary>
    public ZoneEntity Dewin => new(_haContext, "zone.dewin");
    ///<summary>Thuis</summary>
    public ZoneEntity Home => new(_haContext, "zone.home");
    ///<summary>Ken</summary>
    public ZoneEntity Ken => new(_haContext, "zone.ken");
    ///<summary>Marloes</summary>
    public ZoneEntity Marloes => new(_haContext, "zone.marloes");
    ///<summary>Ouders</summary>
    public ZoneEntity Ouders => new(_haContext, "zone.ouders");
    ///<summary>Pokemon Raid Hour</summary>
    public ZoneEntity PokemonRaidHour => new(_haContext, "zone.pokemon_raid_hour");
    ///<summary>Timo</summary>
    public ZoneEntity Timo => new(_haContext, "zone.timo");
    ///<summary>Werk</summary>
    public ZoneEntity Werk => new(_haContext, "zone.werk");
}

public partial class SceneEntities
{
    private readonly IHaContext _haContext;
    public SceneEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Badkamer Concentreren</summary>
    public SceneEntity BadkamerConcentreren => new(_haContext, "scene.badkamer_concentreren");
    ///<summary>Badkamer Energie</summary>
    public SceneEntity BadkamerEnergie => new(_haContext, "scene.badkamer_energie");
    ///<summary>Badkamer Gedimd</summary>
    public SceneEntity BadkamerGedimd => new(_haContext, "scene.badkamer_gedimd");
    ///<summary>Badkamer Helder</summary>
    public SceneEntity BadkamerHelder => new(_haContext, "scene.badkamer_helder");
    ///<summary>Badkamer Lezen</summary>
    public SceneEntity BadkamerLezen => new(_haContext, "scene.badkamer_lezen");
    ///<summary>Badkamer Nachtlampje</summary>
    public SceneEntity BadkamerNachtlampje => new(_haContext, "scene.badkamer_nachtlampje");
    ///<summary>Badkamer Ontspannen</summary>
    public SceneEntity BadkamerOntspannen => new(_haContext, "scene.badkamer_ontspannen");
    ///<summary>Gang Concentreren</summary>
    public SceneEntity GangConcentreren => new(_haContext, "scene.gang_concentreren");
    ///<summary>Gang Energie</summary>
    public SceneEntity GangEnergie => new(_haContext, "scene.gang_energie");
    ///<summary>Gang Gedimd</summary>
    public SceneEntity GangGedimd => new(_haContext, "scene.gang_gedimd");
    ///<summary>Gang Helder</summary>
    public SceneEntity GangHelder => new(_haContext, "scene.gang_helder");
    ///<summary>Gang Lezen</summary>
    public SceneEntity GangLezen => new(_haContext, "scene.gang_lezen");
    ///<summary>Gang Nachtlampje</summary>
    public SceneEntity GangNachtlampje => new(_haContext, "scene.gang_nachtlampje");
    ///<summary>Gang Ontspannen</summary>
    public SceneEntity GangOntspannen => new(_haContext, "scene.gang_ontspannen");
    ///<summary>Slaapkamer Concentreren</summary>
    public SceneEntity SlaapkamerConcentreren => new(_haContext, "scene.slaapkamer_concentreren");
    ///<summary>Slaapkamer Energie</summary>
    public SceneEntity SlaapkamerEnergie => new(_haContext, "scene.slaapkamer_energie");
    ///<summary>Slaapkamer Helder</summary>
    public SceneEntity SlaapkamerHelder => new(_haContext, "scene.slaapkamer_helder");
    ///<summary>Slaapkamer Lezen</summary>
    public SceneEntity SlaapkamerLezen => new(_haContext, "scene.slaapkamer_lezen");
    ///<summary>Slaapkamer Nachtlampje</summary>
    public SceneEntity SlaapkamerNachtlampje => new(_haContext, "scene.slaapkamer_nachtlampje");
    ///<summary>Slaapkamer Ontspannen</summary>
    public SceneEntity SlaapkamerOntspannen => new(_haContext, "scene.slaapkamer_ontspannen");
    ///<summary>Movie</summary>
    public SceneEntity TvKijken => new(_haContext, "scene.tv_kijken");
    ///<summary>Woonkamer Concentreren</summary>
    public SceneEntity WoonkamerConcentreren => new(_haContext, "scene.woonkamer_concentreren");
    ///<summary>Woonkamer Day</summary>
    public SceneEntity WoonkamerDay => new(_haContext, "scene.woonkamer_day");
    ///<summary>Woonkamer Energie</summary>
    public SceneEntity WoonkamerEnergie => new(_haContext, "scene.woonkamer_energie");
    ///<summary>Woonkamer Evening</summary>
    public SceneEntity WoonkamerEvening => new(_haContext, "scene.woonkamer_evening");
    ///<summary>Woonkamer Helder</summary>
    public SceneEntity WoonkamerHelder => new(_haContext, "scene.woonkamer_helder");
    ///<summary>Woonkamer Lezen</summary>
    public SceneEntity WoonkamerLezen => new(_haContext, "scene.woonkamer_lezen");
    ///<summary>Woonkamer Morning</summary>
    public SceneEntity WoonkamerMorning => new(_haContext, "scene.woonkamer_morning");
    ///<summary>Woonkamer Movie</summary>
    public SceneEntity WoonkamerMovie => new(_haContext, "scene.woonkamer_movie");
    ///<summary>Woonkamer Night</summary>
    public SceneEntity WoonkamerNight => new(_haContext, "scene.woonkamer_night");
    ///<summary>Woonkamer Ontspannen</summary>
    public SceneEntity WoonkamerOntspannen => new(_haContext, "scene.woonkamer_ontspannen");
    ///<summary>WoonkamerDay</summary>
    public SceneEntity Woonkamerday => new(_haContext, "scene.woonkamerday");
    ///<summary>WoonkamerEvening</summary>
    public SceneEntity Woonkamerevening => new(_haContext, "scene.woonkamerevening");
    ///<summary>WoonkamerMorning</summary>
    public SceneEntity Woonkamermorning => new(_haContext, "scene.woonkamermorning");
    ///<summary>WoonkamerNight</summary>
    public SceneEntity Woonkamernight => new(_haContext, "scene.woonkamernight");
}

public partial class CoverEntities
{
    private readonly IHaContext _haContext;
    public CoverEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>RollerBlind 0001</summary>
    public CoverEntity Rollerblind0001 => new(_haContext, "cover.rollerblind_0001");
}

public partial class SelectEntities
{
    private readonly IHaContext _haContext;
    public SelectEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>PetSnowy Delay Clean Cycle</summary>
    public SelectEntity PetsnowyDelayCleanCycle => new(_haContext, "select.petsnowy_delay_clean_cycle");
    ///<summary>Sync Box Entertainment area</summary>
    public SelectEntity SyncBoxEntertainmentArea => new(_haContext, "select.sync_box_entertainment_area");
    ///<summary>Sync Box HDMI Input</summary>
    public SelectEntity SyncBoxHdmiInput => new(_haContext, "select.sync_box_hdmi_input");
    ///<summary>Sync Box Intensity</summary>
    public SelectEntity SyncBoxIntensity => new(_haContext, "select.sync_box_intensity");
    ///<summary>Sync Box Led indicator</summary>
    public SelectEntity SyncBoxLedIndicator => new(_haContext, "select.sync_box_led_indicator");
    ///<summary>Sync Box Sync mode</summary>
    public SelectEntity SyncBoxSyncMode => new(_haContext, "select.sync_box_sync_mode");
}

public partial class VacuumEntities
{
    private readonly IHaContext _haContext;
    public VacuumEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Jaap</summary>
    public VacuumEntity Jaap => new(_haContext, "vacuum.jaap");
}

public partial class RemoteEntities
{
    private readonly IHaContext _haContext;
    public RemoteEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>TV</summary>
    public RemoteEntity Tv => new(_haContext, "remote.tv");
    ///<summary>Xbox Vincent Remote</summary>
    public RemoteEntity XboxVincentRemote => new(_haContext, "remote.xbox_vincent_remote");
}

public partial class TtsEntities
{
    private readonly IHaContext _haContext;
    public TtsEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Google nl nl</summary>
    public TtsEntity GoogleNlNl => new(_haContext, "tts.google_nl_nl");
}

public partial class EventEntities
{
    private readonly IHaContext _haContext;
    public EventEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Badkamer Button 1</summary>
    public EventEntity BadkamerButton1 => new(_haContext, "event.badkamer_button_1");
    ///<summary>Badkamer Button 1</summary>
    public EventEntity BadkamerButton12 => new(_haContext, "event.badkamer_button_1_2");
    ///<summary>Badkamer Button 2</summary>
    public EventEntity BadkamerButton2 => new(_haContext, "event.badkamer_button_2");
    ///<summary>Badkamer Button 2</summary>
    public EventEntity BadkamerButton22 => new(_haContext, "event.badkamer_button_2_2");
    ///<summary>Badkamer Button 3</summary>
    public EventEntity BadkamerButton3 => new(_haContext, "event.badkamer_button_3");
    ///<summary>Badkamer Button 4</summary>
    public EventEntity BadkamerButton4 => new(_haContext, "event.badkamer_button_4");
    ///<summary>Gang Button 1</summary>
    public EventEntity GangButton1 => new(_haContext, "event.gang_button_1");
    ///<summary>Gang Button 2</summary>
    public EventEntity GangButton2 => new(_haContext, "event.gang_button_2");
    ///<summary>Gang Button 3</summary>
    public EventEntity GangButton3 => new(_haContext, "event.gang_button_3");
    ///<summary>Gang Button 4</summary>
    public EventEntity GangButton4 => new(_haContext, "event.gang_button_4");
    ///<summary>Hal Button 1</summary>
    public EventEntity HalButton1 => new(_haContext, "event.hal_button_1");
    ///<summary>Repairs</summary>
    public EventEntity Repair => new(_haContext, "event.repair");
    ///<summary>Slaapkamer Button 1</summary>
    public EventEntity SlaapkamerButton1 => new(_haContext, "event.slaapkamer_button_1");
    ///<summary>Switch badkamer spiegel Button 1</summary>
    public EventEntity SwitchBadkamerSpiegelButton1 => new(_haContext, "event.switch_badkamer_spiegel_button_1");
    ///<summary>Switch badkamer spiegel Button 2</summary>
    public EventEntity SwitchBadkamerSpiegelButton2 => new(_haContext, "event.switch_badkamer_spiegel_button_2");
    ///<summary>Switch badkamer spiegel Button 3</summary>
    public EventEntity SwitchBadkamerSpiegelButton3 => new(_haContext, "event.switch_badkamer_spiegel_button_3");
    ///<summary>Switch badkamer spiegel Button 4</summary>
    public EventEntity SwitchBadkamerSpiegelButton4 => new(_haContext, "event.switch_badkamer_spiegel_button_4");
    ///<summary>Switch Slaapkamer Button 1</summary>
    public EventEntity SwitchSlaapkamerButton1 => new(_haContext, "event.switch_slaapkamer_button_1");
    ///<summary>Switch Slaapkamer Button 2</summary>
    public EventEntity SwitchSlaapkamerButton2 => new(_haContext, "event.switch_slaapkamer_button_2");
    ///<summary>Switch Slaapkamer Button 3</summary>
    public EventEntity SwitchSlaapkamerButton3 => new(_haContext, "event.switch_slaapkamer_button_3");
    ///<summary>Switch Slaapkamer Button 4</summary>
    public EventEntity SwitchSlaapkamerButton4 => new(_haContext, "event.switch_slaapkamer_button_4");
    ///<summary>Woonkamer Button 1</summary>
    public EventEntity WoonkamerButton1 => new(_haContext, "event.woonkamer_button_1");
    ///<summary>Woonkamer Button 1</summary>
    public EventEntity WoonkamerButton12 => new(_haContext, "event.woonkamer_button_1_2");
    ///<summary>Woonkamer Button 2</summary>
    public EventEntity WoonkamerButton2 => new(_haContext, "event.woonkamer_button_2");
    ///<summary>Woonkamer Button 3</summary>
    public EventEntity WoonkamerButton3 => new(_haContext, "event.woonkamer_button_3");
    ///<summary>Woonkamer Button 4</summary>
    public EventEntity WoonkamerButton4 => new(_haContext, "event.woonkamer_button_4");
}

public partial record AutomationEntity : Entity<AutomationEntity, EntityState<AutomationAttributes>, AutomationAttributes>
{
    public AutomationEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public AutomationEntity(Entity entity) : base(entity)
    {
    }
}

public partial record AutomationAttributes
{
    [JsonPropertyName("last_triggered")]
    public string? LastTriggered { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("current")]
    public double? Current { get; init; }

    [JsonPropertyName("max")]
    public double? Max { get; init; }

    [JsonPropertyName("id")]
    public string? Id { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record BinarySensorEntity : Entity<BinarySensorEntity, EntityState<BinarySensorAttributes>, BinarySensorAttributes>
{
    public BinarySensorEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public BinarySensorEntity(Entity entity) : base(entity)
    {
    }
}

public partial record BinarySensorAttributes
{
    [JsonPropertyName("round_trip_time_avg")]
    public double? RoundTripTimeAvg { get; init; }

    [JsonPropertyName("round_trip_time_max")]
    public double? RoundTripTimeMax { get; init; }

    [JsonPropertyName("round_trip_time_mdev")]
    public string? RoundTripTimeMdev { get; init; }

    [JsonPropertyName("round_trip_time_min")]
    public double? RoundTripTimeMin { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("raw_state")]
    public string? RawState { get; init; }

    [JsonPropertyName("end_time")]
    public string? EndTime { get; init; }

    [JsonPropertyName("end_uv")]
    public double? EndUv { get; init; }

    [JsonPropertyName("start_uv")]
    public double? StartUv { get; init; }

    [JsonPropertyName("start_time")]
    public string? StartTime { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("motion_valid")]
    public bool? MotionValid { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("state")]
    public string? State { get; init; }

    [JsonPropertyName("expires_at")]
    public string? ExpiresAt { get; init; }

    [JsonPropertyName("dns")]
    public string? Dns { get; init; }

    [JsonPropertyName("gateway")]
    public string? Gateway { get; init; }

    [JsonPropertyName("ip")]
    public string? Ip { get; init; }

    [JsonPropertyName("ip_type")]
    public string? IpType { get; init; }

    [JsonPropertyName("mask")]
    public string? Mask { get; init; }

    [JsonPropertyName("private_subnet")]
    public double? PrivateSubnet { get; init; }

    [JsonPropertyName("xdns")]
    public string? Xdns { get; init; }

    [JsonPropertyName("xip")]
    public string? Xip { get; init; }

    [JsonPropertyName("xmask")]
    public string? Xmask { get; init; }

    [JsonPropertyName("alias")]
    public string? Alias { get; init; }

    [JsonPropertyName("level")]
    public double? Level { get; init; }

    [JsonPropertyName("mac")]
    public string? Mac { get; init; }

    [JsonPropertyName("model")]
    public string? Model { get; init; }

    [JsonPropertyName("parent")]
    public object? Parent { get; init; }

    [JsonPropertyName("product_id")]
    public string? ProductId { get; init; }

    [JsonPropertyName("type")]
    public string? Type { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("malware")]
    public string? Malware { get; init; }

    [JsonPropertyName("network")]
    public string? Network { get; init; }

    [JsonPropertyName("securitySetting")]
    public string? SecuritySetting { get; init; }

    [JsonPropertyName("systemCheck")]
    public string? SystemCheck { get; init; }

    [JsonPropertyName("update")]
    public string? Update { get; init; }

    [JsonPropertyName("userInfo")]
    public string? UserInfo { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record ButtonEntity : Entity<ButtonEntity, EntityState<ButtonAttributes>, ButtonAttributes>
{
    public ButtonEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ButtonEntity(Entity entity) : base(entity)
    {
    }
}

public partial record ButtonAttributes
{
    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record CalendarEntity : Entity<CalendarEntity, EntityState<CalendarAttributes>, CalendarAttributes>
{
    public CalendarEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public CalendarEntity(Entity entity) : base(entity)
    {
    }
}

public partial record CalendarAttributes
{
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    [JsonPropertyName("all_day")]
    public bool? AllDay { get; init; }

    [JsonPropertyName("start_time")]
    public string? StartTime { get; init; }

    [JsonPropertyName("end_time")]
    public string? EndTime { get; init; }

    [JsonPropertyName("location")]
    public string? Location { get; init; }

    [JsonPropertyName("description")]
    public string? Description { get; init; }

    [JsonPropertyName("offset_reached")]
    public bool? OffsetReached { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record CameraEntity : Entity<CameraEntity, EntityState<CameraAttributes>, CameraAttributes>
{
    public CameraEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public CameraEntity(Entity entity) : base(entity)
    {
    }
}

public partial record CameraAttributes
{
    [JsonPropertyName("access_token")]
    public string? AccessToken { get; init; }

    [JsonPropertyName("file_path")]
    public string? FilePath { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("video_url")]
    public string? VideoUrl { get; init; }

    [JsonPropertyName("last_video_id")]
    public double? LastVideoId { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }
}

public partial record DeviceTrackerEntity : Entity<DeviceTrackerEntity, EntityState<DeviceTrackerAttributes>, DeviceTrackerAttributes>
{
    public DeviceTrackerEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public DeviceTrackerEntity(Entity entity) : base(entity)
    {
    }
}

public partial record DeviceTrackerAttributes
{
    [JsonPropertyName("source_type")]
    public string? SourceType { get; init; }

    [JsonPropertyName("latitude")]
    public double? Latitude { get; init; }

    [JsonPropertyName("longitude")]
    public double? Longitude { get; init; }

    [JsonPropertyName("gps_accuracy")]
    public double? GpsAccuracy { get; init; }

    [JsonPropertyName("altitude")]
    public double? Altitude { get; init; }

    [JsonPropertyName("course")]
    public double? Course { get; init; }

    [JsonPropertyName("speed")]
    public double? Speed { get; init; }

    [JsonPropertyName("vertical_accuracy")]
    public double? VerticalAccuracy { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("mac")]
    public string? Mac { get; init; }

    [JsonPropertyName("name")]
    public string? Name { get; init; }

    [JsonPropertyName("ip")]
    public string? Ip { get; init; }

    [JsonPropertyName("host_name")]
    public string? HostName { get; init; }

    [JsonPropertyName("connection_time")]
    public string? ConnectionTime { get; init; }

    [JsonPropertyName("connection_type")]
    public string? ConnectionType { get; init; }

    [JsonPropertyName("guest")]
    public bool? Guest { get; init; }

    [JsonPropertyName("guest_id")]
    public object? GuestId { get; init; }

    [JsonPropertyName("internet")]
    public bool? Internet { get; init; }

    [JsonPropertyName("internet_mode")]
    public string? InternetMode { get; init; }

    [JsonPropertyName("ip_type")]
    public string? IpType { get; init; }

    [JsonPropertyName("last_activity")]
    public string? LastActivity { get; init; }

    [JsonPropertyName("node")]
    public string? Node { get; init; }

    [JsonPropertyName("rssi")]
    public object? Rssi { get; init; }

    [JsonPropertyName("rx_speed")]
    public double? RxSpeed { get; init; }

    [JsonPropertyName("tx_speed")]
    public double? TxSpeed { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record InputBooleanEntity : Entity<InputBooleanEntity, EntityState<InputBooleanAttributes>, InputBooleanAttributes>
{
    public InputBooleanEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public InputBooleanEntity(Entity entity) : base(entity)
    {
    }
}

public partial record InputBooleanAttributes
{
    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record InputButtonEntity : Entity<InputButtonEntity, EntityState<InputButtonAttributes>, InputButtonAttributes>
{
    public InputButtonEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public InputButtonEntity(Entity entity) : base(entity)
    {
    }
}

public partial record InputButtonAttributes
{
    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record InputDatetimeEntity : Entity<InputDatetimeEntity, EntityState<InputDatetimeAttributes>, InputDatetimeAttributes>
{
    public InputDatetimeEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public InputDatetimeEntity(Entity entity) : base(entity)
    {
    }
}

public partial record InputDatetimeAttributes
{
    [JsonPropertyName("has_date")]
    public bool? HasDate { get; init; }

    [JsonPropertyName("has_time")]
    public bool? HasTime { get; init; }

    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("hour")]
    public double? Hour { get; init; }

    [JsonPropertyName("minute")]
    public double? Minute { get; init; }

    [JsonPropertyName("second")]
    public double? Second { get; init; }

    [JsonPropertyName("timestamp")]
    public double? Timestamp { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("year")]
    public double? Year { get; init; }

    [JsonPropertyName("month")]
    public double? Month { get; init; }

    [JsonPropertyName("day")]
    public double? Day { get; init; }
}

public partial record InputNumberEntity : NumericEntity<InputNumberEntity, NumericEntityState<InputNumberAttributes>, InputNumberAttributes>
{
    public InputNumberEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public InputNumberEntity(Entity entity) : base(entity)
    {
    }
}

public partial record InputNumberAttributes
{
    [JsonPropertyName("initial")]
    public object? Initial { get; init; }

    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("min")]
    public double? Min { get; init; }

    [JsonPropertyName("max")]
    public double? Max { get; init; }

    [JsonPropertyName("step")]
    public double? Step { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record InputSelectEntity : Entity<InputSelectEntity, EntityState<InputSelectAttributes>, InputSelectAttributes>
{
    public InputSelectEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public InputSelectEntity(Entity entity) : base(entity)
    {
    }
}

public partial record InputSelectAttributes
{
    [JsonPropertyName("options")]
    public IReadOnlyList<string>? Options { get; init; }

    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record InputTextEntity : Entity<InputTextEntity, EntityState<InputTextAttributes>, InputTextAttributes>
{
    public InputTextEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public InputTextEntity(Entity entity) : base(entity)
    {
    }
}

public partial record InputTextAttributes
{
    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("min")]
    public double? Min { get; init; }

    [JsonPropertyName("max")]
    public double? Max { get; init; }

    [JsonPropertyName("pattern")]
    public object? Pattern { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record LightEntity : Entity<LightEntity, EntityState<LightAttributes>, LightAttributes>
{
    public LightEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public LightEntity(Entity entity) : base(entity)
    {
    }
}

public partial record LightAttributes
{
    [JsonPropertyName("min_color_temp_kelvin")]
    public double? MinColorTempKelvin { get; init; }

    [JsonPropertyName("max_color_temp_kelvin")]
    public double? MaxColorTempKelvin { get; init; }

    [JsonPropertyName("min_mireds")]
    public double? MinMireds { get; init; }

    [JsonPropertyName("max_mireds")]
    public double? MaxMireds { get; init; }

    [JsonPropertyName("effect_list")]
    public IReadOnlyList<string>? EffectList { get; init; }

    [JsonPropertyName("supported_color_modes")]
    public IReadOnlyList<string>? SupportedColorModes { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("dynamics")]
    public object? Dynamics { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("color_mode")]
    public string? ColorMode { get; init; }

    [JsonPropertyName("brightness")]
    public double? Brightness { get; init; }

    [JsonPropertyName("color_temp_kelvin")]
    public double? ColorTempKelvin { get; init; }

    [JsonPropertyName("color_temp")]
    public double? ColorTemp { get; init; }

    [JsonPropertyName("hs_color")]
    public IReadOnlyList<double>? HsColor { get; init; }

    [JsonPropertyName("rgb_color")]
    public IReadOnlyList<double>? RgbColor { get; init; }

    [JsonPropertyName("xy_color")]
    public IReadOnlyList<double>? XyColor { get; init; }

    [JsonPropertyName("effect")]
    public string? Effect { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("is_hue_group")]
    public bool? IsHueGroup { get; init; }

    [JsonPropertyName("hue_scenes")]
    public IReadOnlyList<string>? HueScenes { get; init; }

    [JsonPropertyName("hue_type")]
    public string? HueType { get; init; }

    [JsonPropertyName("lights")]
    public IReadOnlyList<string>? Lights { get; init; }
}

public partial record MediaPlayerEntity : Entity<MediaPlayerEntity, EntityState<MediaPlayerAttributes>, MediaPlayerAttributes>
{
    public MediaPlayerEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public MediaPlayerEntity(Entity entity) : base(entity)
    {
    }
}

public partial record MediaPlayerAttributes
{
    [JsonPropertyName("source_list")]
    public IReadOnlyList<string>? SourceList { get; init; }

    [JsonPropertyName("sound_mode_list")]
    public IReadOnlyList<string>? SoundModeList { get; init; }

    [JsonPropertyName("volume_level")]
    public double? VolumeLevel { get; init; }

    [JsonPropertyName("media_content_type")]
    public string? MediaContentType { get; init; }

    [JsonPropertyName("media_title")]
    public string? MediaTitle { get; init; }

    [JsonPropertyName("media_artist")]
    public string? MediaArtist { get; init; }

    [JsonPropertyName("source")]
    public string? Source { get; init; }

    [JsonPropertyName("sound_mode")]
    public string? SoundMode { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("entertainment_area_list")]
    public IReadOnlyList<string>? EntertainmentAreaList { get; init; }

    [JsonPropertyName("entertainment_area")]
    public string? EntertainmentArea { get; init; }

    [JsonPropertyName("bridge_unique_id")]
    public string? BridgeUniqueId { get; init; }

    [JsonPropertyName("bridge_connection_state")]
    public string? BridgeConnectionState { get; init; }

    [JsonPropertyName("hdmi1_status")]
    public string? Hdmi1Status { get; init; }

    [JsonPropertyName("hdmi2_status")]
    public string? Hdmi2Status { get; init; }

    [JsonPropertyName("hdmi3_status")]
    public string? Hdmi3Status { get; init; }

    [JsonPropertyName("hdmi4_status")]
    public string? Hdmi4Status { get; init; }

    [JsonPropertyName("brightness")]
    public double? Brightness { get; init; }

    [JsonPropertyName("intensity")]
    public string? Intensity { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("is_volume_muted")]
    public bool? IsVolumeMuted { get; init; }

    [JsonPropertyName("media_content_id")]
    public string? MediaContentId { get; init; }

    [JsonPropertyName("media_duration")]
    public double? MediaDuration { get; init; }

    [JsonPropertyName("media_position")]
    public double? MediaPosition { get; init; }

    [JsonPropertyName("media_position_updated_at")]
    public string? MediaPositionUpdatedAt { get; init; }

    [JsonPropertyName("app_id")]
    public string? AppId { get; init; }

    [JsonPropertyName("app_name")]
    public string? AppName { get; init; }

    [JsonPropertyName("entity_picture_local")]
    public object? EntityPictureLocal { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }
}

public partial record NumberEntity : NumericEntity<NumberEntity, NumericEntityState<NumberAttributes>, NumberAttributes>
{
    public NumberEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public NumberEntity(Entity entity) : base(entity)
    {
    }
}

public partial record NumberAttributes
{
    [JsonPropertyName("min")]
    public double? Min { get; init; }

    [JsonPropertyName("max")]
    public double? Max { get; init; }

    [JsonPropertyName("step")]
    public double? Step { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("raw_state")]
    public double? RawState { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("unit_of_measurement")]
    public string? UnitOfMeasurement { get; init; }
}

public partial record PersistentNotificationEntity : Entity<PersistentNotificationEntity, EntityState<PersistentNotificationAttributes>, PersistentNotificationAttributes>
{
    public PersistentNotificationEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public PersistentNotificationEntity(Entity entity) : base(entity)
    {
    }
}

public partial record PersistentNotificationAttributes
{
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    [JsonPropertyName("title")]
    public string? Title { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record PersonEntity : Entity<PersonEntity, EntityState<PersonAttributes>, PersonAttributes>
{
    public PersonEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public PersonEntity(Entity entity) : base(entity)
    {
    }
}

public partial record PersonAttributes
{
    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("id")]
    public string? Id { get; init; }

    [JsonPropertyName("latitude")]
    public double? Latitude { get; init; }

    [JsonPropertyName("longitude")]
    public double? Longitude { get; init; }

    [JsonPropertyName("gps_accuracy")]
    public double? GpsAccuracy { get; init; }

    [JsonPropertyName("source")]
    public string? Source { get; init; }

    [JsonPropertyName("user_id")]
    public string? UserId { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("device_trackers")]
    public IReadOnlyList<string>? DeviceTrackers { get; init; }
}

public partial record SensorEntity : Entity<SensorEntity, EntityState<SensorAttributes>, SensorAttributes>
{
    public SensorEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SensorEntity(Entity entity) : base(entity)
    {
    }
}

public partial record SensorAttributes
{
    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("date")]
    public string? Date { get; init; }

    [JsonPropertyName("trash_type")]
    public string? TrashType { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("options")]
    public IReadOnlyList<string>? Options { get; init; }

    [JsonPropertyName("data")]
    public object? Data { get; init; }

    [JsonPropertyName("raw_state")]
    public object? RawState { get; init; }

    [JsonPropertyName("state_class")]
    public string? StateClass { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("sport")]
    public string? Sport { get; init; }

    [JsonPropertyName("league")]
    public string? League { get; init; }

    [JsonPropertyName("league_logo")]
    public string? LeagueLogo { get; init; }

    [JsonPropertyName("team_abbr")]
    public string? TeamAbbr { get; init; }

    [JsonPropertyName("opponent_abbr")]
    public string? OpponentAbbr { get; init; }

    [JsonPropertyName("event_name")]
    public string? EventName { get; init; }

    [JsonPropertyName("kickoff_in")]
    public string? KickoffIn { get; init; }

    [JsonPropertyName("venue")]
    public string? Venue { get; init; }

    [JsonPropertyName("location")]
    public string? Location { get; init; }

    [JsonPropertyName("tv_network")]
    public object? TvNetwork { get; init; }

    [JsonPropertyName("odds")]
    public object? Odds { get; init; }

    [JsonPropertyName("overunder")]
    public object? Overunder { get; init; }

    [JsonPropertyName("team_name")]
    public string? TeamName { get; init; }

    [JsonPropertyName("team_id")]
    public string? TeamId { get; init; }

    [JsonPropertyName("team_record")]
    public object? TeamRecord { get; init; }

    [JsonPropertyName("team_rank")]
    public object? TeamRank { get; init; }

    [JsonPropertyName("team_homeaway")]
    public string? TeamHomeaway { get; init; }

    [JsonPropertyName("team_logo")]
    public string? TeamLogo { get; init; }

    [JsonPropertyName("team_colors")]
    public IReadOnlyList<string>? TeamColors { get; init; }

    [JsonPropertyName("team_score")]
    public string? TeamScore { get; init; }

    [JsonPropertyName("team_win_probability")]
    public object? TeamWinProbability { get; init; }

    [JsonPropertyName("team_timeouts")]
    public object? TeamTimeouts { get; init; }

    [JsonPropertyName("opponent_name")]
    public string? OpponentName { get; init; }

    [JsonPropertyName("opponent_id")]
    public string? OpponentId { get; init; }

    [JsonPropertyName("opponent_record")]
    public object? OpponentRecord { get; init; }

    [JsonPropertyName("opponent_rank")]
    public object? OpponentRank { get; init; }

    [JsonPropertyName("opponent_homeaway")]
    public string? OpponentHomeaway { get; init; }

    [JsonPropertyName("opponent_logo")]
    public string? OpponentLogo { get; init; }

    [JsonPropertyName("opponent_colors")]
    public IReadOnlyList<string>? OpponentColors { get; init; }

    [JsonPropertyName("opponent_score")]
    public string? OpponentScore { get; init; }

    [JsonPropertyName("opponent_win_probability")]
    public object? OpponentWinProbability { get; init; }

    [JsonPropertyName("opponent_timeouts")]
    public object? OpponentTimeouts { get; init; }

    [JsonPropertyName("quarter")]
    public object? Quarter { get; init; }

    [JsonPropertyName("clock")]
    public string? Clock { get; init; }

    [JsonPropertyName("possession")]
    public object? Possession { get; init; }

    [JsonPropertyName("last_play")]
    public object? LastPlay { get; init; }

    [JsonPropertyName("down_distance_text")]
    public object? DownDistanceText { get; init; }

    [JsonPropertyName("outs")]
    public object? Outs { get; init; }

    [JsonPropertyName("balls")]
    public object? Balls { get; init; }

    [JsonPropertyName("strikes")]
    public object? Strikes { get; init; }

    [JsonPropertyName("on_first")]
    public object? OnFirst { get; init; }

    [JsonPropertyName("on_second")]
    public object? OnSecond { get; init; }

    [JsonPropertyName("on_third")]
    public object? OnThird { get; init; }

    [JsonPropertyName("team_shots_on_target")]
    public object? TeamShotsOnTarget { get; init; }

    [JsonPropertyName("team_total_shots")]
    public object? TeamTotalShots { get; init; }

    [JsonPropertyName("opponent_shots_on_target")]
    public object? OpponentShotsOnTarget { get; init; }

    [JsonPropertyName("opponent_total_shots")]
    public object? OpponentTotalShots { get; init; }

    [JsonPropertyName("team_sets_won")]
    public object? TeamSetsWon { get; init; }

    [JsonPropertyName("opponent_sets_won")]
    public object? OpponentSetsWon { get; init; }

    [JsonPropertyName("last_update")]
    public string? LastUpdate { get; init; }

    [JsonPropertyName("api_message")]
    public string? ApiMessage { get; init; }

    [JsonPropertyName("Stationname")]
    public string? Stationname { get; init; }

    [JsonPropertyName("Measured")]
    public string? Measured { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("power")]
    public string? Power { get; init; }

    [JsonPropertyName("device_status")]
    public string? DeviceStatus { get; init; }

    [JsonPropertyName("activity")]
    public string? Activity { get; init; }

    [JsonPropertyName("created_at")]
    public string? CreatedAt { get; init; }

    [JsonPropertyName("answered")]
    public bool? Answered { get; init; }

    [JsonPropertyName("recording_status")]
    public string? RecordingStatus { get; init; }

    [JsonPropertyName("category")]
    public string? Category { get; init; }

    [JsonPropertyName("dns")]
    public string? Dns { get; init; }

    [JsonPropertyName("gateway")]
    public string? Gateway { get; init; }

    [JsonPropertyName("ip_type")]
    public string? IpType { get; init; }

    [JsonPropertyName("mask")]
    public string? Mask { get; init; }

    [JsonPropertyName("private_subnet")]
    public double? PrivateSubnet { get; init; }

    [JsonPropertyName("xdns")]
    public string? Xdns { get; init; }

    [JsonPropertyName("xip")]
    public string? Xip { get; init; }

    [JsonPropertyName("xmask")]
    public string? Xmask { get; init; }

    [JsonPropertyName("devices")]
    public IReadOnlyList<object>? Devices { get; init; }

    [JsonPropertyName("list")]
    public IReadOnlyList<object>? List { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("Last Local backup date")]
    public string? LastLocalbackupdate { get; init; }

    [JsonPropertyName("Last OneDrive backup date")]
    public string? LastOneDrivebackupdate { get; init; }

    [JsonPropertyName("Backups in Home Assistant")]
    public string? BackupsinHomeAssistant { get; init; }

    [JsonPropertyName("Backups in OneDrive")]
    public string? BackupsinOneDrive { get; init; }

    [JsonPropertyName("Current backup upload percentage")]
    public object? Currentbackupuploadpercentage { get; init; }

    [JsonPropertyName("Current backup upload speed (KB/s)")]
    public object? CurrentbackupuploadspeedKBs { get; init; }

    [JsonPropertyName("Backup download percentage")]
    public object? Backupdownloadpercentage { get; init; }

    [JsonPropertyName("device_id")]
    public string? DeviceId { get; init; }

    [JsonPropertyName("device_name")]
    public string? DeviceName { get; init; }

    [JsonPropertyName("auth_token")]
    public string? AuthToken { get; init; }

    [JsonPropertyName("ip_address")]
    public string? IpAddress { get; init; }

    [JsonPropertyName("available")]
    public bool? Available { get; init; }

    [JsonPropertyName("next_alarm_status")]
    public string? NextAlarmStatus { get; init; }

    [JsonPropertyName("alarm_volume")]
    public double? AlarmVolume { get; init; }

    [JsonPropertyName("alarms")]
    public IReadOnlyList<object>? Alarms { get; init; }

    [JsonPropertyName("next_timer_status")]
    public string? NextTimerStatus { get; init; }

    [JsonPropertyName("timers")]
    public IReadOnlyList<object>? Timers { get; init; }

    [JsonPropertyName("team_winner")]
    public bool? TeamWinner { get; init; }

    [JsonPropertyName("opponent_winner")]
    public bool? OpponentWinner { get; init; }
}

public partial record NumericSensorEntity : NumericEntity<NumericSensorEntity, NumericEntityState<NumericSensorAttributes>, NumericSensorAttributes>
{
    public NumericSensorEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public NumericSensorEntity(Entity entity) : base(entity)
    {
    }
}

public partial record NumericSensorAttributes
{
    [JsonPropertyName("unit_of_measurement")]
    public string? UnitOfMeasurement { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("state_class")]
    public string? StateClass { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("tracking_#")]
    public IReadOnlyList<object>? Tracking { get; init; }

    [JsonPropertyName("time")]
    public string? Time { get; init; }

    [JsonPropertyName("server_name")]
    public string? ServerName { get; init; }

    [JsonPropertyName("server_country")]
    public string? ServerCountry { get; init; }

    [JsonPropertyName("server_id")]
    public string? ServerId { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("bytes_received")]
    public double? BytesReceived { get; init; }

    [JsonPropertyName("bytes_sent")]
    public double? BytesSent { get; init; }

    [JsonPropertyName("Stationname")]
    public string? Stationname { get; init; }

    [JsonPropertyName("Measured")]
    public string? Measured { get; init; }

    [JsonPropertyName("entities")]
    public IReadOnlyList<object>? Entities { get; init; }

    [JsonPropertyName("temperature_valid")]
    public bool? TemperatureValid { get; init; }

    [JsonPropertyName("light_level")]
    public double? LightLevel { get; init; }

    [JsonPropertyName("light_level_valid")]
    public bool? LightLevelValid { get; init; }

    [JsonPropertyName("battery_state")]
    public string? BatteryState { get; init; }

    [JsonPropertyName("repositories")]
    public IReadOnlyList<object>? Repositories { get; init; }

    [JsonPropertyName("current")]
    public double? Current { get; init; }

    [JsonPropertyName("voltage")]
    public double? Voltage { get; init; }

    [JsonPropertyName("last_run_success")]
    public object? LastRunSuccess { get; init; }

    [JsonPropertyName("power_consumption_start")]
    public string? PowerConsumptionStart { get; init; }

    [JsonPropertyName("power_consumption_end")]
    public string? PowerConsumptionEnd { get; init; }

    [JsonPropertyName("free")]
    public double? Free { get; init; }

    [JsonPropertyName("total")]
    public double? Total { get; init; }

    [JsonPropertyName("used")]
    public double? Used { get; init; }

    [JsonPropertyName("core_1")]
    public double? Core1 { get; init; }

    [JsonPropertyName("core_2")]
    public double? Core2 { get; init; }

    [JsonPropertyName("core_3")]
    public double? Core3 { get; init; }

    [JsonPropertyName("core_4")]
    public double? Core4 { get; init; }

    [JsonPropertyName("battery_voltage")]
    public double? BatteryVoltage { get; init; }

    [JsonPropertyName("raw_state")]
    public double? RawState { get; init; }

    [JsonPropertyName("last_reset")]
    public string? LastReset { get; init; }

    [JsonPropertyName("data")]
    public IReadOnlyList<object>? Data { get; init; }

    [JsonPropertyName("price_ct_per_kwh")]
    public double? PriceCtPerKwh { get; init; }

    [JsonPropertyName("start_time")]
    public string? StartTime { get; init; }

    [JsonPropertyName("end_time")]
    public string? EndTime { get; init; }

    [JsonPropertyName("country_code")]
    public string? CountryCode { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("calculation_mode")]
    public string? CalculationMode { get; init; }

    [JsonPropertyName("integration")]
    public string? Integration { get; init; }

    [JsonPropertyName("source_entity")]
    public string? SourceEntity { get; init; }

    [JsonPropertyName("source_domain")]
    public string? SourceDomain { get; init; }

    [JsonPropertyName("energy_sensor_entity_id")]
    public string? EnergySensorEntityId { get; init; }

    [JsonPropertyName("source")]
    public string? Source { get; init; }

    [JsonPropertyName("destination_addresses")]
    public IReadOnlyList<string>? DestinationAddresses { get; init; }

    [JsonPropertyName("origin_addresses")]
    public IReadOnlyList<string>? OriginAddresses { get; init; }

    [JsonPropertyName("status")]
    public string? Status { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("units")]
    public string? Units { get; init; }

    [JsonPropertyName("duration_in_traffic")]
    public string? DurationInTraffic { get; init; }

    [JsonPropertyName("duration")]
    public string? Duration { get; init; }

    [JsonPropertyName("distance")]
    public string? Distance { get; init; }

    [JsonPropertyName("origin")]
    public string? Origin { get; init; }

    [JsonPropertyName("destination")]
    public string? Destination { get; init; }
}

public partial record SunEntity : Entity<SunEntity, EntityState<SunAttributes>, SunAttributes>
{
    public SunEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SunEntity(Entity entity) : base(entity)
    {
    }
}

public partial record SunAttributes
{
    [JsonPropertyName("next_dawn")]
    public string? NextDawn { get; init; }

    [JsonPropertyName("next_dusk")]
    public string? NextDusk { get; init; }

    [JsonPropertyName("next_midnight")]
    public string? NextMidnight { get; init; }

    [JsonPropertyName("next_noon")]
    public string? NextNoon { get; init; }

    [JsonPropertyName("next_rising")]
    public string? NextRising { get; init; }

    [JsonPropertyName("next_setting")]
    public string? NextSetting { get; init; }

    [JsonPropertyName("elevation")]
    public double? Elevation { get; init; }

    [JsonPropertyName("azimuth")]
    public double? Azimuth { get; init; }

    [JsonPropertyName("rising")]
    public bool? Rising { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record SwitchEntity : Entity<SwitchEntity, EntityState<SwitchAttributes>, SwitchAttributes>
{
    public SwitchEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SwitchEntity(Entity entity) : base(entity)
    {
    }
}

public partial record SwitchAttributes
{
    [JsonPropertyName("raw_state")]
    public bool? RawState { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("last_run_success")]
    public bool? LastRunSuccess { get; init; }

    [JsonPropertyName("switch_mode")]
    public bool? SwitchMode { get; init; }

    [JsonPropertyName("assumed_state")]
    public bool? AssumedState { get; init; }

    [JsonPropertyName("api_type")]
    public string? ApiType { get; init; }

    [JsonPropertyName("api_id")]
    public object? ApiId { get; init; }

    [JsonPropertyName("aimesh_sync")]
    public bool? AimeshSync { get; init; }

    [JsonPropertyName("auth_method")]
    public string? AuthMethod { get; init; }

    [JsonPropertyName("bw_limit")]
    public bool? BwLimit { get; init; }

    [JsonPropertyName("bw_limit_download")]
    public double? BwLimitDownload { get; init; }

    [JsonPropertyName("bw_limit_upload")]
    public double? BwLimitUpload { get; init; }

    [JsonPropertyName("expire")]
    public double? Expire { get; init; }

    [JsonPropertyName("expire_in")]
    public double? ExpireIn { get; init; }

    [JsonPropertyName("hidden")]
    public bool? Hidden { get; init; }

    [JsonPropertyName("lan_access")]
    public bool? LanAccess { get; init; }

    [JsonPropertyName("maclist")]
    public object? Maclist { get; init; }

    [JsonPropertyName("macmode")]
    public string? Macmode { get; init; }

    [JsonPropertyName("ssid")]
    public string? Ssid { get; init; }

    [JsonPropertyName("wpa_encryption")]
    public string? WpaEncryption { get; init; }

    [JsonPropertyName("list")]
    public IReadOnlyList<object>? List { get; init; }

    [JsonPropertyName("auth_read")]
    public double? AuthRead { get; init; }

    [JsonPropertyName("error_code")]
    public double? ErrorCode { get; init; }

    [JsonPropertyName("local_ip")]
    public string? LocalIp { get; init; }

    [JsonPropertyName("post_compress_bytes")]
    public double? PostCompressBytes { get; init; }

    [JsonPropertyName("post_decompress_bytes")]
    public double? PostDecompressBytes { get; init; }

    [JsonPropertyName("pre_compress_bytes")]
    public double? PreCompressBytes { get; init; }

    [JsonPropertyName("pre_decompress_bytes")]
    public double? PreDecompressBytes { get; init; }

    [JsonPropertyName("public_ip")]
    public string? PublicIp { get; init; }

    [JsonPropertyName("server_auth")]
    public string? ServerAuth { get; init; }

    [JsonPropertyName("server_ip")]
    public string? ServerIp { get; init; }

    [JsonPropertyName("server_port")]
    public double? ServerPort { get; init; }

    [JsonPropertyName("status")]
    public string? Status { get; init; }

    [JsonPropertyName("tcp_udp_read_bytes")]
    public double? TcpUdpReadBytes { get; init; }

    [JsonPropertyName("tcp_udp_write_bytes")]
    public double? TcpUdpWriteBytes { get; init; }

    [JsonPropertyName("tun_tap_read_bytes")]
    public double? TunTapReadBytes { get; init; }

    [JsonPropertyName("tun_tap_write_bytes")]
    public double? TunTapWriteBytes { get; init; }

    [JsonPropertyName("update_time")]
    public string? UpdateTime { get; init; }

    [JsonPropertyName("channel")]
    public object? Channel { get; init; }

    [JsonPropertyName("channel_bandwidth")]
    public string? ChannelBandwidth { get; init; }

    [JsonPropertyName("chanspec")]
    public string? Chanspec { get; init; }

    [JsonPropertyName("country_code")]
    public string? CountryCode { get; init; }

    [JsonPropertyName("gmode_check")]
    public object? GmodeCheck { get; init; }

    [JsonPropertyName("group_key_rotation")]
    public string? GroupKeyRotation { get; init; }

    [JsonPropertyName("maclist_x")]
    public object? MaclistX { get; init; }

    [JsonPropertyName("mbo_enable")]
    public string? MboEnable { get; init; }

    [JsonPropertyName("mfp")]
    public string? Mfp { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("radius_ipaddr")]
    public object? RadiusIpaddr { get; init; }

    [JsonPropertyName("radius_key")]
    public object? RadiusKey { get; init; }

    [JsonPropertyName("radius_port")]
    public string? RadiusPort { get; init; }

    [JsonPropertyName("xbox_optimized")]
    public object? XboxOptimized { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record UpdateEntity : Entity<UpdateEntity, EntityState<UpdateAttributes>, UpdateAttributes>
{
    public UpdateEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public UpdateEntity(Entity entity) : base(entity)
    {
    }
}

public partial record UpdateAttributes
{
    [JsonPropertyName("auto_update")]
    public bool? AutoUpdate { get; init; }

    [JsonPropertyName("installed_version")]
    public string? InstalledVersion { get; init; }

    [JsonPropertyName("in_progress")]
    public bool? InProgress { get; init; }

    [JsonPropertyName("latest_version")]
    public string? LatestVersion { get; init; }

    [JsonPropertyName("release_summary")]
    public string? ReleaseSummary { get; init; }

    [JsonPropertyName("release_url")]
    public string? ReleaseUrl { get; init; }

    [JsonPropertyName("skipped_version")]
    public object? SkippedVersion { get; init; }

    [JsonPropertyName("title")]
    public string? Title { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("available")]
    public string? Available { get; init; }

    [JsonPropertyName("current")]
    public string? Current { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }
}

public partial record WeatherEntity : Entity<WeatherEntity, EntityState<WeatherAttributes>, WeatherAttributes>
{
    public WeatherEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public WeatherEntity(Entity entity) : base(entity)
    {
    }
}

public partial record WeatherAttributes
{
    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    [JsonPropertyName("temperature_unit")]
    public string? TemperatureUnit { get; init; }

    [JsonPropertyName("humidity")]
    public double? Humidity { get; init; }

    [JsonPropertyName("pressure")]
    public double? Pressure { get; init; }

    [JsonPropertyName("pressure_unit")]
    public string? PressureUnit { get; init; }

    [JsonPropertyName("wind_bearing")]
    public double? WindBearing { get; init; }

    [JsonPropertyName("wind_speed")]
    public double? WindSpeed { get; init; }

    [JsonPropertyName("wind_speed_unit")]
    public string? WindSpeedUnit { get; init; }

    [JsonPropertyName("visibility")]
    public double? Visibility { get; init; }

    [JsonPropertyName("visibility_unit")]
    public string? VisibilityUnit { get; init; }

    [JsonPropertyName("precipitation_unit")]
    public string? PrecipitationUnit { get; init; }

    [JsonPropertyName("forecast")]
    public IReadOnlyList<object>? Forecast { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("cloud_coverage")]
    public double? CloudCoverage { get; init; }
}

public partial record ZoneEntity : Entity<ZoneEntity, EntityState<ZoneAttributes>, ZoneAttributes>
{
    public ZoneEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ZoneEntity(Entity entity) : base(entity)
    {
    }
}

public partial record ZoneAttributes
{
    [JsonPropertyName("latitude")]
    public double? Latitude { get; init; }

    [JsonPropertyName("longitude")]
    public double? Longitude { get; init; }

    [JsonPropertyName("radius")]
    public double? Radius { get; init; }

    [JsonPropertyName("passive")]
    public bool? Passive { get; init; }

    [JsonPropertyName("persons")]
    public IReadOnlyList<string>? Persons { get; init; }

    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record SceneEntity : Entity<SceneEntity, EntityState<SceneAttributes>, SceneAttributes>
{
    public SceneEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SceneEntity(Entity entity) : base(entity)
    {
    }
}

public partial record SceneAttributes
{
    [JsonPropertyName("entity_id")]
    public IReadOnlyList<string>? EntityId { get; init; }

    [JsonPropertyName("id")]
    public string? Id { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("group_name")]
    public string? GroupName { get; init; }

    [JsonPropertyName("group_type")]
    public string? GroupType { get; init; }

    [JsonPropertyName("name")]
    public string? Name { get; init; }

    [JsonPropertyName("speed")]
    public double? Speed { get; init; }

    [JsonPropertyName("brightness")]
    public double? Brightness { get; init; }

    [JsonPropertyName("is_dynamic")]
    public bool? IsDynamic { get; init; }
}

public partial record CoverEntity : Entity<CoverEntity, EntityState<CoverAttributes>, CoverAttributes>
{
    public CoverEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public CoverEntity(Entity entity) : base(entity)
    {
    }
}

public partial record CoverAttributes
{
    [JsonPropertyName("current_position")]
    public double? CurrentPosition { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record SelectEntity : Entity<SelectEntity, EntityState<SelectAttributes>, SelectAttributes>
{
    public SelectEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SelectEntity(Entity entity) : base(entity)
    {
    }
}

public partial record SelectAttributes
{
    [JsonPropertyName("options")]
    public IReadOnlyList<string>? Options { get; init; }

    [JsonPropertyName("raw_state")]
    public double? RawState { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }
}

public partial record VacuumEntity : Entity<VacuumEntity, EntityState<VacuumAttributes>, VacuumAttributes>
{
    public VacuumEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public VacuumEntity(Entity entity) : base(entity)
    {
    }
}

public partial record VacuumAttributes
{
    [JsonPropertyName("battery_level")]
    public double? BatteryLevel { get; init; }

    [JsonPropertyName("battery_icon")]
    public string? BatteryIcon { get; init; }

    [JsonPropertyName("software_version")]
    public string? SoftwareVersion { get; init; }

    [JsonPropertyName("status")]
    public string? Status { get; init; }

    [JsonPropertyName("bin_present")]
    public bool? BinPresent { get; init; }

    [JsonPropertyName("bin_full")]
    public bool? BinFull { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record RemoteEntity : Entity<RemoteEntity, EntityState<RemoteAttributes>, RemoteAttributes>
{
    public RemoteEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public RemoteEntity(Entity entity) : base(entity)
    {
    }
}

public partial record RemoteAttributes
{
    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record TtsEntity : Entity<TtsEntity, EntityState<TtsAttributes>, TtsAttributes>
{
    public TtsEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public TtsEntity(Entity entity) : base(entity)
    {
    }
}

public partial record TtsAttributes
{
    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record EventEntity : Entity<EventEntity, EntityState<EventAttributes>, EventAttributes>
{
    public EventEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public EventEntity(Entity entity) : base(entity)
    {
    }
}

public partial record EventAttributes
{
    [JsonPropertyName("event_types")]
    public IReadOnlyList<string>? EventTypes { get; init; }

    [JsonPropertyName("event_type")]
    public string? EventType { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("domain")]
    public string? Domain { get; init; }

    [JsonPropertyName("issue_id")]
    public string? IssueId { get; init; }
}

public interface IServices
{
    AlarmControlPanelServices AlarmControlPanel { get; }

    AsusrouterServices Asusrouter { get; }

    AutomationServices Automation { get; }

    BlueprintServices Blueprint { get; }

    ButtonServices Button { get; }

    CalendarServices Calendar { get; }

    CameraServices Camera { get; }

    CastServices Cast { get; }

    ClimateServices Climate { get; }

    CloudServices Cloud { get; }

    ConversationServices Conversation { get; }

    CounterServices Counter { get; }

    CoverServices Cover { get; }

    DeviceTrackerServices DeviceTracker { get; }

    DwainsDashboardServices DwainsDashboard { get; }

    FanServices Fan { get; }

    FfmpegServices Ffmpeg { get; }

    FrontendServices Frontend { get; }

    GoogleServices Google { get; }

    GoogleAssistantServices GoogleAssistant { get; }

    GoogleHomeServices GoogleHome { get; }

    GroupServices Group { get; }

    HassioServices Hassio { get; }

    HomeassistantServices Homeassistant { get; }

    HueServices Hue { get; }

    HuesyncboxServices Huesyncbox { get; }

    HumidifierServices Humidifier { get; }

    InputBooleanServices InputBoolean { get; }

    InputButtonServices InputButton { get; }

    InputDatetimeServices InputDatetime { get; }

    InputNumberServices InputNumber { get; }

    InputSelectServices InputSelect { get; }

    InputTextServices InputText { get; }

    LightServices Light { get; }

    LocaltuyaServices Localtuya { get; }

    LockServices Lock { get; }

    LogbookServices Logbook { get; }

    LoggerServices Logger { get; }

    MailAndPackagesServices MailAndPackages { get; }

    MediaPlayerServices MediaPlayer { get; }

    MotionBlindsServices MotionBlinds { get; }

    MqttServices Mqtt { get; }

    NotifyServices Notify { get; }

    NumberServices Number { get; }

    OpenaiConversationServices OpenaiConversation { get; }

    PersistentNotificationServices PersistentNotification { get; }

    PersonServices Person { get; }

    PicnicServices Picnic { get; }

    PingServices Ping { get; }

    PowercalcServices Powercalc { get; }

    RecorderServices Recorder { get; }

    RemoteServices Remote { get; }

    RepairsServices Repairs { get; }

    RingServices Ring { get; }

    SceneServices Scene { get; }

    ScheduleServices Schedule { get; }

    ScriptServices Script { get; }

    SelectServices Select { get; }

    SirenServices Siren { get; }

    SpookServices Spook { get; }

    SwitchServices Switch { get; }

    SynologyDsmServices SynologyDsm { get; }

    SystemLogServices SystemLog { get; }

    TemplateServices Template { get; }

    TextServices Text { get; }

    TimeServices Time { get; }

    TimerServices Timer { get; }

    TtsServices Tts { get; }

    UpdateServices Update { get; }

    UtilityMeterServices UtilityMeter { get; }

    VacuumServices Vacuum { get; }

    WatchmanServices Watchman { get; }

    WaterHeaterServices WaterHeater { get; }
}

public partial class Services : IServices
{
    private readonly IHaContext _haContext;
    public Services(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public AlarmControlPanelServices AlarmControlPanel => new(_haContext);
    public AsusrouterServices Asusrouter => new(_haContext);
    public AutomationServices Automation => new(_haContext);
    public BlueprintServices Blueprint => new(_haContext);
    public ButtonServices Button => new(_haContext);
    public CalendarServices Calendar => new(_haContext);
    public CameraServices Camera => new(_haContext);
    public CastServices Cast => new(_haContext);
    public ClimateServices Climate => new(_haContext);
    public CloudServices Cloud => new(_haContext);
    public ConversationServices Conversation => new(_haContext);
    public CounterServices Counter => new(_haContext);
    public CoverServices Cover => new(_haContext);
    public DeviceTrackerServices DeviceTracker => new(_haContext);
    public DwainsDashboardServices DwainsDashboard => new(_haContext);
    public FanServices Fan => new(_haContext);
    public FfmpegServices Ffmpeg => new(_haContext);
    public FrontendServices Frontend => new(_haContext);
    public GoogleServices Google => new(_haContext);
    public GoogleAssistantServices GoogleAssistant => new(_haContext);
    public GoogleHomeServices GoogleHome => new(_haContext);
    public GroupServices Group => new(_haContext);
    public HassioServices Hassio => new(_haContext);
    public HomeassistantServices Homeassistant => new(_haContext);
    public HueServices Hue => new(_haContext);
    public HuesyncboxServices Huesyncbox => new(_haContext);
    public HumidifierServices Humidifier => new(_haContext);
    public InputBooleanServices InputBoolean => new(_haContext);
    public InputButtonServices InputButton => new(_haContext);
    public InputDatetimeServices InputDatetime => new(_haContext);
    public InputNumberServices InputNumber => new(_haContext);
    public InputSelectServices InputSelect => new(_haContext);
    public InputTextServices InputText => new(_haContext);
    public LightServices Light => new(_haContext);
    public LocaltuyaServices Localtuya => new(_haContext);
    public LockServices Lock => new(_haContext);
    public LogbookServices Logbook => new(_haContext);
    public LoggerServices Logger => new(_haContext);
    public MailAndPackagesServices MailAndPackages => new(_haContext);
    public MediaPlayerServices MediaPlayer => new(_haContext);
    public MotionBlindsServices MotionBlinds => new(_haContext);
    public MqttServices Mqtt => new(_haContext);
    public NotifyServices Notify => new(_haContext);
    public NumberServices Number => new(_haContext);
    public OpenaiConversationServices OpenaiConversation => new(_haContext);
    public PersistentNotificationServices PersistentNotification => new(_haContext);
    public PersonServices Person => new(_haContext);
    public PicnicServices Picnic => new(_haContext);
    public PingServices Ping => new(_haContext);
    public PowercalcServices Powercalc => new(_haContext);
    public RecorderServices Recorder => new(_haContext);
    public RemoteServices Remote => new(_haContext);
    public RepairsServices Repairs => new(_haContext);
    public RingServices Ring => new(_haContext);
    public SceneServices Scene => new(_haContext);
    public ScheduleServices Schedule => new(_haContext);
    public ScriptServices Script => new(_haContext);
    public SelectServices Select => new(_haContext);
    public SirenServices Siren => new(_haContext);
    public SpookServices Spook => new(_haContext);
    public SwitchServices Switch => new(_haContext);
    public SynologyDsmServices SynologyDsm => new(_haContext);
    public SystemLogServices SystemLog => new(_haContext);
    public TemplateServices Template => new(_haContext);
    public TextServices Text => new(_haContext);
    public TimeServices Time => new(_haContext);
    public TimerServices Timer => new(_haContext);
    public TtsServices Tts => new(_haContext);
    public UpdateServices Update => new(_haContext);
    public UtilityMeterServices UtilityMeter => new(_haContext);
    public VacuumServices Vacuum => new(_haContext);
    public WatchmanServices Watchman => new(_haContext);
    public WaterHeaterServices WaterHeater => new(_haContext);
}

public partial class AlarmControlPanelServices
{
    private readonly IHaContext _haContext;
    public AlarmControlPanelServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the alarm to: _armed, no one home_.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmAway(ServiceTarget target, AlarmControlPanelAlarmArmAwayParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_away", target, data);
    }

    ///<summary>Sets the alarm to: _armed, no one home_.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmArmAway(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_away", target, new AlarmControlPanelAlarmArmAwayParameters { Code = code });
    }

    ///<summary>Arms the alarm while allowing to bypass a custom area.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmCustomBypass(ServiceTarget target, AlarmControlPanelAlarmArmCustomBypassParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_custom_bypass", target, data);
    }

    ///<summary>Arms the alarm while allowing to bypass a custom area.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmArmCustomBypass(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_custom_bypass", target, new AlarmControlPanelAlarmArmCustomBypassParameters { Code = code });
    }

    ///<summary>Sets the alarm to: _armed, but someone is home_.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmHome(ServiceTarget target, AlarmControlPanelAlarmArmHomeParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_home", target, data);
    }

    ///<summary>Sets the alarm to: _armed, but someone is home_.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmArmHome(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_home", target, new AlarmControlPanelAlarmArmHomeParameters { Code = code });
    }

    ///<summary>Sets the alarm to: _armed for the night_.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmNight(ServiceTarget target, AlarmControlPanelAlarmArmNightParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_night", target, data);
    }

    ///<summary>Sets the alarm to: _armed for the night_.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmArmNight(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_night", target, new AlarmControlPanelAlarmArmNightParameters { Code = code });
    }

    ///<summary>Sets the alarm to: _armed for vacation_.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmVacation(ServiceTarget target, AlarmControlPanelAlarmArmVacationParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_vacation", target, data);
    }

    ///<summary>Sets the alarm to: _armed for vacation_.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmArmVacation(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_vacation", target, new AlarmControlPanelAlarmArmVacationParameters { Code = code });
    }

    ///<summary>Disarms the alarm.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmDisarm(ServiceTarget target, AlarmControlPanelAlarmDisarmParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_disarm", target, data);
    }

    ///<summary>Disarms the alarm.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">Code to disarm the alarm. eg: 1234</param>
    public void AlarmDisarm(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_disarm", target, new AlarmControlPanelAlarmDisarmParameters { Code = code });
    }

    ///<summary>Enables an external alarm trigger.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmTrigger(ServiceTarget target, AlarmControlPanelAlarmTriggerParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_trigger", target, data);
    }

    ///<summary>Enables an external alarm trigger.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmTrigger(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_trigger", target, new AlarmControlPanelAlarmTriggerParameters { Code = code });
    }
}

public partial record AlarmControlPanelAlarmArmAwayParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmArmCustomBypassParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmArmHomeParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmArmNightParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmArmVacationParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmDisarmParameters
{
    ///<summary>Code to disarm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmTriggerParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial class AsusrouterServices
{
    private readonly IHaContext _haContext;
    public AsusrouterServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Adjust settings of WLAN network. Please, provide only parameters you would like to change. Otherwise, the previous known values will be used</summary>
    public void AdjustWlan(AsusrouterAdjustWlanParameters data)
    {
        _haContext.CallService("asusrouter", "adjust_wlan", null, data);
    }

    ///<summary>Adjust settings of WLAN network. Please, provide only parameters you would like to change. Otherwise, the previous known values will be used</summary>
    ///<param name="entityId">WLAN entity</param>
    ///<param name="state">Off / On</param>
    ///<param name="closed">Hide the network SSID</param>
    ///<param name="ssid">WLAN name</param>
    ///<param name="password">WLAN password</param>
    ///<param name="lanaccess">(Guest only) Allow LAN access</param>
    ///<param name="syncNode">(Guest only) Synchronize across all AiMesh nodes. When selected, guest network is created on all the nodes. When not selected - guest network is created only on the main router</param>
    ///<param name="bwEnabled">(Guest only) Limit bandwidth per connected device</param>
    ///<param name="bwDl">(Guest only) Limit download bandwidth per connected device (0 = unlimited)</param>
    ///<param name="bwUl">(Guest only) Limit upload bandwidth per connected device (0 = unlimited)</param>
    ///<param name="expire">(Guest only) Set a time for which network will be active (0 = unlimited)</param>
    public void AdjustWlan(string entityId, bool? state = null, bool? closed = null, string? ssid = null, string? password = null, bool? lanaccess = null, bool? syncNode = null, bool? bwEnabled = null, long? bwDl = null, long? bwUl = null, long? expire = null)
    {
        _haContext.CallService("asusrouter", "adjust_wlan", null, new AsusrouterAdjustWlanParameters { EntityId = entityId, State = state, Closed = closed, Ssid = ssid, Password = password, Lanaccess = lanaccess, SyncNode = syncNode, BwEnabled = bwEnabled, BwDl = bwDl, BwUl = bwUl, Expire = expire });
    }

    ///<summary>Add / change device internet access using parental control feature of the router. Please, refer to the documentation for the additional possible parameters</summary>
    public void DeviceInternetAccess(AsusrouterDeviceInternetAccessParameters data)
    {
        _haContext.CallService("asusrouter", "device_internet_access", null, data);
    }

    ///<summary>Add / change device internet access using parental control feature of the router. Please, refer to the documentation for the additional possible parameters</summary>
    ///<param name="entities">Select device to add / change internet access settings</param>
    ///<param name="state">State of parental control</param>
    public void DeviceInternetAccess(string entities, object state)
    {
        _haContext.CallService("asusrouter", "device_internet_access", null, new AsusrouterDeviceInternetAccessParameters { Entities = entities, State = state });
    }

    ///<summary>This service allows setting / changing / removing port forwarding rules</summary>
    public void PortForwarding(AsusrouterPortForwardingParameters data)
    {
        _haContext.CallService("asusrouter", "port_forwarding", null, data);
    }

    ///<summary>This service allows setting / changing / removing port forwarding rules</summary>
    ///<param name="action">Rule action</param>
    ///<param name="ip">IP address of a device in your local network</param>
    ///<param name="protocol">Connection protocol</param>
    ///<param name="port">Port on your local device</param>
    ///<param name="ipExternal">To be used if access should be allowed only from a single external IP address</param>
    ///<param name="portExternal">External port(s) for connection. Can be single ports separated with comma `,`, ranges using colon `:`, or their combinations</param>
    ///<param name="name">You can provide a rule name to be used in the list of port forwarding rules</param>
    public void PortForwarding(object action, string ip, object protocol, string portExternal, long? port = null, string? ipExternal = null, string? name = null)
    {
        _haContext.CallService("asusrouter", "port_forwarding", null, new AsusrouterPortForwardingParameters { Action = action, Ip = ip, Protocol = protocol, Port = port, IpExternal = ipExternal, PortExternal = portExternal, Name = name });
    }

    ///<summary>This service allows removing device_tracker entities. Please, keep in mind, when run, the service will remove selected trackers from watching and will allow you to remove the entities manually.</summary>
    public void RemoveTrackers(AsusrouterRemoveTrackersParameters data)
    {
        _haContext.CallService("asusrouter", "remove_trackers", null, data);
    }

    ///<summary>This service allows removing device_tracker entities. Please, keep in mind, when run, the service will remove selected trackers from watching and will allow you to remove the entities manually.</summary>
    ///<param name="entities">Entities to remove</param>
    public void RemoveTrackers(string entities)
    {
        _haContext.CallService("asusrouter", "remove_trackers", null, new AsusrouterRemoveTrackersParameters { Entities = entities });
    }
}

public partial record AsusrouterAdjustWlanParameters
{
    ///<summary>WLAN entity</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Off / On</summary>
    [JsonPropertyName("state")]
    public bool? State { get; init; }

    ///<summary>Hide the network SSID</summary>
    [JsonPropertyName("closed")]
    public bool? Closed { get; init; }

    ///<summary>WLAN name</summary>
    [JsonPropertyName("ssid")]
    public string? Ssid { get; init; }

    ///<summary>WLAN password</summary>
    [JsonPropertyName("password")]
    public string? Password { get; init; }

    ///<summary>(Guest only) Allow LAN access</summary>
    [JsonPropertyName("lanaccess")]
    public bool? Lanaccess { get; init; }

    ///<summary>(Guest only) Synchronize across all AiMesh nodes. When selected, guest network is created on all the nodes. When not selected - guest network is created only on the main router</summary>
    [JsonPropertyName("sync_node")]
    public bool? SyncNode { get; init; }

    ///<summary>(Guest only) Limit bandwidth per connected device</summary>
    [JsonPropertyName("bw_enabled")]
    public bool? BwEnabled { get; init; }

    ///<summary>(Guest only) Limit download bandwidth per connected device (0 = unlimited)</summary>
    [JsonPropertyName("bw_dl")]
    public long? BwDl { get; init; }

    ///<summary>(Guest only) Limit upload bandwidth per connected device (0 = unlimited)</summary>
    [JsonPropertyName("bw_ul")]
    public long? BwUl { get; init; }

    ///<summary>(Guest only) Set a time for which network will be active (0 = unlimited)</summary>
    [JsonPropertyName("expire")]
    public long? Expire { get; init; }
}

public partial record AsusrouterDeviceInternetAccessParameters
{
    ///<summary>Select device to add / change internet access settings</summary>
    [JsonPropertyName("entities")]
    public string? Entities { get; init; }

    ///<summary>State of parental control</summary>
    [JsonPropertyName("state")]
    public object? State { get; init; }
}

public partial record AsusrouterPortForwardingParameters
{
    ///<summary>Rule action</summary>
    [JsonPropertyName("action")]
    public object? Action { get; init; }

    ///<summary>IP address of a device in your local network</summary>
    [JsonPropertyName("ip")]
    public string? Ip { get; init; }

    ///<summary>Connection protocol</summary>
    [JsonPropertyName("protocol")]
    public object? Protocol { get; init; }

    ///<summary>Port on your local device</summary>
    [JsonPropertyName("port")]
    public long? Port { get; init; }

    ///<summary>To be used if access should be allowed only from a single external IP address</summary>
    [JsonPropertyName("ip_external")]
    public string? IpExternal { get; init; }

    ///<summary>External port(s) for connection. Can be single ports separated with comma `,`, ranges using colon `:`, or their combinations</summary>
    [JsonPropertyName("port_external")]
    public string? PortExternal { get; init; }

    ///<summary>You can provide a rule name to be used in the list of port forwarding rules</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }
}

public partial record AsusrouterRemoveTrackersParameters
{
    ///<summary>Entities to remove</summary>
    [JsonPropertyName("entities")]
    public string? Entities { get; init; }
}

public partial class AutomationServices
{
    private readonly IHaContext _haContext;
    public AutomationServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads the automation configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("automation", "reload", null);
    }

    ///<summary>Toggles (enable / disable) an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("automation", "toggle", target);
    }

    ///<summary>Triggers the actions of an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void Trigger(ServiceTarget target, AutomationTriggerParameters data)
    {
        _haContext.CallService("automation", "trigger", target, data);
    }

    ///<summary>Triggers the actions of an automation.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="skipCondition">Defines whether or not the conditions will be skipped.</param>
    public void Trigger(ServiceTarget target, bool? skipCondition = null)
    {
        _haContext.CallService("automation", "trigger", target, new AutomationTriggerParameters { SkipCondition = skipCondition });
    }

    ///<summary>Disables an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, AutomationTurnOffParameters data)
    {
        _haContext.CallService("automation", "turn_off", target, data);
    }

    ///<summary>Disables an automation.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="stopActions">Stops currently running actions.</param>
    public void TurnOff(ServiceTarget target, bool? stopActions = null)
    {
        _haContext.CallService("automation", "turn_off", target, new AutomationTurnOffParameters { StopActions = stopActions });
    }

    ///<summary>Enables an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("automation", "turn_on", target);
    }
}

public partial record AutomationTriggerParameters
{
    ///<summary>Defines whether or not the conditions will be skipped.</summary>
    [JsonPropertyName("skip_condition")]
    public bool? SkipCondition { get; init; }
}

public partial record AutomationTurnOffParameters
{
    ///<summary>Stops currently running actions.</summary>
    [JsonPropertyName("stop_actions")]
    public bool? StopActions { get; init; }
}

public partial class BlueprintServices
{
    private readonly IHaContext _haContext;
    public BlueprintServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Import a blueprint.</summary>
    public void Import(BlueprintImportParameters data)
    {
        _haContext.CallService("blueprint", "import", null, data);
    }

    ///<summary>Import a blueprint.</summary>
    ///<param name="url">The URL to import the blueprint from.</param>
    public void Import(string url)
    {
        _haContext.CallService("blueprint", "import", null, new BlueprintImportParameters { Url = url });
    }
}

public partial record BlueprintImportParameters
{
    ///<summary>The URL to import the blueprint from.</summary>
    [JsonPropertyName("url")]
    public string? Url { get; init; }
}

public partial class ButtonServices
{
    private readonly IHaContext _haContext;
    public ButtonServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Press the button entity.</summary>
    ///<param name="target">The target for this service call</param>
    public void Press(ServiceTarget target)
    {
        _haContext.CallService("button", "press", target);
    }
}

public partial class CalendarServices
{
    private readonly IHaContext _haContext;
    public CalendarServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Adds a new calendar event.</summary>
    ///<param name="target">The target for this service call</param>
    public void CreateEvent(ServiceTarget target, CalendarCreateEventParameters data)
    {
        _haContext.CallService("calendar", "create_event", target, data);
    }

    ///<summary>Adds a new calendar event.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="summary">Defines the short summary or subject for the event. eg: Department Party</param>
    ///<param name="description">A more complete description of the event than the one provided by the summary. eg: Meeting to provide technical review for &apos;Phoenix&apos; design.</param>
    ///<param name="startDateTime">The date and time the event should start. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">The date and time the event should end. eg: 2022-03-22 22:00:00</param>
    ///<param name="startDate">The date the all-day event should start. eg: 2022-03-22</param>
    ///<param name="endDate">The date the all-day event should end (exclusive). eg: 2022-03-23</param>
    ///<param name="in">Days or weeks that you want to create the event in. eg: {&quot;days&quot;: 2} or {&quot;weeks&quot;: 2}</param>
    ///<param name="location">The location of the event. eg: Conference Room - F123, Bldg. 002</param>
    public void CreateEvent(ServiceTarget target, string summary, string? description = null, object? startDateTime = null, object? endDateTime = null, object? startDate = null, object? endDate = null, object? @in = null, string? location = null)
    {
        _haContext.CallService("calendar", "create_event", target, new CalendarCreateEventParameters { Summary = summary, Description = description, StartDateTime = startDateTime, EndDateTime = endDateTime, StartDate = startDate, EndDate = endDate, In = @in, Location = location });
    }

    ///<summary>Lists events on a calendar within a time range.</summary>
    ///<param name="target">The target for this service call</param>
    public void ListEvents(ServiceTarget target, CalendarListEventsParameters data)
    {
        _haContext.CallService("calendar", "list_events", target, data);
    }

    ///<summary>Lists events on a calendar within a time range.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="startDateTime">Returns active events after this time (exclusive). When not set, defaults to now. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">Returns active events before this time (exclusive). Cannot be used with &apos;duration&apos;. eg: 2022-03-22 22:00:00</param>
    ///<param name="duration">Returns active events from start_date_time until the specified duration.</param>
    public void ListEvents(ServiceTarget target, object? startDateTime = null, object? endDateTime = null, object? duration = null)
    {
        _haContext.CallService("calendar", "list_events", target, new CalendarListEventsParameters { StartDateTime = startDateTime, EndDateTime = endDateTime, Duration = duration });
    }
}

public partial record CalendarCreateEventParameters
{
    ///<summary>Defines the short summary or subject for the event. eg: Department Party</summary>
    [JsonPropertyName("summary")]
    public string? Summary { get; init; }

    ///<summary>A more complete description of the event than the one provided by the summary. eg: Meeting to provide technical review for &apos;Phoenix&apos; design.</summary>
    [JsonPropertyName("description")]
    public string? Description { get; init; }

    ///<summary>The date and time the event should start. eg: 2022-03-22 20:00:00</summary>
    [JsonPropertyName("start_date_time")]
    public object? StartDateTime { get; init; }

    ///<summary>The date and time the event should end. eg: 2022-03-22 22:00:00</summary>
    [JsonPropertyName("end_date_time")]
    public object? EndDateTime { get; init; }

    ///<summary>The date the all-day event should start. eg: 2022-03-22</summary>
    [JsonPropertyName("start_date")]
    public object? StartDate { get; init; }

    ///<summary>The date the all-day event should end (exclusive). eg: 2022-03-23</summary>
    [JsonPropertyName("end_date")]
    public object? EndDate { get; init; }

    ///<summary>Days or weeks that you want to create the event in. eg: {&quot;days&quot;: 2} or {&quot;weeks&quot;: 2}</summary>
    [JsonPropertyName("in")]
    public object? In { get; init; }

    ///<summary>The location of the event. eg: Conference Room - F123, Bldg. 002</summary>
    [JsonPropertyName("location")]
    public string? Location { get; init; }
}

public partial record CalendarListEventsParameters
{
    ///<summary>Returns active events after this time (exclusive). When not set, defaults to now. eg: 2022-03-22 20:00:00</summary>
    [JsonPropertyName("start_date_time")]
    public object? StartDateTime { get; init; }

    ///<summary>Returns active events before this time (exclusive). Cannot be used with &apos;duration&apos;. eg: 2022-03-22 22:00:00</summary>
    [JsonPropertyName("end_date_time")]
    public object? EndDateTime { get; init; }

    ///<summary>Returns active events from start_date_time until the specified duration.</summary>
    [JsonPropertyName("duration")]
    public object? Duration { get; init; }
}

public partial class CameraServices
{
    private readonly IHaContext _haContext;
    public CameraServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Disables the motion detection.</summary>
    ///<param name="target">The target for this service call</param>
    public void DisableMotionDetection(ServiceTarget target)
    {
        _haContext.CallService("camera", "disable_motion_detection", target);
    }

    ///<summary>Enables the motion detection.</summary>
    ///<param name="target">The target for this service call</param>
    public void EnableMotionDetection(ServiceTarget target)
    {
        _haContext.CallService("camera", "enable_motion_detection", target);
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void PlayStream(ServiceTarget target, CameraPlayStreamParameters data)
    {
        _haContext.CallService("camera", "play_stream", target, data);
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="mediaPlayer">Media players to stream to.</param>
    ///<param name="format">Stream format supported by the media player.</param>
    public void PlayStream(ServiceTarget target, string mediaPlayer, object? format = null)
    {
        _haContext.CallService("camera", "play_stream", target, new CameraPlayStreamParameters { MediaPlayer = mediaPlayer, Format = format });
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    ///<param name="target">The target for this service call</param>
    public void Record(ServiceTarget target, CameraRecordParameters data)
    {
        _haContext.CallService("camera", "record", target, data);
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="filename">Template of a filename. Variable available is `entity_id`. Must be mp4. eg: /tmp/snapshot_{{ entity_id.name }}.mp4</param>
    ///<param name="duration">Planned duration of the recording. The actual duration may vary.</param>
    ///<param name="lookback">Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary.</param>
    public void Record(ServiceTarget target, string filename, long? duration = null, long? lookback = null)
    {
        _haContext.CallService("camera", "record", target, new CameraRecordParameters { Filename = filename, Duration = duration, Lookback = lookback });
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    ///<param name="target">The target for this service call</param>
    public void Snapshot(ServiceTarget target, CameraSnapshotParameters data)
    {
        _haContext.CallService("camera", "snapshot", target, data);
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="filename">Template of a filename. Variable available is `entity_id`. eg: /tmp/snapshot_{{ entity_id.name }}.jpg</param>
    public void Snapshot(ServiceTarget target, string filename)
    {
        _haContext.CallService("camera", "snapshot", target, new CameraSnapshotParameters { Filename = filename });
    }

    ///<summary>Turns off the camera.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("camera", "turn_off", target);
    }

    ///<summary>Turns on the camera.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("camera", "turn_on", target);
    }
}

public partial record CameraPlayStreamParameters
{
    ///<summary>Media players to stream to.</summary>
    [JsonPropertyName("media_player")]
    public string? MediaPlayer { get; init; }

    ///<summary>Stream format supported by the media player.</summary>
    [JsonPropertyName("format")]
    public object? Format { get; init; }
}

public partial record CameraRecordParameters
{
    ///<summary>Template of a filename. Variable available is `entity_id`. Must be mp4. eg: /tmp/snapshot_{{ entity_id.name }}.mp4</summary>
    [JsonPropertyName("filename")]
    public string? Filename { get; init; }

    ///<summary>Planned duration of the recording. The actual duration may vary.</summary>
    [JsonPropertyName("duration")]
    public long? Duration { get; init; }

    ///<summary>Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary.</summary>
    [JsonPropertyName("lookback")]
    public long? Lookback { get; init; }
}

public partial record CameraSnapshotParameters
{
    ///<summary>Template of a filename. Variable available is `entity_id`. eg: /tmp/snapshot_{{ entity_id.name }}.jpg</summary>
    [JsonPropertyName("filename")]
    public string? Filename { get; init; }
}

public partial class CastServices
{
    private readonly IHaContext _haContext;
    public CastServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Shows a dashboard view on a Chromecast device.</summary>
    public void ShowLovelaceView(CastShowLovelaceViewParameters data)
    {
        _haContext.CallService("cast", "show_lovelace_view", null, data);
    }

    ///<summary>Shows a dashboard view on a Chromecast device.</summary>
    ///<param name="entityId">Media player entity to show the dashboard view on.</param>
    ///<param name="dashboardPath">The URL path of the dashboard to show. eg: lovelace-cast</param>
    ///<param name="viewPath">The path of the dashboard view to show. eg: downstairs</param>
    public void ShowLovelaceView(string entityId, string dashboardPath, string? viewPath = null)
    {
        _haContext.CallService("cast", "show_lovelace_view", null, new CastShowLovelaceViewParameters { EntityId = entityId, DashboardPath = dashboardPath, ViewPath = viewPath });
    }
}

public partial record CastShowLovelaceViewParameters
{
    ///<summary>Media player entity to show the dashboard view on.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>The URL path of the dashboard to show. eg: lovelace-cast</summary>
    [JsonPropertyName("dashboard_path")]
    public string? DashboardPath { get; init; }

    ///<summary>The path of the dashboard view to show. eg: downstairs</summary>
    [JsonPropertyName("view_path")]
    public string? ViewPath { get; init; }
}

public partial class ClimateServices
{
    private readonly IHaContext _haContext;
    public ClimateServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Turns auxiliary heater on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetAuxHeat(ServiceTarget target, ClimateSetAuxHeatParameters data)
    {
        _haContext.CallService("climate", "set_aux_heat", target, data);
    }

    ///<summary>Turns auxiliary heater on/off.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="auxHeat">New value of auxiliary heater.</param>
    public void SetAuxHeat(ServiceTarget target, bool auxHeat)
    {
        _haContext.CallService("climate", "set_aux_heat", target, new ClimateSetAuxHeatParameters { AuxHeat = auxHeat });
    }

    ///<summary>Sets fan operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetFanMode(ServiceTarget target, ClimateSetFanModeParameters data)
    {
        _haContext.CallService("climate", "set_fan_mode", target, data);
    }

    ///<summary>Sets fan operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="fanMode">Fan operation mode. eg: low</param>
    public void SetFanMode(ServiceTarget target, string fanMode)
    {
        _haContext.CallService("climate", "set_fan_mode", target, new ClimateSetFanModeParameters { FanMode = fanMode });
    }

    ///<summary>Sets target humidity.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetHumidity(ServiceTarget target, ClimateSetHumidityParameters data)
    {
        _haContext.CallService("climate", "set_humidity", target, data);
    }

    ///<summary>Sets target humidity.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="humidity">Target humidity.</param>
    public void SetHumidity(ServiceTarget target, long humidity)
    {
        _haContext.CallService("climate", "set_humidity", target, new ClimateSetHumidityParameters { Humidity = humidity });
    }

    ///<summary>Sets HVAC operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetHvacMode(ServiceTarget target, ClimateSetHvacModeParameters data)
    {
        _haContext.CallService("climate", "set_hvac_mode", target, data);
    }

    ///<summary>Sets HVAC operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public void SetHvacMode(ServiceTarget target, object? hvacMode = null)
    {
        _haContext.CallService("climate", "set_hvac_mode", target, new ClimateSetHvacModeParameters { HvacMode = hvacMode });
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetPresetMode(ServiceTarget target, ClimateSetPresetModeParameters data)
    {
        _haContext.CallService("climate", "set_preset_mode", target, data);
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="presetMode">Preset mode. eg: away</param>
    public void SetPresetMode(ServiceTarget target, string presetMode)
    {
        _haContext.CallService("climate", "set_preset_mode", target, new ClimateSetPresetModeParameters { PresetMode = presetMode });
    }

    ///<summary>Sets swing operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetSwingMode(ServiceTarget target, ClimateSetSwingModeParameters data)
    {
        _haContext.CallService("climate", "set_swing_mode", target, data);
    }

    ///<summary>Sets swing operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="swingMode">Swing operation mode. eg: horizontal</param>
    public void SetSwingMode(ServiceTarget target, string swingMode)
    {
        _haContext.CallService("climate", "set_swing_mode", target, new ClimateSetSwingModeParameters { SwingMode = swingMode });
    }

    ///<summary>Sets target temperature.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetTemperature(ServiceTarget target, ClimateSetTemperatureParameters data)
    {
        _haContext.CallService("climate", "set_temperature", target, data);
    }

    ///<summary>Sets target temperature.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="temperature">Target temperature.</param>
    ///<param name="targetTempHigh">High target temperature.</param>
    ///<param name="targetTempLow">Low target temperature.</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public void SetTemperature(ServiceTarget target, double? temperature = null, double? targetTempHigh = null, double? targetTempLow = null, object? hvacMode = null)
    {
        _haContext.CallService("climate", "set_temperature", target, new ClimateSetTemperatureParameters { Temperature = temperature, TargetTempHigh = targetTempHigh, TargetTempLow = targetTempLow, HvacMode = hvacMode });
    }

    ///<summary>Turns climate device off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("climate", "turn_off", target);
    }

    ///<summary>Turns climate device on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("climate", "turn_on", target);
    }
}

public partial record ClimateSetAuxHeatParameters
{
    ///<summary>New value of auxiliary heater.</summary>
    [JsonPropertyName("aux_heat")]
    public bool? AuxHeat { get; init; }
}

public partial record ClimateSetFanModeParameters
{
    ///<summary>Fan operation mode. eg: low</summary>
    [JsonPropertyName("fan_mode")]
    public string? FanMode { get; init; }
}

public partial record ClimateSetHumidityParameters
{
    ///<summary>Target humidity.</summary>
    [JsonPropertyName("humidity")]
    public long? Humidity { get; init; }
}

public partial record ClimateSetHvacModeParameters
{
    ///<summary>HVAC operation mode.</summary>
    [JsonPropertyName("hvac_mode")]
    public object? HvacMode { get; init; }
}

public partial record ClimateSetPresetModeParameters
{
    ///<summary>Preset mode. eg: away</summary>
    [JsonPropertyName("preset_mode")]
    public string? PresetMode { get; init; }
}

public partial record ClimateSetSwingModeParameters
{
    ///<summary>Swing operation mode. eg: horizontal</summary>
    [JsonPropertyName("swing_mode")]
    public string? SwingMode { get; init; }
}

public partial record ClimateSetTemperatureParameters
{
    ///<summary>Target temperature.</summary>
    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    ///<summary>High target temperature.</summary>
    [JsonPropertyName("target_temp_high")]
    public double? TargetTempHigh { get; init; }

    ///<summary>Low target temperature.</summary>
    [JsonPropertyName("target_temp_low")]
    public double? TargetTempLow { get; init; }

    ///<summary>HVAC operation mode.</summary>
    [JsonPropertyName("hvac_mode")]
    public object? HvacMode { get; init; }
}

public partial class CloudServices
{
    private readonly IHaContext _haContext;
    public CloudServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Makes the instance UI accessible from outside of the local network by using Home Assistant Cloud.</summary>
    public void RemoteConnect()
    {
        _haContext.CallService("cloud", "remote_connect", null);
    }

    ///<summary>Disconnects the Home Assistant UI from the Home Assistant Cloud. You will no longer be able to access your Home Assistant instance from outside your local network.</summary>
    public void RemoteDisconnect()
    {
        _haContext.CallService("cloud", "remote_disconnect", null);
    }
}

public partial class ConversationServices
{
    private readonly IHaContext _haContext;
    public ConversationServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Launches a conversation from a transcribed text.</summary>
    public void Process(ConversationProcessParameters data)
    {
        _haContext.CallService("conversation", "process", null, data);
    }

    ///<summary>Launches a conversation from a transcribed text.</summary>
    ///<param name="text">Transcribed text input. eg: Turn all lights on</param>
    ///<param name="language">Language of text. Defaults to server language. eg: NL</param>
    ///<param name="agentId">Conversation agent to process your request. The conversation agent is the brains of your assistant. It processes the incoming text commands. eg: homeassistant</param>
    public void Process(string text, string? language = null, object? agentId = null)
    {
        _haContext.CallService("conversation", "process", null, new ConversationProcessParameters { Text = text, Language = language, AgentId = agentId });
    }

    public void Reload()
    {
        _haContext.CallService("conversation", "reload", null);
    }
}

public partial record ConversationProcessParameters
{
    ///<summary>Transcribed text input. eg: Turn all lights on</summary>
    [JsonPropertyName("text")]
    public string? Text { get; init; }

    ///<summary>Language of text. Defaults to server language. eg: NL</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary>Conversation agent to process your request. The conversation agent is the brains of your assistant. It processes the incoming text commands. eg: homeassistant</summary>
    [JsonPropertyName("agent_id")]
    public object? AgentId { get; init; }
}

public partial class CounterServices
{
    private readonly IHaContext _haContext;
    public CounterServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public void Configure()
    {
        _haContext.CallService("counter", "configure", null);
    }

    ///<summary>Decrements a counter.</summary>
    ///<param name="target">The target for this service call</param>
    public void Decrement(ServiceTarget target)
    {
        _haContext.CallService("counter", "decrement", target);
    }

    ///<summary>Increments a counter.</summary>
    ///<param name="target">The target for this service call</param>
    public void Increment(ServiceTarget target)
    {
        _haContext.CallService("counter", "increment", target);
    }

    ///<summary>Resets a counter.</summary>
    ///<param name="target">The target for this service call</param>
    public void Reset(ServiceTarget target)
    {
        _haContext.CallService("counter", "reset", target);
    }

    ///<summary>Sets the counter value.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, CounterSetValueParameters data)
    {
        _haContext.CallService("counter", "set_value", target, data);
    }

    ///<summary>Sets the counter value.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="value">The new counter value the entity should be set to.</param>
    public void SetValue(ServiceTarget target, long value)
    {
        _haContext.CallService("counter", "set_value", target, new CounterSetValueParameters { Value = value });
    }
}

public partial record CounterSetValueParameters
{
    ///<summary>The new counter value the entity should be set to.</summary>
    [JsonPropertyName("value")]
    public long? Value { get; init; }
}

public partial class CoverServices
{
    private readonly IHaContext _haContext;
    public CoverServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Closes a cover.</summary>
    ///<param name="target">The target for this service call</param>
    public void CloseCover(ServiceTarget target)
    {
        _haContext.CallService("cover", "close_cover", target);
    }

    ///<summary>Tilts a cover to close.</summary>
    ///<param name="target">The target for this service call</param>
    public void CloseCoverTilt(ServiceTarget target)
    {
        _haContext.CallService("cover", "close_cover_tilt", target);
    }

    ///<summary>Opens a cover.</summary>
    ///<param name="target">The target for this service call</param>
    public void OpenCover(ServiceTarget target)
    {
        _haContext.CallService("cover", "open_cover", target);
    }

    ///<summary>Tilts a cover open.</summary>
    ///<param name="target">The target for this service call</param>
    public void OpenCoverTilt(ServiceTarget target)
    {
        _haContext.CallService("cover", "open_cover_tilt", target);
    }

    ///<summary>Moves a cover to a specific position.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetCoverPosition(ServiceTarget target, CoverSetCoverPositionParameters data)
    {
        _haContext.CallService("cover", "set_cover_position", target, data);
    }

    ///<summary>Moves a cover to a specific position.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="position">Target position.</param>
    public void SetCoverPosition(ServiceTarget target, long position)
    {
        _haContext.CallService("cover", "set_cover_position", target, new CoverSetCoverPositionParameters { Position = position });
    }

    ///<summary>Moves a cover tilt to a specific position.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetCoverTiltPosition(ServiceTarget target, CoverSetCoverTiltPositionParameters data)
    {
        _haContext.CallService("cover", "set_cover_tilt_position", target, data);
    }

    ///<summary>Moves a cover tilt to a specific position.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="tiltPosition">Target tilt positition.</param>
    public void SetCoverTiltPosition(ServiceTarget target, long tiltPosition)
    {
        _haContext.CallService("cover", "set_cover_tilt_position", target, new CoverSetCoverTiltPositionParameters { TiltPosition = tiltPosition });
    }

    ///<summary>Stops the cover movement.</summary>
    ///<param name="target">The target for this service call</param>
    public void StopCover(ServiceTarget target)
    {
        _haContext.CallService("cover", "stop_cover", target);
    }

    ///<summary>Stops a tilting cover movement.</summary>
    ///<param name="target">The target for this service call</param>
    public void StopCoverTilt(ServiceTarget target)
    {
        _haContext.CallService("cover", "stop_cover_tilt", target);
    }

    ///<summary>Toggles a cover open/closed.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("cover", "toggle", target);
    }

    ///<summary>Toggles a cover tilt open/closed.</summary>
    ///<param name="target">The target for this service call</param>
    public void ToggleCoverTilt(ServiceTarget target)
    {
        _haContext.CallService("cover", "toggle_cover_tilt", target);
    }
}

public partial record CoverSetCoverPositionParameters
{
    ///<summary>Target position.</summary>
    [JsonPropertyName("position")]
    public long? Position { get; init; }
}

public partial record CoverSetCoverTiltPositionParameters
{
    ///<summary>Target tilt positition.</summary>
    [JsonPropertyName("tilt_position")]
    public long? TiltPosition { get; init; }
}

public partial class DeviceTrackerServices
{
    private readonly IHaContext _haContext;
    public DeviceTrackerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Records a seen tracked device.</summary>
    public void See(DeviceTrackerSeeParameters data)
    {
        _haContext.CallService("device_tracker", "see", null, data);
    }

    ///<summary>Records a seen tracked device.</summary>
    ///<param name="mac">MAC address of the device. eg: FF:FF:FF:FF:FF:FF</param>
    ///<param name="devId">ID of the device (find the ID in `known_devices.yaml`). eg: phonedave</param>
    ///<param name="hostName">Hostname of the device. eg: Dave</param>
    ///<param name="locationName">Name of the location where the device is located. The options are: `home`, `not_home`, or the name of the zone. eg: home</param>
    ///<param name="gps">GPS coordinates where the device is located, specified by latitude and longitude (for example: [51.513845, -0.100539]). eg: [51.509802, -0.086692]</param>
    ///<param name="gpsAccuracy">Accuracy of the GPS coordinates.</param>
    ///<param name="battery">Battery level of the device.</param>
    public void See(string? mac = null, string? devId = null, string? hostName = null, string? locationName = null, object? gps = null, long? gpsAccuracy = null, long? battery = null)
    {
        _haContext.CallService("device_tracker", "see", null, new DeviceTrackerSeeParameters { Mac = mac, DevId = devId, HostName = hostName, LocationName = locationName, Gps = gps, GpsAccuracy = gpsAccuracy, Battery = battery });
    }
}

public partial record DeviceTrackerSeeParameters
{
    ///<summary>MAC address of the device. eg: FF:FF:FF:FF:FF:FF</summary>
    [JsonPropertyName("mac")]
    public string? Mac { get; init; }

    ///<summary>ID of the device (find the ID in `known_devices.yaml`). eg: phonedave</summary>
    [JsonPropertyName("dev_id")]
    public string? DevId { get; init; }

    ///<summary>Hostname of the device. eg: Dave</summary>
    [JsonPropertyName("host_name")]
    public string? HostName { get; init; }

    ///<summary>Name of the location where the device is located. The options are: `home`, `not_home`, or the name of the zone. eg: home</summary>
    [JsonPropertyName("location_name")]
    public string? LocationName { get; init; }

    ///<summary>GPS coordinates where the device is located, specified by latitude and longitude (for example: [51.513845, -0.100539]). eg: [51.509802, -0.086692]</summary>
    [JsonPropertyName("gps")]
    public object? Gps { get; init; }

    ///<summary>Accuracy of the GPS coordinates.</summary>
    [JsonPropertyName("gps_accuracy")]
    public long? GpsAccuracy { get; init; }

    ///<summary>Battery level of the device.</summary>
    [JsonPropertyName("battery")]
    public long? Battery { get; init; }
}

public partial class DwainsDashboardServices
{
    private readonly IHaContext _haContext;
    public DwainsDashboardServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Show a notification in the frontend.</summary>
    public void NotificationCreate(DwainsDashboardNotificationCreateParameters data)
    {
        _haContext.CallService("dwains_dashboard", "notification_create", null, data);
    }

    ///<summary>Show a notification in the frontend.</summary>
    ///<param name="message">Message body of the notification. [Templates accepted] eg: Dishwasher is done! :D</param>
    ///<param name="notificationId">Target ID of the notification, will replace a notification with the same Id. [Optional] eg: 1234</param>
    public void NotificationCreate(object? message = null, object? notificationId = null)
    {
        _haContext.CallService("dwains_dashboard", "notification_create", null, new DwainsDashboardNotificationCreateParameters { Message = message, NotificationId = notificationId });
    }

    ///<summary>Remove a notification from the frontend.</summary>
    public void NotificationDismiss(DwainsDashboardNotificationDismissParameters data)
    {
        _haContext.CallService("dwains_dashboard", "notification_dismiss", null, data);
    }

    ///<summary>Remove a notification from the frontend.</summary>
    ///<param name="notificationId">Target ID of the notification, which should be removed. [Required] eg: 1234</param>
    public void NotificationDismiss(object? notificationId = null)
    {
        _haContext.CallService("dwains_dashboard", "notification_dismiss", null, new DwainsDashboardNotificationDismissParameters { NotificationId = notificationId });
    }

    ///<summary>Mark a notification read.</summary>
    public void NotificationMarkRead(DwainsDashboardNotificationMarkReadParameters data)
    {
        _haContext.CallService("dwains_dashboard", "notification_mark_read", null, data);
    }

    ///<summary>Mark a notification read.</summary>
    ///<param name="notificationId">Target ID of the notification, which should be mark read. [Required] eg: 1234</param>
    public void NotificationMarkRead(object? notificationId = null)
    {
        _haContext.CallService("dwains_dashboard", "notification_mark_read", null, new DwainsDashboardNotificationMarkReadParameters { NotificationId = notificationId });
    }

    ///<summary>Reload dashboard configuration from Dwains dashboard</summary>
    public void Reload()
    {
        _haContext.CallService("dwains_dashboard", "reload", null);
    }
}

public partial record DwainsDashboardNotificationCreateParameters
{
    ///<summary>Message body of the notification. [Templates accepted] eg: Dishwasher is done! :D</summary>
    [JsonPropertyName("message")]
    public object? Message { get; init; }

    ///<summary>Target ID of the notification, will replace a notification with the same Id. [Optional] eg: 1234</summary>
    [JsonPropertyName("notification_id")]
    public object? NotificationId { get; init; }
}

public partial record DwainsDashboardNotificationDismissParameters
{
    ///<summary>Target ID of the notification, which should be removed. [Required] eg: 1234</summary>
    [JsonPropertyName("notification_id")]
    public object? NotificationId { get; init; }
}

public partial record DwainsDashboardNotificationMarkReadParameters
{
    ///<summary>Target ID of the notification, which should be mark read. [Required] eg: 1234</summary>
    [JsonPropertyName("notification_id")]
    public object? NotificationId { get; init; }
}

public partial class FanServices
{
    private readonly IHaContext _haContext;
    public FanServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Decreases the speed of the fan.</summary>
    ///<param name="target">The target for this service call</param>
    public void DecreaseSpeed(ServiceTarget target, FanDecreaseSpeedParameters data)
    {
        _haContext.CallService("fan", "decrease_speed", target, data);
    }

    ///<summary>Decreases the speed of the fan.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="percentageStep">Decreases the speed by a percentage step.</param>
    public void DecreaseSpeed(ServiceTarget target, long? percentageStep = null)
    {
        _haContext.CallService("fan", "decrease_speed", target, new FanDecreaseSpeedParameters { PercentageStep = percentageStep });
    }

    ///<summary>Increases the speed of the fan.</summary>
    ///<param name="target">The target for this service call</param>
    public void IncreaseSpeed(ServiceTarget target, FanIncreaseSpeedParameters data)
    {
        _haContext.CallService("fan", "increase_speed", target, data);
    }

    ///<summary>Increases the speed of the fan.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="percentageStep">Increases the speed by a percentage step.</param>
    public void IncreaseSpeed(ServiceTarget target, long? percentageStep = null)
    {
        _haContext.CallService("fan", "increase_speed", target, new FanIncreaseSpeedParameters { PercentageStep = percentageStep });
    }

    ///<summary>Controls oscillatation of the fan.</summary>
    ///<param name="target">The target for this service call</param>
    public void Oscillate(ServiceTarget target, FanOscillateParameters data)
    {
        _haContext.CallService("fan", "oscillate", target, data);
    }

    ///<summary>Controls oscillatation of the fan.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="oscillating">Turn on/off oscillation.</param>
    public void Oscillate(ServiceTarget target, bool oscillating)
    {
        _haContext.CallService("fan", "oscillate", target, new FanOscillateParameters { Oscillating = oscillating });
    }

    ///<summary>Sets the fan rotation direction.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetDirection(ServiceTarget target, FanSetDirectionParameters data)
    {
        _haContext.CallService("fan", "set_direction", target, data);
    }

    ///<summary>Sets the fan rotation direction.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="direction">Direction to rotate.</param>
    public void SetDirection(ServiceTarget target, object direction)
    {
        _haContext.CallService("fan", "set_direction", target, new FanSetDirectionParameters { Direction = direction });
    }

    ///<summary>Sets the fan speed.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetPercentage(ServiceTarget target, FanSetPercentageParameters data)
    {
        _haContext.CallService("fan", "set_percentage", target, data);
    }

    ///<summary>Sets the fan speed.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="percentage">Speed of the fan.</param>
    public void SetPercentage(ServiceTarget target, long percentage)
    {
        _haContext.CallService("fan", "set_percentage", target, new FanSetPercentageParameters { Percentage = percentage });
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetPresetMode(ServiceTarget target, FanSetPresetModeParameters data)
    {
        _haContext.CallService("fan", "set_preset_mode", target, data);
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="presetMode">Preset mode. eg: auto</param>
    public void SetPresetMode(ServiceTarget target, string presetMode)
    {
        _haContext.CallService("fan", "set_preset_mode", target, new FanSetPresetModeParameters { PresetMode = presetMode });
    }

    ///<summary>Toggles the fan on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("fan", "toggle", target);
    }

    ///<summary>Turns fan off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("fan", "turn_off", target);
    }

    ///<summary>Turns fan on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, FanTurnOnParameters data)
    {
        _haContext.CallService("fan", "turn_on", target, data);
    }

    ///<summary>Turns fan on.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="percentage">Speed of the fan.</param>
    ///<param name="presetMode">Preset mode. eg: auto</param>
    public void TurnOn(ServiceTarget target, long? percentage = null, string? presetMode = null)
    {
        _haContext.CallService("fan", "turn_on", target, new FanTurnOnParameters { Percentage = percentage, PresetMode = presetMode });
    }
}

public partial record FanDecreaseSpeedParameters
{
    ///<summary>Decreases the speed by a percentage step.</summary>
    [JsonPropertyName("percentage_step")]
    public long? PercentageStep { get; init; }
}

public partial record FanIncreaseSpeedParameters
{
    ///<summary>Increases the speed by a percentage step.</summary>
    [JsonPropertyName("percentage_step")]
    public long? PercentageStep { get; init; }
}

public partial record FanOscillateParameters
{
    ///<summary>Turn on/off oscillation.</summary>
    [JsonPropertyName("oscillating")]
    public bool? Oscillating { get; init; }
}

public partial record FanSetDirectionParameters
{
    ///<summary>Direction to rotate.</summary>
    [JsonPropertyName("direction")]
    public object? Direction { get; init; }
}

public partial record FanSetPercentageParameters
{
    ///<summary>Speed of the fan.</summary>
    [JsonPropertyName("percentage")]
    public long? Percentage { get; init; }
}

public partial record FanSetPresetModeParameters
{
    ///<summary>Preset mode. eg: auto</summary>
    [JsonPropertyName("preset_mode")]
    public string? PresetMode { get; init; }
}

public partial record FanTurnOnParameters
{
    ///<summary>Speed of the fan.</summary>
    [JsonPropertyName("percentage")]
    public long? Percentage { get; init; }

    ///<summary>Preset mode. eg: auto</summary>
    [JsonPropertyName("preset_mode")]
    public string? PresetMode { get; init; }
}

public partial class FfmpegServices
{
    private readonly IHaContext _haContext;
    public FfmpegServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sends a restart command to a ffmpeg based sensor.</summary>
    public void Restart(FfmpegRestartParameters data)
    {
        _haContext.CallService("ffmpeg", "restart", null, data);
    }

    ///<summary>Sends a restart command to a ffmpeg based sensor.</summary>
    ///<param name="entityId">Name of entity that will restart. Platform dependent.</param>
    public void Restart(string? entityId = null)
    {
        _haContext.CallService("ffmpeg", "restart", null, new FfmpegRestartParameters { EntityId = entityId });
    }

    ///<summary>Sends a start command to a ffmpeg based sensor.</summary>
    public void Start(FfmpegStartParameters data)
    {
        _haContext.CallService("ffmpeg", "start", null, data);
    }

    ///<summary>Sends a start command to a ffmpeg based sensor.</summary>
    ///<param name="entityId">Name of entity that will start. Platform dependent.</param>
    public void Start(string? entityId = null)
    {
        _haContext.CallService("ffmpeg", "start", null, new FfmpegStartParameters { EntityId = entityId });
    }

    ///<summary>Sends a stop command to a ffmpeg based sensor.</summary>
    public void Stop(FfmpegStopParameters data)
    {
        _haContext.CallService("ffmpeg", "stop", null, data);
    }

    ///<summary>Sends a stop command to a ffmpeg based sensor.</summary>
    ///<param name="entityId">Name of entity that will stop. Platform dependent.</param>
    public void Stop(string? entityId = null)
    {
        _haContext.CallService("ffmpeg", "stop", null, new FfmpegStopParameters { EntityId = entityId });
    }
}

public partial record FfmpegRestartParameters
{
    ///<summary>Name of entity that will restart. Platform dependent.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }
}

public partial record FfmpegStartParameters
{
    ///<summary>Name of entity that will start. Platform dependent.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }
}

public partial record FfmpegStopParameters
{
    ///<summary>Name of entity that will stop. Platform dependent.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }
}

public partial class FrontendServices
{
    private readonly IHaContext _haContext;
    public FrontendServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads themes from the YAML-configuration.</summary>
    public void ReloadThemes()
    {
        _haContext.CallService("frontend", "reload_themes", null);
    }

    ///<summary>Sets the default theme Home Assistant uses. Can be overridden by a user.</summary>
    public void SetTheme(FrontendSetThemeParameters data)
    {
        _haContext.CallService("frontend", "set_theme", null, data);
    }

    ///<summary>Sets the default theme Home Assistant uses. Can be overridden by a user.</summary>
    ///<param name="name">Name of a theme. eg: default</param>
    ///<param name="mode">Theme mode.</param>
    public void SetTheme(object name, object? mode = null)
    {
        _haContext.CallService("frontend", "set_theme", null, new FrontendSetThemeParameters { Name = name, Mode = mode });
    }
}

public partial record FrontendSetThemeParameters
{
    ///<summary>Name of a theme. eg: default</summary>
    [JsonPropertyName("name")]
    public object? Name { get; init; }

    ///<summary>Theme mode.</summary>
    [JsonPropertyName("mode")]
    public object? Mode { get; init; }
}

public partial class GoogleServices
{
    private readonly IHaContext _haContext;
    public GoogleServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Adds a new calendar event.</summary>
    public void AddEvent(GoogleAddEventParameters data)
    {
        _haContext.CallService("google", "add_event", null, data);
    }

    ///<summary>Adds a new calendar event.</summary>
    ///<param name="calendarId">The id of the calendar you want. eg: Your email</param>
    ///<param name="summary">Acts as the title of the event. eg: Bowling</param>
    ///<param name="description">The description of the event. Optional. eg: Birthday bowling</param>
    ///<param name="startDateTime">The date and time the event should start. eg: 2019-03-22 20:00:00</param>
    ///<param name="endDateTime">The date and time the event should end. eg: 2019-03-22 22:00:00</param>
    ///<param name="startDate">The date the whole day event should start. eg: 2019-03-10</param>
    ///<param name="endDate">The date the whole day event should end. eg: 2019-03-11</param>
    ///<param name="in">Days or weeks that you want to create the event in. eg: &quot;days&quot;: 2 or &quot;weeks&quot;: 2</param>
    public void AddEvent(string calendarId, string summary, string? description = null, string? startDateTime = null, string? endDateTime = null, string? startDate = null, string? endDate = null, object? @in = null)
    {
        _haContext.CallService("google", "add_event", null, new GoogleAddEventParameters { CalendarId = calendarId, Summary = summary, Description = description, StartDateTime = startDateTime, EndDateTime = endDateTime, StartDate = startDate, EndDate = endDate, In = @in });
    }

    ///<summary>Add a new calendar event.</summary>
    ///<param name="target">The target for this service call</param>
    public void CreateEvent(ServiceTarget target, GoogleCreateEventParameters data)
    {
        _haContext.CallService("google", "create_event", target, data);
    }

    ///<summary>Add a new calendar event.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="summary">Acts as the title of the event. eg: Bowling</param>
    ///<param name="description">The description of the event. Optional. eg: Birthday bowling</param>
    ///<param name="startDateTime">The date and time the event should start. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">The date and time the event should end. eg: 2022-03-22 22:00:00</param>
    ///<param name="startDate">The date the whole day event should start. eg: 2022-03-10</param>
    ///<param name="endDate">The date the whole day event should end. eg: 2022-03-11</param>
    ///<param name="in">Days or weeks that you want to create the event in. eg: &quot;days&quot;: 2 or &quot;weeks&quot;: 2</param>
    ///<param name="location">The location of the event. Optional. eg: Conference Room - F123, Bldg. 002</param>
    public void CreateEvent(ServiceTarget target, string summary, string? description = null, string? startDateTime = null, string? endDateTime = null, string? startDate = null, string? endDate = null, object? @in = null, string? location = null)
    {
        _haContext.CallService("google", "create_event", target, new GoogleCreateEventParameters { Summary = summary, Description = description, StartDateTime = startDateTime, EndDateTime = endDateTime, StartDate = startDate, EndDate = endDate, In = @in, Location = location });
    }
}

public partial record GoogleAddEventParameters
{
    ///<summary>The id of the calendar you want. eg: Your email</summary>
    [JsonPropertyName("calendar_id")]
    public string? CalendarId { get; init; }

    ///<summary>Acts as the title of the event. eg: Bowling</summary>
    [JsonPropertyName("summary")]
    public string? Summary { get; init; }

    ///<summary>The description of the event. Optional. eg: Birthday bowling</summary>
    [JsonPropertyName("description")]
    public string? Description { get; init; }

    ///<summary>The date and time the event should start. eg: 2019-03-22 20:00:00</summary>
    [JsonPropertyName("start_date_time")]
    public string? StartDateTime { get; init; }

    ///<summary>The date and time the event should end. eg: 2019-03-22 22:00:00</summary>
    [JsonPropertyName("end_date_time")]
    public string? EndDateTime { get; init; }

    ///<summary>The date the whole day event should start. eg: 2019-03-10</summary>
    [JsonPropertyName("start_date")]
    public string? StartDate { get; init; }

    ///<summary>The date the whole day event should end. eg: 2019-03-11</summary>
    [JsonPropertyName("end_date")]
    public string? EndDate { get; init; }

    ///<summary>Days or weeks that you want to create the event in. eg: &quot;days&quot;: 2 or &quot;weeks&quot;: 2</summary>
    [JsonPropertyName("in")]
    public object? In { get; init; }
}

public partial record GoogleCreateEventParameters
{
    ///<summary>Acts as the title of the event. eg: Bowling</summary>
    [JsonPropertyName("summary")]
    public string? Summary { get; init; }

    ///<summary>The description of the event. Optional. eg: Birthday bowling</summary>
    [JsonPropertyName("description")]
    public string? Description { get; init; }

    ///<summary>The date and time the event should start. eg: 2022-03-22 20:00:00</summary>
    [JsonPropertyName("start_date_time")]
    public string? StartDateTime { get; init; }

    ///<summary>The date and time the event should end. eg: 2022-03-22 22:00:00</summary>
    [JsonPropertyName("end_date_time")]
    public string? EndDateTime { get; init; }

    ///<summary>The date the whole day event should start. eg: 2022-03-10</summary>
    [JsonPropertyName("start_date")]
    public string? StartDate { get; init; }

    ///<summary>The date the whole day event should end. eg: 2022-03-11</summary>
    [JsonPropertyName("end_date")]
    public string? EndDate { get; init; }

    ///<summary>Days or weeks that you want to create the event in. eg: &quot;days&quot;: 2 or &quot;weeks&quot;: 2</summary>
    [JsonPropertyName("in")]
    public object? In { get; init; }

    ///<summary>The location of the event. Optional. eg: Conference Room - F123, Bldg. 002</summary>
    [JsonPropertyName("location")]
    public string? Location { get; init; }
}

public partial class GoogleAssistantServices
{
    private readonly IHaContext _haContext;
    public GoogleAssistantServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sends a request_sync command to Google.</summary>
    public void RequestSync(GoogleAssistantRequestSyncParameters data)
    {
        _haContext.CallService("google_assistant", "request_sync", null, data);
    }

    ///<summary>Sends a request_sync command to Google.</summary>
    ///<param name="agentUserId">Only needed for automations. Specific Home Assistant user id (not username, ID in configuration &gt; users &gt; under username) to sync with Google Assistant. Do not need when you call this service through Home Assistant front end or API. Used in automation script or other place where context.user_id is missing.</param>
    public void RequestSync(string? agentUserId = null)
    {
        _haContext.CallService("google_assistant", "request_sync", null, new GoogleAssistantRequestSyncParameters { AgentUserId = agentUserId });
    }
}

public partial record GoogleAssistantRequestSyncParameters
{
    ///<summary>Only needed for automations. Specific Home Assistant user id (not username, ID in configuration &gt; users &gt; under username) to sync with Google Assistant. Do not need when you call this service through Home Assistant front end or API. Used in automation script or other place where context.user_id is missing.</summary>
    [JsonPropertyName("agent_user_id")]
    public string? AgentUserId { get; init; }
}

public partial class GoogleHomeServices
{
    private readonly IHaContext _haContext;
    public GoogleHomeServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Delete an alarm from a Google Home device.</summary>
    public void DeleteAlarm(GoogleHomeDeleteAlarmParameters data)
    {
        _haContext.CallService("google_home", "delete_alarm", null, data);
    }

    ///<summary>Delete an alarm from a Google Home device.</summary>
    ///<param name="entityId">Represents a Google Home device (sensor.xxxx_alarms). eg: sensor.kitchen_alarms</param>
    ///<param name="alarmId">ID of an alarm (alarm/xxx). eg: alarm/6ed06a56-8a58-c6e3-a7d4-03f92c9d8a51</param>
    public void DeleteAlarm(string entityId, string alarmId)
    {
        _haContext.CallService("google_home", "delete_alarm", null, new GoogleHomeDeleteAlarmParameters { EntityId = entityId, AlarmId = alarmId });
    }

    ///<summary>Delete a timer from a Google Home device.</summary>
    public void DeleteTimer(GoogleHomeDeleteTimerParameters data)
    {
        _haContext.CallService("google_home", "delete_timer", null, data);
    }

    ///<summary>Delete a timer from a Google Home device.</summary>
    ///<param name="entityId">Represents a Google Home device (sensor.xxxx_timers). eg: sensor.kitchen_timers</param>
    ///<param name="timerId">ID of a timer (timer/xxx). eg: timer/6ed06a56-8a58-c6e3-a7d4-03f92c9d8a51</param>
    public void DeleteTimer(string entityId, string timerId)
    {
        _haContext.CallService("google_home", "delete_timer", null, new GoogleHomeDeleteTimerParameters { EntityId = entityId, TimerId = timerId });
    }

    ///<summary>Reboot a Google Home device.</summary>
    public void RebootDevice(GoogleHomeRebootDeviceParameters data)
    {
        _haContext.CallService("google_home", "reboot_device", null, data);
    }

    ///<summary>Reboot a Google Home device.</summary>
    ///<param name="entityId">Represents a Google Home device (sensor.xxxx_device). eg: sensor.kitchen_device</param>
    public void RebootDevice(string entityId)
    {
        _haContext.CallService("google_home", "reboot_device", null, new GoogleHomeRebootDeviceParameters { EntityId = entityId });
    }
}

public partial record GoogleHomeDeleteAlarmParameters
{
    ///<summary>Represents a Google Home device (sensor.xxxx_alarms). eg: sensor.kitchen_alarms</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>ID of an alarm (alarm/xxx). eg: alarm/6ed06a56-8a58-c6e3-a7d4-03f92c9d8a51</summary>
    [JsonPropertyName("alarm_id")]
    public string? AlarmId { get; init; }
}

public partial record GoogleHomeDeleteTimerParameters
{
    ///<summary>Represents a Google Home device (sensor.xxxx_timers). eg: sensor.kitchen_timers</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>ID of a timer (timer/xxx). eg: timer/6ed06a56-8a58-c6e3-a7d4-03f92c9d8a51</summary>
    [JsonPropertyName("timer_id")]
    public string? TimerId { get; init; }
}

public partial record GoogleHomeRebootDeviceParameters
{
    ///<summary>Represents a Google Home device (sensor.xxxx_device). eg: sensor.kitchen_device</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }
}

public partial class GroupServices
{
    private readonly IHaContext _haContext;
    public GroupServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads group configuration, entities, and notify services from YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("group", "reload", null);
    }

    ///<summary>Removes a group.</summary>
    public void Remove(GroupRemoveParameters data)
    {
        _haContext.CallService("group", "remove", null, data);
    }

    ///<summary>Removes a group.</summary>
    ///<param name="objectId">Object ID of this group. This object ID is used as part of the entity ID. Entity ID format: [domain].[object_id]. eg: test_group</param>
    public void Remove(object objectId)
    {
        _haContext.CallService("group", "remove", null, new GroupRemoveParameters { ObjectId = objectId });
    }

    ///<summary>Creates/Updates a user group.</summary>
    public void Set(GroupSetParameters data)
    {
        _haContext.CallService("group", "set", null, data);
    }

    ///<summary>Creates/Updates a user group.</summary>
    ///<param name="objectId">Object ID of this group. This object ID is used as part of the entity ID. Entity ID format: [domain].[object_id]. eg: test_group</param>
    ///<param name="name">Name of the group. eg: My test group</param>
    ///<param name="icon">Name of the icon for the group. eg: mdi:camera</param>
    ///<param name="entities">List of all members in the group. Cannot be used in combination with `Add entities` or `Remove entities`. eg: domain.entity_id1, domain.entity_id2</param>
    ///<param name="addEntities">List of members to be added to the group. Cannot be used in combination with `Entities` or `Remove entities`. eg: domain.entity_id1, domain.entity_id2</param>
    ///<param name="removeEntities">List of members to be removed from a group. Cannot be used in combination with `Entities` or `Add entities`. eg: domain.entity_id1, domain.entity_id2</param>
    ///<param name="all">Enable this option if the group should only be used when all entities are in state `on`.</param>
    public void Set(string objectId, string? name = null, object? icon = null, object? entities = null, object? addEntities = null, object? removeEntities = null, bool? all = null)
    {
        _haContext.CallService("group", "set", null, new GroupSetParameters { ObjectId = objectId, Name = name, Icon = icon, Entities = entities, AddEntities = addEntities, RemoveEntities = removeEntities, All = all });
    }
}

public partial record GroupRemoveParameters
{
    ///<summary>Object ID of this group. This object ID is used as part of the entity ID. Entity ID format: [domain].[object_id]. eg: test_group</summary>
    [JsonPropertyName("object_id")]
    public object? ObjectId { get; init; }
}

public partial record GroupSetParameters
{
    ///<summary>Object ID of this group. This object ID is used as part of the entity ID. Entity ID format: [domain].[object_id]. eg: test_group</summary>
    [JsonPropertyName("object_id")]
    public string? ObjectId { get; init; }

    ///<summary>Name of the group. eg: My test group</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>Name of the icon for the group. eg: mdi:camera</summary>
    [JsonPropertyName("icon")]
    public object? Icon { get; init; }

    ///<summary>List of all members in the group. Cannot be used in combination with `Add entities` or `Remove entities`. eg: domain.entity_id1, domain.entity_id2</summary>
    [JsonPropertyName("entities")]
    public object? Entities { get; init; }

    ///<summary>List of members to be added to the group. Cannot be used in combination with `Entities` or `Remove entities`. eg: domain.entity_id1, domain.entity_id2</summary>
    [JsonPropertyName("add_entities")]
    public object? AddEntities { get; init; }

    ///<summary>List of members to be removed from a group. Cannot be used in combination with `Entities` or `Add entities`. eg: domain.entity_id1, domain.entity_id2</summary>
    [JsonPropertyName("remove_entities")]
    public object? RemoveEntities { get; init; }

    ///<summary>Enable this option if the group should only be used when all entities are in state `on`.</summary>
    [JsonPropertyName("all")]
    public bool? All { get; init; }
}

public partial class HassioServices
{
    private readonly IHaContext _haContext;
    public HassioServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Restarts an add-on.</summary>
    public void AddonRestart(HassioAddonRestartParameters data)
    {
        _haContext.CallService("hassio", "addon_restart", null, data);
    }

    ///<summary>Restarts an add-on.</summary>
    ///<param name="addon">The add-on slug. eg: core_ssh</param>
    public void AddonRestart(object addon)
    {
        _haContext.CallService("hassio", "addon_restart", null, new HassioAddonRestartParameters { Addon = addon });
    }

    ///<summary>Starts an add-on.</summary>
    public void AddonStart(HassioAddonStartParameters data)
    {
        _haContext.CallService("hassio", "addon_start", null, data);
    }

    ///<summary>Starts an add-on.</summary>
    ///<param name="addon">The add-on slug. eg: core_ssh</param>
    public void AddonStart(object addon)
    {
        _haContext.CallService("hassio", "addon_start", null, new HassioAddonStartParameters { Addon = addon });
    }

    ///<summary>Writes data to add-on stdin.</summary>
    public void AddonStdin(HassioAddonStdinParameters data)
    {
        _haContext.CallService("hassio", "addon_stdin", null, data);
    }

    ///<summary>Writes data to add-on stdin.</summary>
    ///<param name="addon">The add-on slug. eg: core_ssh</param>
    public void AddonStdin(object addon)
    {
        _haContext.CallService("hassio", "addon_stdin", null, new HassioAddonStdinParameters { Addon = addon });
    }

    ///<summary>Stops an add-on.</summary>
    public void AddonStop(HassioAddonStopParameters data)
    {
        _haContext.CallService("hassio", "addon_stop", null, data);
    }

    ///<summary>Stops an add-on.</summary>
    ///<param name="addon">The add-on slug. eg: core_ssh</param>
    public void AddonStop(object addon)
    {
        _haContext.CallService("hassio", "addon_stop", null, new HassioAddonStopParameters { Addon = addon });
    }

    ///<summary>Updates an add-on. This service should be used with caution since add-on updates can contain breaking changes. It is highly recommended that you review release notes/change logs before updating an add-on.</summary>
    public void AddonUpdate(HassioAddonUpdateParameters data)
    {
        _haContext.CallService("hassio", "addon_update", null, data);
    }

    ///<summary>Updates an add-on. This service should be used with caution since add-on updates can contain breaking changes. It is highly recommended that you review release notes/change logs before updating an add-on.</summary>
    ///<param name="addon">The add-on slug. eg: core_ssh</param>
    public void AddonUpdate(object addon)
    {
        _haContext.CallService("hassio", "addon_update", null, new HassioAddonUpdateParameters { Addon = addon });
    }

    ///<summary>Creates a full backup.</summary>
    public void BackupFull(HassioBackupFullParameters data)
    {
        _haContext.CallService("hassio", "backup_full", null, data);
    }

    ///<summary>Creates a full backup.</summary>
    ///<param name="name">Optional (default = current date and time). eg: Backup 1</param>
    ///<param name="password">Password to protect the backup with. eg: password</param>
    ///<param name="compressed">Compresses the backup files.</param>
    ///<param name="location">Name of a backup network storage to host backups. eg: my_backup_mount</param>
    public void BackupFull(string? name = null, string? password = null, bool? compressed = null, object? location = null)
    {
        _haContext.CallService("hassio", "backup_full", null, new HassioBackupFullParameters { Name = name, Password = password, Compressed = compressed, Location = location });
    }

    ///<summary>Creates a partial backup.</summary>
    public void BackupPartial(HassioBackupPartialParameters data)
    {
        _haContext.CallService("hassio", "backup_partial", null, data);
    }

    ///<summary>Creates a partial backup.</summary>
    ///<param name="homeassistant">Includes Home Assistant settings in the backup.</param>
    ///<param name="addons">List of add-ons to include in the backup. Use the name slug of the add-on. eg: [&quot;core_ssh&quot;,&quot;core_samba&quot;,&quot;core_mosquitto&quot;]</param>
    ///<param name="folders">List of directories to include in the backup. eg: [&quot;homeassistant&quot;,&quot;share&quot;]</param>
    ///<param name="name">Optional (default = current date and time). eg: Partial backup 1</param>
    ///<param name="password">Password to protect the backup with. eg: password</param>
    ///<param name="compressed">Compresses the backup files.</param>
    ///<param name="location">Name of a backup network storage to host backups. eg: my_backup_mount</param>
    public void BackupPartial(bool? homeassistant = null, object? addons = null, object? folders = null, string? name = null, string? password = null, bool? compressed = null, object? location = null)
    {
        _haContext.CallService("hassio", "backup_partial", null, new HassioBackupPartialParameters { Homeassistant = homeassistant, Addons = addons, Folders = folders, Name = name, Password = password, Compressed = compressed, Location = location });
    }

    ///<summary>Reboots the host system.</summary>
    public void HostReboot()
    {
        _haContext.CallService("hassio", "host_reboot", null);
    }

    ///<summary>Powers off the host system.</summary>
    public void HostShutdown()
    {
        _haContext.CallService("hassio", "host_shutdown", null);
    }

    ///<summary>Restores from full backup.</summary>
    public void RestoreFull(HassioRestoreFullParameters data)
    {
        _haContext.CallService("hassio", "restore_full", null, data);
    }

    ///<summary>Restores from full backup.</summary>
    ///<param name="slug">Slug of backup to restore from.</param>
    ///<param name="password">Optional password. eg: password</param>
    public void RestoreFull(string slug, string? password = null)
    {
        _haContext.CallService("hassio", "restore_full", null, new HassioRestoreFullParameters { Slug = slug, Password = password });
    }

    ///<summary>Restores from a partial backup.</summary>
    public void RestorePartial(HassioRestorePartialParameters data)
    {
        _haContext.CallService("hassio", "restore_partial", null, data);
    }

    ///<summary>Restores from a partial backup.</summary>
    ///<param name="slug">Slug of backup to restore from.</param>
    ///<param name="homeassistant">Restores Home Assistant.</param>
    ///<param name="folders">List of directories to include in the backup. eg: [&quot;homeassistant&quot;,&quot;share&quot;]</param>
    ///<param name="addons">List of add-ons to include in the backup. Use the name slug of the add-on. eg: [&quot;core_ssh&quot;,&quot;core_samba&quot;,&quot;core_mosquitto&quot;]</param>
    ///<param name="password">Optional password. eg: password</param>
    public void RestorePartial(string slug, bool? homeassistant = null, object? folders = null, object? addons = null, string? password = null)
    {
        _haContext.CallService("hassio", "restore_partial", null, new HassioRestorePartialParameters { Slug = slug, Homeassistant = homeassistant, Folders = folders, Addons = addons, Password = password });
    }
}

public partial record HassioAddonRestartParameters
{
    ///<summary>The add-on slug. eg: core_ssh</summary>
    [JsonPropertyName("addon")]
    public object? Addon { get; init; }
}

public partial record HassioAddonStartParameters
{
    ///<summary>The add-on slug. eg: core_ssh</summary>
    [JsonPropertyName("addon")]
    public object? Addon { get; init; }
}

public partial record HassioAddonStdinParameters
{
    ///<summary>The add-on slug. eg: core_ssh</summary>
    [JsonPropertyName("addon")]
    public object? Addon { get; init; }
}

public partial record HassioAddonStopParameters
{
    ///<summary>The add-on slug. eg: core_ssh</summary>
    [JsonPropertyName("addon")]
    public object? Addon { get; init; }
}

public partial record HassioAddonUpdateParameters
{
    ///<summary>The add-on slug. eg: core_ssh</summary>
    [JsonPropertyName("addon")]
    public object? Addon { get; init; }
}

public partial record HassioBackupFullParameters
{
    ///<summary>Optional (default = current date and time). eg: Backup 1</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>Password to protect the backup with. eg: password</summary>
    [JsonPropertyName("password")]
    public string? Password { get; init; }

    ///<summary>Compresses the backup files.</summary>
    [JsonPropertyName("compressed")]
    public bool? Compressed { get; init; }

    ///<summary>Name of a backup network storage to host backups. eg: my_backup_mount</summary>
    [JsonPropertyName("location")]
    public object? Location { get; init; }
}

public partial record HassioBackupPartialParameters
{
    ///<summary>Includes Home Assistant settings in the backup.</summary>
    [JsonPropertyName("homeassistant")]
    public bool? Homeassistant { get; init; }

    ///<summary>List of add-ons to include in the backup. Use the name slug of the add-on. eg: [&quot;core_ssh&quot;,&quot;core_samba&quot;,&quot;core_mosquitto&quot;]</summary>
    [JsonPropertyName("addons")]
    public object? Addons { get; init; }

    ///<summary>List of directories to include in the backup. eg: [&quot;homeassistant&quot;,&quot;share&quot;]</summary>
    [JsonPropertyName("folders")]
    public object? Folders { get; init; }

    ///<summary>Optional (default = current date and time). eg: Partial backup 1</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>Password to protect the backup with. eg: password</summary>
    [JsonPropertyName("password")]
    public string? Password { get; init; }

    ///<summary>Compresses the backup files.</summary>
    [JsonPropertyName("compressed")]
    public bool? Compressed { get; init; }

    ///<summary>Name of a backup network storage to host backups. eg: my_backup_mount</summary>
    [JsonPropertyName("location")]
    public object? Location { get; init; }
}

public partial record HassioRestoreFullParameters
{
    ///<summary>Slug of backup to restore from.</summary>
    [JsonPropertyName("slug")]
    public string? Slug { get; init; }

    ///<summary>Optional password. eg: password</summary>
    [JsonPropertyName("password")]
    public string? Password { get; init; }
}

public partial record HassioRestorePartialParameters
{
    ///<summary>Slug of backup to restore from.</summary>
    [JsonPropertyName("slug")]
    public string? Slug { get; init; }

    ///<summary>Restores Home Assistant.</summary>
    [JsonPropertyName("homeassistant")]
    public bool? Homeassistant { get; init; }

    ///<summary>List of directories to include in the backup. eg: [&quot;homeassistant&quot;,&quot;share&quot;]</summary>
    [JsonPropertyName("folders")]
    public object? Folders { get; init; }

    ///<summary>List of add-ons to include in the backup. Use the name slug of the add-on. eg: [&quot;core_ssh&quot;,&quot;core_samba&quot;,&quot;core_mosquitto&quot;]</summary>
    [JsonPropertyName("addons")]
    public object? Addons { get; init; }

    ///<summary>Optional password. eg: password</summary>
    [JsonPropertyName("password")]
    public string? Password { get; init; }
}

public partial class HomeassistantServices
{
    private readonly IHaContext _haContext;
    public HomeassistantServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Adds an alias to an area.</summary>
    public void AddAliasToArea(HomeassistantAddAliasToAreaParameters data)
    {
        _haContext.CallService("homeassistant", "add_alias_to_area", null, data);
    }

    ///<summary>Adds an alias to an area.</summary>
    ///<param name="areaId">The ID of the area to add the alias to.</param>
    ///<param name="alias">The alias (or list of aliasses) to add to the area.</param>
    public void AddAliasToArea(string areaId, object @alias)
    {
        _haContext.CallService("homeassistant", "add_alias_to_area", null, new HomeassistantAddAliasToAreaParameters { AreaId = areaId, Alias = @alias });
    }

    ///<summary>Adds an device to an area. Please note, if the device is already in an area, it will be removed from the previous area.</summary>
    public void AddDeviceToArea(HomeassistantAddDeviceToAreaParameters data)
    {
        _haContext.CallService("homeassistant", "add_device_to_area", null, data);
    }

    ///<summary>Adds an device to an area. Please note, if the device is already in an area, it will be removed from the previous area.</summary>
    ///<param name="areaId">The ID of the area to add the device to.</param>
    ///<param name="deviceId">The ID of the device(s) to add to the area.</param>
    public void AddDeviceToArea(string areaId, string deviceId)
    {
        _haContext.CallService("homeassistant", "add_device_to_area", null, new HomeassistantAddDeviceToAreaParameters { AreaId = areaId, DeviceId = deviceId });
    }

    ///<summary>Adds an entity to an area. Please note, if the enity is already in an area, it will be removed from the previous area. This will override the area the device, that provides this entity, is in.</summary>
    public void AddEntityToArea(HomeassistantAddEntityToAreaParameters data)
    {
        _haContext.CallService("homeassistant", "add_entity_to_area", null, data);
    }

    ///<summary>Adds an entity to an area. Please note, if the enity is already in an area, it will be removed from the previous area. This will override the area the device, that provides this entity, is in.</summary>
    ///<param name="areaId">The ID of the area to add the entity to.</param>
    ///<param name="entityId">The ID of the entity (or entities) to add to the area.</param>
    public void AddEntityToArea(string areaId, string entityId)
    {
        _haContext.CallService("homeassistant", "add_entity_to_area", null, new HomeassistantAddEntityToAreaParameters { AreaId = areaId, EntityId = entityId });
    }

    ///<summary>Checks the Home Assistant YAML-configuration files for errors. Errors will be shown in the Home Assistant logs.</summary>
    public void CheckConfig()
    {
        _haContext.CallService("homeassistant", "check_config", null);
    }

    ///<summary>Creates a new area on the fly.</summary>
    public void CreateArea(HomeassistantCreateAreaParameters data)
    {
        _haContext.CallService("homeassistant", "create_area", null, data);
    }

    ///<summary>Creates a new area on the fly.</summary>
    ///<param name="name">The name of the area to create.</param>
    ///<param name="aliases">A list of aliases for the area. This is useful if you want to use the area in a different language or different nickname.</param>
    public void CreateArea(string name, object? aliases = null)
    {
        _haContext.CallService("homeassistant", "create_area", null, new HomeassistantCreateAreaParameters { Name = name, Aliases = aliases });
    }

    ///<summary>Deletes all orphaned entities that no longer have an integration that claim/provide them. Please note, if the integration was just removed, it might need a restart for Home Assistant to realize they are orphaned. **WARNING** Entities might have been marked orphaned because an integration is offline or not working since Home Assistant started. Calling this service will delete those entities as well.</summary>
    public void DeleteAllOrphanedEntities()
    {
        _haContext.CallService("homeassistant", "delete_all_orphaned_entities", null);
    }

    ///<summary>Deletes a new area on the fly.</summary>
    public void DeleteArea(HomeassistantDeleteAreaParameters data)
    {
        _haContext.CallService("homeassistant", "delete_area", null, data);
    }

    ///<summary>Deletes a new area on the fly.</summary>
    ///<param name="areaId">The ID of the area to delete.</param>
    public void DeleteArea(string areaId)
    {
        _haContext.CallService("homeassistant", "delete_area", null, new HomeassistantDeleteAreaParameters { AreaId = areaId });
    }

    ///<summary>Disables an integration configuration entry.</summary>
    public void DisableConfigEntry(HomeassistantDisableConfigEntryParameters data)
    {
        _haContext.CallService("homeassistant", "disable_config_entry", null, data);
    }

    ///<summary>Disables an integration configuration entry.</summary>
    ///<param name="configEntryId">The integration configuration entry to disable.</param>
    public void DisableConfigEntry(object configEntryId)
    {
        _haContext.CallService("homeassistant", "disable_config_entry", null, new HomeassistantDisableConfigEntryParameters { ConfigEntryId = configEntryId });
    }

    ///<summary>Disables a device on the fly.</summary>
    public void DisableDevice(HomeassistantDisableDeviceParameters data)
    {
        _haContext.CallService("homeassistant", "disable_device", null, data);
    }

    ///<summary>Disables a device on the fly.</summary>
    ///<param name="deviceId">The device to disable.</param>
    public void DisableDevice(string deviceId)
    {
        _haContext.CallService("homeassistant", "disable_device", null, new HomeassistantDisableDeviceParameters { DeviceId = deviceId });
    }

    ///<summary>Disables an entity (or entities) on the fly.</summary>
    public void DisableEntity(HomeassistantDisableEntityParameters data)
    {
        _haContext.CallService("homeassistant", "disable_entity", null, data);
    }

    ///<summary>Disables an entity (or entities) on the fly.</summary>
    ///<param name="entityId">The entity/entities to disable.</param>
    public void DisableEntity(string entityId)
    {
        _haContext.CallService("homeassistant", "disable_entity", null, new HomeassistantDisableEntityParameters { EntityId = entityId });
    }

    ///<summary>Disables polling for updates for an integration configuration entry.</summary>
    public void DisablePolling(HomeassistantDisablePollingParameters data)
    {
        _haContext.CallService("homeassistant", "disable_polling", null, data);
    }

    ///<summary>Disables polling for updates for an integration configuration entry.</summary>
    ///<param name="configEntryId">The integration configuration entry to disable polling for.</param>
    public void DisablePolling(object configEntryId)
    {
        _haContext.CallService("homeassistant", "disable_polling", null, new HomeassistantDisablePollingParameters { ConfigEntryId = configEntryId });
    }

    ///<summary>Enables an integration configuration entry.</summary>
    public void EnableConfigEntry(HomeassistantEnableConfigEntryParameters data)
    {
        _haContext.CallService("homeassistant", "enable_config_entry", null, data);
    }

    ///<summary>Enables an integration configuration entry.</summary>
    ///<param name="configEntryId">The integration configuration entry to enable.</param>
    public void EnableConfigEntry(object configEntryId)
    {
        _haContext.CallService("homeassistant", "enable_config_entry", null, new HomeassistantEnableConfigEntryParameters { ConfigEntryId = configEntryId });
    }

    ///<summary>Enables a device on the fly.</summary>
    public void EnableDevice(HomeassistantEnableDeviceParameters data)
    {
        _haContext.CallService("homeassistant", "enable_device", null, data);
    }

    ///<summary>Enables a device on the fly.</summary>
    ///<param name="deviceId">The device to disable.</param>
    public void EnableDevice(string deviceId)
    {
        _haContext.CallService("homeassistant", "enable_device", null, new HomeassistantEnableDeviceParameters { DeviceId = deviceId });
    }

    ///<summary>Enables an entity (or entities) on the fly.</summary>
    public void EnableEntity(HomeassistantEnableEntityParameters data)
    {
        _haContext.CallService("homeassistant", "enable_entity", null, data);
    }

    ///<summary>Enables an entity (or entities) on the fly.</summary>
    ///<param name="entityId">The entity/entities to enable.</param>
    public void EnableEntity(string entityId)
    {
        _haContext.CallService("homeassistant", "enable_entity", null, new HomeassistantEnableEntityParameters { EntityId = entityId });
    }

    ///<summary>Enables polling for updates for an integration configuration entry.</summary>
    public void EnablePolling(HomeassistantEnablePollingParameters data)
    {
        _haContext.CallService("homeassistant", "enable_polling", null, data);
    }

    ///<summary>Enables polling for updates for an integration configuration entry.</summary>
    ///<param name="configEntryId">The integration configuration entry to enable polling for.</param>
    public void EnablePolling(object configEntryId)
    {
        _haContext.CallService("homeassistant", "enable_polling", null, new HomeassistantEnablePollingParameters { ConfigEntryId = configEntryId });
    }

    ///<summary>Hides an entity (or entities) on the fly.</summary>
    public void HideEntity(HomeassistantHideEntityParameters data)
    {
        _haContext.CallService("homeassistant", "hide_entity", null, data);
    }

    ///<summary>Hides an entity (or entities) on the fly.</summary>
    ///<param name="entityId">The entity/entities to hide.</param>
    public void HideEntity(string entityId)
    {
        _haContext.CallService("homeassistant", "hide_entity", null, new HomeassistantHideEntityParameters { EntityId = entityId });
    }

    ///<summary>Ignore all currently discovered devices that are shown on the integrations dashboard. This will not ignore devices that are discovered after this.</summary>
    public void IgnoreAllDiscovered(HomeassistantIgnoreAllDiscoveredParameters data)
    {
        _haContext.CallService("homeassistant", "ignore_all_discovered", null, data);
    }

    ///<summary>Ignore all currently discovered devices that are shown on the integrations dashboard. This will not ignore devices that are discovered after this.</summary>
    ///<param name="domain">The integration domain to ignore all discovered devices for. If not provided, all domains will be considered to be ignored.</param>
    public void IgnoreAllDiscovered(string? domain = null)
    {
        _haContext.CallService("homeassistant", "ignore_all_discovered", null, new HomeassistantIgnoreAllDiscoveredParameters { Domain = domain });
    }

    public void ReloadAll()
    {
        _haContext.CallService("homeassistant", "reload_all", null);
    }

    ///<summary>Reloads the specified config entry.</summary>
    ///<param name="target">The target for this service call</param>
    public void ReloadConfigEntry(ServiceTarget target, HomeassistantReloadConfigEntryParameters data)
    {
        _haContext.CallService("homeassistant", "reload_config_entry", target, data);
    }

    ///<summary>Reloads the specified config entry.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="entryId">The configuration entry ID of the entry to be reloaded. eg: 8955375327824e14ba89e4b29cc3ec9a</param>
    public void ReloadConfigEntry(ServiceTarget target, string? entryId = null)
    {
        _haContext.CallService("homeassistant", "reload_config_entry", target, new HomeassistantReloadConfigEntryParameters { EntryId = entryId });
    }

    ///<summary>Reloads the core configuration from the YAML-configuration.</summary>
    public void ReloadCoreConfig()
    {
        _haContext.CallService("homeassistant", "reload_core_config", null);
    }

    ///<summary>Reloads Jinja2 templates found in the `custom_templates` folder in your config. New values will be applied on the next render of the template.</summary>
    public void ReloadCustomTemplates()
    {
        _haContext.CallService("homeassistant", "reload_custom_templates", null);
    }

    ///<summary>Removes an alias from an area.</summary>
    public void RemoveAliasFromArea(HomeassistantRemoveAliasFromAreaParameters data)
    {
        _haContext.CallService("homeassistant", "remove_alias_from_area", null, data);
    }

    ///<summary>Removes an alias from an area.</summary>
    ///<param name="areaId">The ID of the area to remove the alias from.</param>
    ///<param name="alias">The alias (or list of aliasses) to remove from the area.</param>
    public void RemoveAliasFromArea(string areaId, object @alias)
    {
        _haContext.CallService("homeassistant", "remove_alias_from_area", null, new HomeassistantRemoveAliasFromAreaParameters { AreaId = areaId, Alias = @alias });
    }

    ///<summary>Removes a device from an area. As a device can only be in one area, this call doesn&apos;t need to specify the area.</summary>
    public void RemoveDeviceFromArea(HomeassistantRemoveDeviceFromAreaParameters data)
    {
        _haContext.CallService("homeassistant", "remove_device_from_area", null, data);
    }

    ///<summary>Removes a device from an area. As a device can only be in one area, this call doesn&apos;t need to specify the area.</summary>
    ///<param name="deviceId">The ID of the device to remove the area from.</param>
    public void RemoveDeviceFromArea(string deviceId)
    {
        _haContext.CallService("homeassistant", "remove_device_from_area", null, new HomeassistantRemoveDeviceFromAreaParameters { DeviceId = deviceId });
    }

    ///<summary>Removes an entity from an area. As an entity can only be in one area, this call doesn&apos;t need to specify the area. Please note, the entity will still be in the area of the device that provides it after this call.</summary>
    public void RemoveEntityFromArea(HomeassistantRemoveEntityFromAreaParameters data)
    {
        _haContext.CallService("homeassistant", "remove_entity_from_area", null, data);
    }

    ///<summary>Removes an entity from an area. As an entity can only be in one area, this call doesn&apos;t need to specify the area. Please note, the entity will still be in the area of the device that provides it after this call.</summary>
    ///<param name="entityId">The ID of the entity (or entities) to remove the area from.</param>
    public void RemoveEntityFromArea(string entityId)
    {
        _haContext.CallService("homeassistant", "remove_entity_from_area", null, new HomeassistantRemoveEntityFromAreaParameters { EntityId = entityId });
    }

    ///<summary>Restart the Home Assistant service.</summary>
    public void Restart(HomeassistantRestartParameters data)
    {
        _haContext.CallService("homeassistant", "restart", null, data);
    }

    ///<summary>Restart the Home Assistant service.</summary>
    ///<param name="force">Force the restart. WARNING! This will not gracefully shutdown Home Assistant, it will skip configuration checks and ignore running database migrations. Only use this if you know what you are doing.</param>
    public void Restart(bool? force = null)
    {
        _haContext.CallService("homeassistant", "restart", null, new HomeassistantRestartParameters { Force = force });
    }

    ///<summary>Saves the persistent states immediately. Maintains the normal periodic saving interval.</summary>
    public void SavePersistentStates()
    {
        _haContext.CallService("homeassistant", "save_persistent_states", null);
    }

    ///<summary>Sets aliases for an area. Overwrite and removed any existing aliases, fully replacing them with the new ones.</summary>
    public void SetAreaAliases(HomeassistantSetAreaAliasesParameters data)
    {
        _haContext.CallService("homeassistant", "set_area_aliases", null, data);
    }

    ///<summary>Sets aliases for an area. Overwrite and removed any existing aliases, fully replacing them with the new ones.</summary>
    ///<param name="areaId">The ID of the area to set the aliases for.</param>
    ///<param name="aliases">The aliases to set for the area.</param>
    public void SetAreaAliases(string areaId, object aliases)
    {
        _haContext.CallService("homeassistant", "set_area_aliases", null, new HomeassistantSetAreaAliasesParameters { AreaId = areaId, Aliases = aliases });
    }

    ///<summary>Updates the Home Assistant location.</summary>
    public void SetLocation(HomeassistantSetLocationParameters data)
    {
        _haContext.CallService("homeassistant", "set_location", null, data);
    }

    ///<summary>Updates the Home Assistant location.</summary>
    ///<param name="latitude">Latitude of your location. eg: 32.87336</param>
    ///<param name="longitude">Longitude of your location. eg: 117.22743</param>
    public void SetLocation(string latitude, string longitude)
    {
        _haContext.CallService("homeassistant", "set_location", null, new HomeassistantSetLocationParameters { Latitude = latitude, Longitude = longitude });
    }

    ///<summary>Stops Home Assistant.</summary>
    public void Stop()
    {
        _haContext.CallService("homeassistant", "stop", null);
    }

    ///<summary>Generic service to toggle devices on/off under any domain.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("homeassistant", "toggle", target);
    }

    ///<summary>Generic service to turn devices off under any domain.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("homeassistant", "turn_off", target);
    }

    ///<summary>Generic service to turn devices on under any domain.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("homeassistant", "turn_on", target);
    }

    ///<summary>Unhides an entity (or entities) on the fly.</summary>
    public void UnhideEntity(HomeassistantUnhideEntityParameters data)
    {
        _haContext.CallService("homeassistant", "unhide_entity", null, data);
    }

    ///<summary>Unhides an entity (or entities) on the fly.</summary>
    ///<param name="entityId">The entity/entities to unhide.</param>
    public void UnhideEntity(string entityId)
    {
        _haContext.CallService("homeassistant", "unhide_entity", null, new HomeassistantUnhideEntityParameters { EntityId = entityId });
    }

    ///<summary>Forces one or more entities to update its data.</summary>
    ///<param name="target">The target for this service call</param>
    public void UpdateEntity(ServiceTarget target)
    {
        _haContext.CallService("homeassistant", "update_entity", target);
    }
}

public partial record HomeassistantAddAliasToAreaParameters
{
    ///<summary>The ID of the area to add the alias to.</summary>
    [JsonPropertyName("area_id")]
    public string? AreaId { get; init; }

    ///<summary>The alias (or list of aliasses) to add to the area.</summary>
    [JsonPropertyName("alias")]
    public object? Alias { get; init; }
}

public partial record HomeassistantAddDeviceToAreaParameters
{
    ///<summary>The ID of the area to add the device to.</summary>
    [JsonPropertyName("area_id")]
    public string? AreaId { get; init; }

    ///<summary>The ID of the device(s) to add to the area.</summary>
    [JsonPropertyName("device_id")]
    public string? DeviceId { get; init; }
}

public partial record HomeassistantAddEntityToAreaParameters
{
    ///<summary>The ID of the area to add the entity to.</summary>
    [JsonPropertyName("area_id")]
    public string? AreaId { get; init; }

    ///<summary>The ID of the entity (or entities) to add to the area.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }
}

public partial record HomeassistantCreateAreaParameters
{
    ///<summary>The name of the area to create.</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>A list of aliases for the area. This is useful if you want to use the area in a different language or different nickname.</summary>
    [JsonPropertyName("aliases")]
    public object? Aliases { get; init; }
}

public partial record HomeassistantDeleteAreaParameters
{
    ///<summary>The ID of the area to delete.</summary>
    [JsonPropertyName("area_id")]
    public string? AreaId { get; init; }
}

public partial record HomeassistantDisableConfigEntryParameters
{
    ///<summary>The integration configuration entry to disable.</summary>
    [JsonPropertyName("config_entry_id")]
    public object? ConfigEntryId { get; init; }
}

public partial record HomeassistantDisableDeviceParameters
{
    ///<summary>The device to disable.</summary>
    [JsonPropertyName("device_id")]
    public string? DeviceId { get; init; }
}

public partial record HomeassistantDisableEntityParameters
{
    ///<summary>The entity/entities to disable.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }
}

public partial record HomeassistantDisablePollingParameters
{
    ///<summary>The integration configuration entry to disable polling for.</summary>
    [JsonPropertyName("config_entry_id")]
    public object? ConfigEntryId { get; init; }
}

public partial record HomeassistantEnableConfigEntryParameters
{
    ///<summary>The integration configuration entry to enable.</summary>
    [JsonPropertyName("config_entry_id")]
    public object? ConfigEntryId { get; init; }
}

public partial record HomeassistantEnableDeviceParameters
{
    ///<summary>The device to disable.</summary>
    [JsonPropertyName("device_id")]
    public string? DeviceId { get; init; }
}

public partial record HomeassistantEnableEntityParameters
{
    ///<summary>The entity/entities to enable.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }
}

public partial record HomeassistantEnablePollingParameters
{
    ///<summary>The integration configuration entry to enable polling for.</summary>
    [JsonPropertyName("config_entry_id")]
    public object? ConfigEntryId { get; init; }
}

public partial record HomeassistantHideEntityParameters
{
    ///<summary>The entity/entities to hide.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }
}

public partial record HomeassistantIgnoreAllDiscoveredParameters
{
    ///<summary>The integration domain to ignore all discovered devices for. If not provided, all domains will be considered to be ignored.</summary>
    [JsonPropertyName("domain")]
    public string? Domain { get; init; }
}

public partial record HomeassistantReloadConfigEntryParameters
{
    ///<summary>The configuration entry ID of the entry to be reloaded. eg: 8955375327824e14ba89e4b29cc3ec9a</summary>
    [JsonPropertyName("entry_id")]
    public string? EntryId { get; init; }
}

public partial record HomeassistantRemoveAliasFromAreaParameters
{
    ///<summary>The ID of the area to remove the alias from.</summary>
    [JsonPropertyName("area_id")]
    public string? AreaId { get; init; }

    ///<summary>The alias (or list of aliasses) to remove from the area.</summary>
    [JsonPropertyName("alias")]
    public object? Alias { get; init; }
}

public partial record HomeassistantRemoveDeviceFromAreaParameters
{
    ///<summary>The ID of the device to remove the area from.</summary>
    [JsonPropertyName("device_id")]
    public string? DeviceId { get; init; }
}

public partial record HomeassistantRemoveEntityFromAreaParameters
{
    ///<summary>The ID of the entity (or entities) to remove the area from.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }
}

public partial record HomeassistantRestartParameters
{
    ///<summary>Force the restart. WARNING! This will not gracefully shutdown Home Assistant, it will skip configuration checks and ignore running database migrations. Only use this if you know what you are doing.</summary>
    [JsonPropertyName("force")]
    public bool? Force { get; init; }
}

public partial record HomeassistantSetAreaAliasesParameters
{
    ///<summary>The ID of the area to set the aliases for.</summary>
    [JsonPropertyName("area_id")]
    public string? AreaId { get; init; }

    ///<summary>The aliases to set for the area.</summary>
    [JsonPropertyName("aliases")]
    public object? Aliases { get; init; }
}

public partial record HomeassistantSetLocationParameters
{
    ///<summary>Latitude of your location. eg: 32.87336</summary>
    [JsonPropertyName("latitude")]
    public string? Latitude { get; init; }

    ///<summary>Longitude of your location. eg: 117.22743</summary>
    [JsonPropertyName("longitude")]
    public string? Longitude { get; init; }
}

public partial record HomeassistantUnhideEntityParameters
{
    ///<summary>The entity/entities to unhide.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }
}

public partial class HueServices
{
    private readonly IHaContext _haContext;
    public HueServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Activates a Hue scene with more control over the options.</summary>
    ///<param name="target">The target for this service call</param>
    public void ActivateScene(ServiceTarget target, HueActivateSceneParameters data)
    {
        _haContext.CallService("hue", "activate_scene", target, data);
    }

    ///<summary>Activates a Hue scene with more control over the options.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="transition">Transition duration it takes to bring devices to the state defined in the scene.</param>
    ///<param name="dynamic">Enable dynamic mode of the scene.</param>
    ///<param name="speed">Speed of dynamic palette for this scene.</param>
    ///<param name="brightness">Set brightness for the scene.</param>
    public void ActivateScene(ServiceTarget target, long? transition = null, bool? dynamic = null, long? speed = null, long? brightness = null)
    {
        _haContext.CallService("hue", "activate_scene", target, new HueActivateSceneParameters { Transition = transition, Dynamic = dynamic, Speed = speed, Brightness = brightness });
    }

    ///<summary>Activates a hue scene stored in the hue hub.</summary>
    public void HueActivateScene(HueHueActivateSceneParameters data)
    {
        _haContext.CallService("hue", "hue_activate_scene", null, data);
    }

    ///<summary>Activates a hue scene stored in the hue hub.</summary>
    ///<param name="groupName">Name of hue group/room from the hue app. eg: Living Room</param>
    ///<param name="sceneName">Name of hue scene from the hue app. eg: Energize</param>
    ///<param name="dynamic">Enable dynamic mode of the scene (V2 bridges and supported scenes only).</param>
    public void HueActivateScene(string? groupName = null, string? sceneName = null, bool? dynamic = null)
    {
        _haContext.CallService("hue", "hue_activate_scene", null, new HueHueActivateSceneParameters { GroupName = groupName, SceneName = sceneName, Dynamic = dynamic });
    }
}

public partial record HueActivateSceneParameters
{
    ///<summary>Transition duration it takes to bring devices to the state defined in the scene.</summary>
    [JsonPropertyName("transition")]
    public long? Transition { get; init; }

    ///<summary>Enable dynamic mode of the scene.</summary>
    [JsonPropertyName("dynamic")]
    public bool? Dynamic { get; init; }

    ///<summary>Speed of dynamic palette for this scene.</summary>
    [JsonPropertyName("speed")]
    public long? Speed { get; init; }

    ///<summary>Set brightness for the scene.</summary>
    [JsonPropertyName("brightness")]
    public long? Brightness { get; init; }
}

public partial record HueHueActivateSceneParameters
{
    ///<summary>Name of hue group/room from the hue app. eg: Living Room</summary>
    [JsonPropertyName("group_name")]
    public string? GroupName { get; init; }

    ///<summary>Name of hue scene from the hue app. eg: Energize</summary>
    [JsonPropertyName("scene_name")]
    public string? SceneName { get; init; }

    ///<summary>Enable dynamic mode of the scene (V2 bridges and supported scenes only).</summary>
    [JsonPropertyName("dynamic")]
    public bool? Dynamic { get; init; }
}

public partial class HuesyncboxServices
{
    private readonly IHaContext _haContext;
    public HuesyncboxServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Set the bridge to be used by the Philips Hue Play HDMI Syncbox. Keep in mind that changing the bridge by the box takes a while (about 15 seconds it seems). After the bridge has changed you might need to select the `entertainment_area` if connectionstate is `invalidgroup` instead of `connected`.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetBridge(ServiceTarget target, HuesyncboxSetBridgeParameters data)
    {
        _haContext.CallService("huesyncbox", "set_bridge", target, data);
    }

    ///<summary>Set the bridge to be used by the Philips Hue Play HDMI Syncbox. Keep in mind that changing the bridge by the box takes a while (about 15 seconds it seems). After the bridge has changed you might need to select the `entertainment_area` if connectionstate is `invalidgroup` instead of `connected`.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="bridgeId">ID of the bridge. A hexadecimal code of 16 characters. eg: 001788FFFE000000</param>
    ///<param name="bridgeUsername">Username (a.k.a. application key) valid for the bridge. A long code of random characters. eg: WB9xS1t0Baw-8ZqYKMcEhOaKRU42E84-NZBXwcIL</param>
    ///<param name="bridgeClientkey">Clientkey that belongs with the username. A hexadecimal code of 32 characters. eg: 00112233445566778899AABBCCDDEEFF</param>
    public void SetBridge(ServiceTarget target, string bridgeId, string bridgeUsername, string bridgeClientkey)
    {
        _haContext.CallService("huesyncbox", "set_bridge", target, new HuesyncboxSetBridgeParameters { BridgeId = bridgeId, BridgeUsername = bridgeUsername, BridgeClientkey = bridgeClientkey });
    }

    ///<summary>Control the complete light sync state of the Philips Hue Play HDMI Syncbox with one call.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetSyncState(ServiceTarget target, HuesyncboxSetSyncStateParameters data)
    {
        _haContext.CallService("huesyncbox", "set_sync_state", target, data);
    }

    ///<summary>Control the complete light sync state of the Philips Hue Play HDMI Syncbox with one call.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="power">Turn the box on or off. eg: True</param>
    ///<param name="sync">Set light sync state on or off. Setting this to on will also turn on the box. eg: True</param>
    ///<param name="brightness">Brightness value to set. eg: 42</param>
    ///<param name="intensity">Intensity to set. eg: high</param>
    ///<param name="mode">Mode to set. Setting the mode will also turn on the box and start light sync. eg: video</param>
    ///<param name="input">Input to select. eg: input1</param>
    ///<param name="entertainmentArea">Entertainment area to select. Name must match _exactly_ eg: TV Area</param>
    public void SetSyncState(ServiceTarget target, bool? power = null, bool? sync = null, long? brightness = null, object? intensity = null, object? mode = null, object? input = null, string? entertainmentArea = null)
    {
        _haContext.CallService("huesyncbox", "set_sync_state", target, new HuesyncboxSetSyncStateParameters { Power = power, Sync = sync, Brightness = brightness, Intensity = intensity, Mode = mode, Input = input, EntertainmentArea = entertainmentArea });
    }
}

public partial record HuesyncboxSetBridgeParameters
{
    ///<summary>ID of the bridge. A hexadecimal code of 16 characters. eg: 001788FFFE000000</summary>
    [JsonPropertyName("bridge_id")]
    public string? BridgeId { get; init; }

    ///<summary>Username (a.k.a. application key) valid for the bridge. A long code of random characters. eg: WB9xS1t0Baw-8ZqYKMcEhOaKRU42E84-NZBXwcIL</summary>
    [JsonPropertyName("bridge_username")]
    public string? BridgeUsername { get; init; }

    ///<summary>Clientkey that belongs with the username. A hexadecimal code of 32 characters. eg: 00112233445566778899AABBCCDDEEFF</summary>
    [JsonPropertyName("bridge_clientkey")]
    public string? BridgeClientkey { get; init; }
}

public partial record HuesyncboxSetSyncStateParameters
{
    ///<summary>Turn the box on or off. eg: True</summary>
    [JsonPropertyName("power")]
    public bool? Power { get; init; }

    ///<summary>Set light sync state on or off. Setting this to on will also turn on the box. eg: True</summary>
    [JsonPropertyName("sync")]
    public bool? Sync { get; init; }

    ///<summary>Brightness value to set. eg: 42</summary>
    [JsonPropertyName("brightness")]
    public long? Brightness { get; init; }

    ///<summary>Intensity to set. eg: high</summary>
    [JsonPropertyName("intensity")]
    public object? Intensity { get; init; }

    ///<summary>Mode to set. Setting the mode will also turn on the box and start light sync. eg: video</summary>
    [JsonPropertyName("mode")]
    public object? Mode { get; init; }

    ///<summary>Input to select. eg: input1</summary>
    [JsonPropertyName("input")]
    public object? Input { get; init; }

    ///<summary>Entertainment area to select. Name must match _exactly_ eg: TV Area</summary>
    [JsonPropertyName("entertainment_area")]
    public string? EntertainmentArea { get; init; }
}

public partial class HumidifierServices
{
    private readonly IHaContext _haContext;
    public HumidifierServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the target humidity.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetHumidity(ServiceTarget target, HumidifierSetHumidityParameters data)
    {
        _haContext.CallService("humidifier", "set_humidity", target, data);
    }

    ///<summary>Sets the target humidity.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="humidity">Target humidity.</param>
    public void SetHumidity(ServiceTarget target, long humidity)
    {
        _haContext.CallService("humidifier", "set_humidity", target, new HumidifierSetHumidityParameters { Humidity = humidity });
    }

    ///<summary>Sets the humidifier operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetMode(ServiceTarget target, HumidifierSetModeParameters data)
    {
        _haContext.CallService("humidifier", "set_mode", target, data);
    }

    ///<summary>Sets the humidifier operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="mode">Operation mode. For example, _normal_, _eco_, or _away_. For a list of possible values, refer to the integration documentation. eg: away</param>
    public void SetMode(ServiceTarget target, string mode)
    {
        _haContext.CallService("humidifier", "set_mode", target, new HumidifierSetModeParameters { Mode = mode });
    }

    ///<summary>Toggles the humidifier on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("humidifier", "toggle", target);
    }

    ///<summary>Turns the humidifier off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("humidifier", "turn_off", target);
    }

    ///<summary>Turns the humidifier on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("humidifier", "turn_on", target);
    }
}

public partial record HumidifierSetHumidityParameters
{
    ///<summary>Target humidity.</summary>
    [JsonPropertyName("humidity")]
    public long? Humidity { get; init; }
}

public partial record HumidifierSetModeParameters
{
    ///<summary>Operation mode. For example, _normal_, _eco_, or _away_. For a list of possible values, refer to the integration documentation. eg: away</summary>
    [JsonPropertyName("mode")]
    public string? Mode { get; init; }
}

public partial class InputBooleanServices
{
    private readonly IHaContext _haContext;
    public InputBooleanServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("input_boolean", "reload", null);
    }

    ///<summary>Toggles the helper on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("input_boolean", "toggle", target);
    }

    ///<summary>Turns off the helper.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("input_boolean", "turn_off", target);
    }

    ///<summary>Turns on the helper.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("input_boolean", "turn_on", target);
    }
}

public partial class InputButtonServices
{
    private readonly IHaContext _haContext;
    public InputButtonServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Mimics the physical button press on the device.</summary>
    ///<param name="target">The target for this service call</param>
    public void Press(ServiceTarget target)
    {
        _haContext.CallService("input_button", "press", target);
    }

    public void Reload()
    {
        _haContext.CallService("input_button", "reload", null);
    }
}

public partial class InputDatetimeServices
{
    private readonly IHaContext _haContext;
    public InputDatetimeServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("input_datetime", "reload", null);
    }

    ///<summary>Sets the date and/or time.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetDatetime(ServiceTarget target, InputDatetimeSetDatetimeParameters data)
    {
        _haContext.CallService("input_datetime", "set_datetime", target, data);
    }

    ///<summary>Sets the date and/or time.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="date">The target date. eg: &quot;2019-04-20&quot;</param>
    ///<param name="time">The target time. eg: &quot;05:04:20&quot;</param>
    ///<param name="datetime">The target date &amp; time. eg: &quot;2019-04-20 05:04:20&quot;</param>
    ///<param name="timestamp">The target date &amp; time, expressed by a UNIX timestamp.</param>
    public void SetDatetime(ServiceTarget target, string? date = null, DateTime? time = null, string? datetime = null, long? timestamp = null)
    {
        _haContext.CallService("input_datetime", "set_datetime", target, new InputDatetimeSetDatetimeParameters { Date = date, Time = time, Datetime = datetime, Timestamp = timestamp });
    }
}

public partial record InputDatetimeSetDatetimeParameters
{
    ///<summary>The target date. eg: &quot;2019-04-20&quot;</summary>
    [JsonPropertyName("date")]
    public string? Date { get; init; }

    ///<summary>The target time. eg: &quot;05:04:20&quot;</summary>
    [JsonPropertyName("time")]
    public DateTime? Time { get; init; }

    ///<summary>The target date &amp; time. eg: &quot;2019-04-20 05:04:20&quot;</summary>
    [JsonPropertyName("datetime")]
    public string? Datetime { get; init; }

    ///<summary>The target date &amp; time, expressed by a UNIX timestamp.</summary>
    [JsonPropertyName("timestamp")]
    public long? Timestamp { get; init; }
}

public partial class InputNumberServices
{
    private readonly IHaContext _haContext;
    public InputNumberServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Decrease an input number entity value by a certain amount.</summary>
    ///<param name="target">The target for this service call</param>
    public void Decrement(ServiceTarget target, InputNumberDecrementParameters data)
    {
        _haContext.CallService("input_number", "decrement", target, data);
    }

    ///<summary>Decrease an input number entity value by a certain amount.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="amount">The amount to decrease the input number with. If not provided, the step of the number entity will be used.</param>
    public void Decrement(ServiceTarget target, long? amount = null)
    {
        _haContext.CallService("input_number", "decrement", target, new InputNumberDecrementParameters { Amount = amount });
    }

    ///<summary>Increase an input number entity value by a certain amount.</summary>
    ///<param name="target">The target for this service call</param>
    public void Increment(ServiceTarget target, InputNumberIncrementParameters data)
    {
        _haContext.CallService("input_number", "increment", target, data);
    }

    ///<summary>Increase an input number entity value by a certain amount.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="amount">The amount to increase the input number with. If not provided, the step of the number entity will be used.</param>
    public void Increment(ServiceTarget target, long? amount = null)
    {
        _haContext.CallService("input_number", "increment", target, new InputNumberIncrementParameters { Amount = amount });
    }

    ///<summary>Set an input number entity to its maximum value.</summary>
    ///<param name="target">The target for this service call</param>
    public void Max(ServiceTarget target)
    {
        _haContext.CallService("input_number", "max", target);
    }

    ///<summary>Set an input number entity to its minimum value.</summary>
    ///<param name="target">The target for this service call</param>
    public void Min(ServiceTarget target)
    {
        _haContext.CallService("input_number", "min", target);
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("input_number", "reload", null);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, InputNumberSetValueParameters data)
    {
        _haContext.CallService("input_number", "set_value", target, data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="value">The target value.</param>
    public void SetValue(ServiceTarget target, double value)
    {
        _haContext.CallService("input_number", "set_value", target, new InputNumberSetValueParameters { Value = value });
    }
}

public partial record InputNumberDecrementParameters
{
    ///<summary>The amount to decrease the input number with. If not provided, the step of the number entity will be used.</summary>
    [JsonPropertyName("amount")]
    public long? Amount { get; init; }
}

public partial record InputNumberIncrementParameters
{
    ///<summary>The amount to increase the input number with. If not provided, the step of the number entity will be used.</summary>
    [JsonPropertyName("amount")]
    public long? Amount { get; init; }
}

public partial record InputNumberSetValueParameters
{
    ///<summary>The target value.</summary>
    [JsonPropertyName("value")]
    public double? Value { get; init; }
}

public partial class InputSelectServices
{
    private readonly IHaContext _haContext;
    public InputSelectServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Select an random option for an input_select entity.</summary>
    ///<param name="target">The target for this service call</param>
    public void Random(ServiceTarget target, InputSelectRandomParameters data)
    {
        _haContext.CallService("input_select", "random", target, data);
    }

    ///<summary>Select an random option for an input_select entity.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="options">Limits the options to select from. If not provided, all options will be considered.</param>
    public void Random(ServiceTarget target, object? options = null)
    {
        _haContext.CallService("input_select", "random", target, new InputSelectRandomParameters { Options = options });
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("input_select", "reload", null);
    }

    ///<summary>Selects the first option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectFirst(ServiceTarget target)
    {
        _haContext.CallService("input_select", "select_first", target);
    }

    ///<summary>Selects the last option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectLast(ServiceTarget target)
    {
        _haContext.CallService("input_select", "select_last", target);
    }

    ///<summary>Select the next option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectNext(ServiceTarget target, InputSelectSelectNextParameters data)
    {
        _haContext.CallService("input_select", "select_next", target, data);
    }

    ///<summary>Select the next option.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="cycle">If the option should cycle from the last to the first option on the list.</param>
    public void SelectNext(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("input_select", "select_next", target, new InputSelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectOption(ServiceTarget target, InputSelectSelectOptionParameters data)
    {
        _haContext.CallService("input_select", "select_option", target, data);
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public void SelectOption(ServiceTarget target, string option)
    {
        _haContext.CallService("input_select", "select_option", target, new InputSelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectPrevious(ServiceTarget target, InputSelectSelectPreviousParameters data)
    {
        _haContext.CallService("input_select", "select_previous", target, data);
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="cycle">If the option should cycle from the last to the first option on the list.</param>
    public void SelectPrevious(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("input_select", "select_previous", target, new InputSelectSelectPreviousParameters { Cycle = cycle });
    }

    ///<summary>Sets the options.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetOptions(ServiceTarget target, InputSelectSetOptionsParameters data)
    {
        _haContext.CallService("input_select", "set_options", target, data);
    }

    ///<summary>Sets the options.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="options">List of options. eg: [&quot;Item A&quot;, &quot;Item B&quot;, &quot;Item C&quot;]</param>
    public void SetOptions(ServiceTarget target, object options)
    {
        _haContext.CallService("input_select", "set_options", target, new InputSelectSetOptionsParameters { Options = options });
    }

    ///<summary>Shuffles the list of selectable options for an `input_select` entity. This is not persistent and will be undone once reloaded or Home Assistant restarts.</summary>
    ///<param name="target">The target for this service call</param>
    public void Shuffle(ServiceTarget target)
    {
        _haContext.CallService("input_select", "shuffle", target);
    }

    ///<summary>Sorts the list of selectable options for an `input_select` entity. This is not persistent and will be undone once reloaded or Home Assistant restarts.</summary>
    ///<param name="target">The target for this service call</param>
    public void Sort(ServiceTarget target)
    {
        _haContext.CallService("input_select", "sort", target);
    }
}

public partial record InputSelectRandomParameters
{
    ///<summary>Limits the options to select from. If not provided, all options will be considered.</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }
}

public partial record InputSelectSelectNextParameters
{
    ///<summary>If the option should cycle from the last to the first option on the list.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial record InputSelectSelectOptionParameters
{
    ///<summary>Option to be selected. eg: &quot;Item A&quot;</summary>
    [JsonPropertyName("option")]
    public string? Option { get; init; }
}

public partial record InputSelectSelectPreviousParameters
{
    ///<summary>If the option should cycle from the last to the first option on the list.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial record InputSelectSetOptionsParameters
{
    ///<summary>List of options. eg: [&quot;Item A&quot;, &quot;Item B&quot;, &quot;Item C&quot;]</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }
}

public partial class InputTextServices
{
    private readonly IHaContext _haContext;
    public InputTextServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("input_text", "reload", null);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, InputTextSetValueParameters data)
    {
        _haContext.CallService("input_text", "set_value", target, data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="value">The target value. eg: This is an example text</param>
    public void SetValue(ServiceTarget target, string value)
    {
        _haContext.CallService("input_text", "set_value", target, new InputTextSetValueParameters { Value = value });
    }
}

public partial record InputTextSetValueParameters
{
    ///<summary>The target value. eg: This is an example text</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial class LightServices
{
    private readonly IHaContext _haContext;
    public LightServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, LightToggleParameters data)
    {
        _haContext.CallService("light", "toggle", target, data);
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="colorName">A human-readable color name.</param>
    ///<param name="hsColor">Color in hue/sat format. A list of two integers. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</param>
    ///<param name="xyColor">Color in XY-format. A list of two decimal numbers between 0 and 1. eg: [0.52, 0.43]</param>
    ///<param name="colorTemp">Color temperature in mireds.</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightness">Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness, and 255 is the maximum brightness.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="white">Set the light to white mode.</param>
    ///<param name="profile">Name of a light profile to use. eg: relax</param>
    ///<param name="flash">Tell light to flash, can be either value short or long.</param>
    ///<param name="effect">Light effect.</param>
    public void Toggle(ServiceTarget target, long? transition = null, object? rgbColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, long? kelvin = null, long? brightness = null, long? brightnessPct = null, object? white = null, string? profile = null, object? flash = null, string? effect = null)
    {
        _haContext.CallService("light", "toggle", target, new LightToggleParameters { Transition = transition, RgbColor = rgbColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Kelvin = kelvin, Brightness = brightness, BrightnessPct = brightnessPct, White = white, Profile = profile, Flash = flash, Effect = effect });
    }

    ///<summary>Turn off one or more lights.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, LightTurnOffParameters data)
    {
        _haContext.CallService("light", "turn_off", target, data);
    }

    ///<summary>Turn off one or more lights.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="flash">Tell light to flash, can be either value short or long.</param>
    public void TurnOff(ServiceTarget target, long? transition = null, object? flash = null)
    {
        _haContext.CallService("light", "turn_off", target, new LightTurnOffParameters { Transition = transition, Flash = flash });
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, LightTurnOnParameters data)
    {
        _haContext.CallService("light", "turn_on", target, data);
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue.</param>
    ///<param name="rgbwColor">The color in RGBW format. A list of four integers between 0 and 255 representing the values of red, green, blue, and white. eg: [255, 100, 100, 50]</param>
    ///<param name="rgbwwColor">The color in RGBWW format. A list of five integers between 0 and 255 representing the values of red, green, blue, cold white, and warm white. eg: [255, 100, 100, 50, 70]</param>
    ///<param name="colorName">A human-readable color name.</param>
    ///<param name="hsColor">Color in hue/sat format. A list of two integers. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</param>
    ///<param name="xyColor">Color in XY-format. A list of two decimal numbers between 0 and 1. eg: [0.52, 0.43]</param>
    ///<param name="colorTemp">Color temperature in mireds.</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightness">Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness, and 255 is the maximum brightness.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="brightnessStep">Change brightness by an amount.</param>
    ///<param name="brightnessStepPct">Change brightness by a percentage.</param>
    ///<param name="white">Set the light to white mode.</param>
    ///<param name="profile">Name of a light profile to use. eg: relax</param>
    ///<param name="flash">Tell light to flash, can be either value short or long.</param>
    ///<param name="effect">Light effect.</param>
    public void TurnOn(ServiceTarget target, long? transition = null, object? rgbColor = null, object? rgbwColor = null, object? rgbwwColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, long? kelvin = null, long? brightness = null, long? brightnessPct = null, long? brightnessStep = null, long? brightnessStepPct = null, object? white = null, string? profile = null, object? flash = null, string? effect = null)
    {
        _haContext.CallService("light", "turn_on", target, new LightTurnOnParameters { Transition = transition, RgbColor = rgbColor, RgbwColor = rgbwColor, RgbwwColor = rgbwwColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Kelvin = kelvin, Brightness = brightness, BrightnessPct = brightnessPct, BrightnessStep = brightnessStep, BrightnessStepPct = brightnessStepPct, White = white, Profile = profile, Flash = flash, Effect = effect });
    }
}

public partial record LightToggleParameters
{
    ///<summary>Duration it takes to get to next state.</summary>
    [JsonPropertyName("transition")]
    public long? Transition { get; init; }

    ///<summary>The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</summary>
    [JsonPropertyName("rgb_color")]
    public object? RgbColor { get; init; }

    ///<summary>A human-readable color name.</summary>
    [JsonPropertyName("color_name")]
    public object? ColorName { get; init; }

    ///<summary>Color in hue/sat format. A list of two integers. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</summary>
    [JsonPropertyName("hs_color")]
    public object? HsColor { get; init; }

    ///<summary>Color in XY-format. A list of two decimal numbers between 0 and 1. eg: [0.52, 0.43]</summary>
    [JsonPropertyName("xy_color")]
    public object? XyColor { get; init; }

    ///<summary>Color temperature in mireds.</summary>
    [JsonPropertyName("color_temp")]
    public object? ColorTemp { get; init; }

    ///<summary>Color temperature in Kelvin.</summary>
    [JsonPropertyName("kelvin")]
    public long? Kelvin { get; init; }

    ///<summary>Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness, and 255 is the maximum brightness.</summary>
    [JsonPropertyName("brightness")]
    public long? Brightness { get; init; }

    ///<summary>Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</summary>
    [JsonPropertyName("brightness_pct")]
    public long? BrightnessPct { get; init; }

    ///<summary>Set the light to white mode.</summary>
    [JsonPropertyName("white")]
    public object? White { get; init; }

    ///<summary>Name of a light profile to use. eg: relax</summary>
    [JsonPropertyName("profile")]
    public string? Profile { get; init; }

    ///<summary>Tell light to flash, can be either value short or long.</summary>
    [JsonPropertyName("flash")]
    public object? Flash { get; init; }

    ///<summary>Light effect.</summary>
    [JsonPropertyName("effect")]
    public string? Effect { get; init; }
}

public partial record LightTurnOffParameters
{
    ///<summary>Duration it takes to get to next state.</summary>
    [JsonPropertyName("transition")]
    public long? Transition { get; init; }

    ///<summary>Tell light to flash, can be either value short or long.</summary>
    [JsonPropertyName("flash")]
    public object? Flash { get; init; }
}

public partial record LightTurnOnParameters
{
    ///<summary>Duration it takes to get to next state.</summary>
    [JsonPropertyName("transition")]
    public long? Transition { get; init; }

    ///<summary>The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue.</summary>
    [JsonPropertyName("rgb_color")]
    public object? RgbColor { get; init; }

    ///<summary>The color in RGBW format. A list of four integers between 0 and 255 representing the values of red, green, blue, and white. eg: [255, 100, 100, 50]</summary>
    [JsonPropertyName("rgbw_color")]
    public object? RgbwColor { get; init; }

    ///<summary>The color in RGBWW format. A list of five integers between 0 and 255 representing the values of red, green, blue, cold white, and warm white. eg: [255, 100, 100, 50, 70]</summary>
    [JsonPropertyName("rgbww_color")]
    public object? RgbwwColor { get; init; }

    ///<summary>A human-readable color name.</summary>
    [JsonPropertyName("color_name")]
    public object? ColorName { get; init; }

    ///<summary>Color in hue/sat format. A list of two integers. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</summary>
    [JsonPropertyName("hs_color")]
    public object? HsColor { get; init; }

    ///<summary>Color in XY-format. A list of two decimal numbers between 0 and 1. eg: [0.52, 0.43]</summary>
    [JsonPropertyName("xy_color")]
    public object? XyColor { get; init; }

    ///<summary>Color temperature in mireds.</summary>
    [JsonPropertyName("color_temp")]
    public object? ColorTemp { get; init; }

    ///<summary>Color temperature in Kelvin.</summary>
    [JsonPropertyName("kelvin")]
    public long? Kelvin { get; init; }

    ///<summary>Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness, and 255 is the maximum brightness.</summary>
    [JsonPropertyName("brightness")]
    public long? Brightness { get; init; }

    ///<summary>Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</summary>
    [JsonPropertyName("brightness_pct")]
    public long? BrightnessPct { get; init; }

    ///<summary>Change brightness by an amount.</summary>
    [JsonPropertyName("brightness_step")]
    public long? BrightnessStep { get; init; }

    ///<summary>Change brightness by a percentage.</summary>
    [JsonPropertyName("brightness_step_pct")]
    public long? BrightnessStepPct { get; init; }

    ///<summary>Set the light to white mode.</summary>
    [JsonPropertyName("white")]
    public object? White { get; init; }

    ///<summary>Name of a light profile to use. eg: relax</summary>
    [JsonPropertyName("profile")]
    public string? Profile { get; init; }

    ///<summary>Tell light to flash, can be either value short or long.</summary>
    [JsonPropertyName("flash")]
    public object? Flash { get; init; }

    ///<summary>Light effect.</summary>
    [JsonPropertyName("effect")]
    public string? Effect { get; init; }
}

public partial class LocaltuyaServices
{
    private readonly IHaContext _haContext;
    public LocaltuyaServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reload localtuya and reconnect to all devices.</summary>
    public void Reload()
    {
        _haContext.CallService("localtuya", "reload", null);
    }

    ///<summary>Change the value of a datapoint (DP)</summary>
    public void SetDp(LocaltuyaSetDpParameters data)
    {
        _haContext.CallService("localtuya", "set_dp", null, data);
    }

    ///<summary>Change the value of a datapoint (DP)</summary>
    ///<param name="deviceId">Device ID of device to change datapoint value for eg: 11100118278aab4de001</param>
    ///<param name="dp">Datapoint index eg: 1</param>
    ///<param name="value">New value to set eg: False</param>
    public void SetDp(object? deviceId = null, object? dp = null, object? value = null)
    {
        _haContext.CallService("localtuya", "set_dp", null, new LocaltuyaSetDpParameters { DeviceId = deviceId, Dp = dp, Value = value });
    }
}

public partial record LocaltuyaSetDpParameters
{
    ///<summary>Device ID of device to change datapoint value for eg: 11100118278aab4de001</summary>
    [JsonPropertyName("device_id")]
    public object? DeviceId { get; init; }

    ///<summary>Datapoint index eg: 1</summary>
    [JsonPropertyName("dp")]
    public object? Dp { get; init; }

    ///<summary>New value to set eg: False</summary>
    [JsonPropertyName("value")]
    public object? Value { get; init; }
}

public partial class LockServices
{
    private readonly IHaContext _haContext;
    public LockServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Locks a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void Lock(ServiceTarget target, LockLockParameters data)
    {
        _haContext.CallService("lock", "lock", target, data);
    }

    ///<summary>Locks a lock.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">Code used to lock the lock. eg: 1234</param>
    public void Lock(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("lock", "lock", target, new LockLockParameters { Code = code });
    }

    ///<summary>Opens a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void Open(ServiceTarget target, LockOpenParameters data)
    {
        _haContext.CallService("lock", "open", target, data);
    }

    ///<summary>Opens a lock.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">Code used to open the lock. eg: 1234</param>
    public void Open(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("lock", "open", target, new LockOpenParameters { Code = code });
    }

    ///<summary>Unlocks a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void Unlock(ServiceTarget target, LockUnlockParameters data)
    {
        _haContext.CallService("lock", "unlock", target, data);
    }

    ///<summary>Unlocks a lock.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">Code used to unlock the lock. eg: 1234</param>
    public void Unlock(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("lock", "unlock", target, new LockUnlockParameters { Code = code });
    }
}

public partial record LockLockParameters
{
    ///<summary>Code used to lock the lock. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record LockOpenParameters
{
    ///<summary>Code used to open the lock. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record LockUnlockParameters
{
    ///<summary>Code used to unlock the lock. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial class LogbookServices
{
    private readonly IHaContext _haContext;
    public LogbookServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Creates a custom entry in the logbook.</summary>
    public void Log(LogbookLogParameters data)
    {
        _haContext.CallService("logbook", "log", null, data);
    }

    ///<summary>Creates a custom entry in the logbook.</summary>
    ///<param name="name">Custom name for an entity, can be referenced using an `entity_id`. eg: Kitchen</param>
    ///<param name="message">Message of the logbook entry. eg: is being used</param>
    ///<param name="entityId">Entity to reference in the logbook entry.</param>
    ///<param name="domain">Determines which icon is used in the logbook entry. The icon illustrates the integration domain related to this logbook entry. eg: light</param>
    public void Log(string name, string message, string? entityId = null, string? domain = null)
    {
        _haContext.CallService("logbook", "log", null, new LogbookLogParameters { Name = name, Message = message, EntityId = entityId, Domain = domain });
    }
}

public partial record LogbookLogParameters
{
    ///<summary>Custom name for an entity, can be referenced using an `entity_id`. eg: Kitchen</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>Message of the logbook entry. eg: is being used</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Entity to reference in the logbook entry.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Determines which icon is used in the logbook entry. The icon illustrates the integration domain related to this logbook entry. eg: light</summary>
    [JsonPropertyName("domain")]
    public string? Domain { get; init; }
}

public partial class LoggerServices
{
    private readonly IHaContext _haContext;
    public LoggerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the default log level for integrations.</summary>
    public void SetDefaultLevel(LoggerSetDefaultLevelParameters data)
    {
        _haContext.CallService("logger", "set_default_level", null, data);
    }

    ///<summary>Sets the default log level for integrations.</summary>
    ///<param name="level">Default severity level for all integrations.</param>
    public void SetDefaultLevel(object? level = null)
    {
        _haContext.CallService("logger", "set_default_level", null, new LoggerSetDefaultLevelParameters { Level = level });
    }

    ///<summary>Sets the log level for one or more integrations.</summary>
    public void SetLevel()
    {
        _haContext.CallService("logger", "set_level", null);
    }
}

public partial record LoggerSetDefaultLevelParameters
{
    ///<summary>Default severity level for all integrations.</summary>
    [JsonPropertyName("level")]
    public object? Level { get; init; }
}

public partial class MailAndPackagesServices
{
    private readonly IHaContext _haContext;
    public MailAndPackagesServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Refershes the Mail Camera sepcified or all of them at once. Leave blank to refresh them all.</summary>
    public void UpdateImage(MailAndPackagesUpdateImageParameters data)
    {
        _haContext.CallService("mail_and_packages", "update_image", null, data);
    }

    ///<summary>Refershes the Mail Camera sepcified or all of them at once. Leave blank to refresh them all.</summary>
    ///<param name="entityId">The camera entity to refresh. eg: camera.mail_usps_camera</param>
    public void UpdateImage(string? entityId = null)
    {
        _haContext.CallService("mail_and_packages", "update_image", null, new MailAndPackagesUpdateImageParameters { EntityId = entityId });
    }
}

public partial record MailAndPackagesUpdateImageParameters
{
    ///<summary>The camera entity to refresh. eg: camera.mail_usps_camera</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }
}

public partial class MediaPlayerServices
{
    private readonly IHaContext _haContext;
    public MediaPlayerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Clears the playlist.</summary>
    ///<param name="target">The target for this service call</param>
    public void ClearPlaylist(ServiceTarget target)
    {
        _haContext.CallService("media_player", "clear_playlist", target);
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    ///<param name="target">The target for this service call</param>
    public void Join(ServiceTarget target, MediaPlayerJoinParameters data)
    {
        _haContext.CallService("media_player", "join", target, data);
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="groupMembers">The players which will be synced with the playback specified in `target`. eg: - media_player.multiroom_player2 - media_player.multiroom_player3 </param>
    public void Join(ServiceTarget target, string groupMembers)
    {
        _haContext.CallService("media_player", "join", target, new MediaPlayerJoinParameters { GroupMembers = groupMembers });
    }

    ///<summary>Selects the next track.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaNextTrack(ServiceTarget target)
    {
        _haContext.CallService("media_player", "media_next_track", target);
    }

    ///<summary>Pauses.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaPause(ServiceTarget target)
    {
        _haContext.CallService("media_player", "media_pause", target);
    }

    ///<summary>Starts playing.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaPlay(ServiceTarget target)
    {
        _haContext.CallService("media_player", "media_play", target);
    }

    ///<summary>Toggles play/pause.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaPlayPause(ServiceTarget target)
    {
        _haContext.CallService("media_player", "media_play_pause", target);
    }

    ///<summary>Selects the previous track.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaPreviousTrack(ServiceTarget target)
    {
        _haContext.CallService("media_player", "media_previous_track", target);
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaSeek(ServiceTarget target, MediaPlayerMediaSeekParameters data)
    {
        _haContext.CallService("media_player", "media_seek", target, data);
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="seekPosition">Target position in the currently playing media. The format is platform dependent.</param>
    public void MediaSeek(ServiceTarget target, double seekPosition)
    {
        _haContext.CallService("media_player", "media_seek", target, new MediaPlayerMediaSeekParameters { SeekPosition = seekPosition });
    }

    ///<summary>Stops playing.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaStop(ServiceTarget target)
    {
        _haContext.CallService("media_player", "media_stop", target);
    }

    ///<summary>Starts playing specified media.</summary>
    ///<param name="target">The target for this service call</param>
    public void PlayMedia(ServiceTarget target, MediaPlayerPlayMediaParameters data)
    {
        _haContext.CallService("media_player", "play_media", target, data);
    }

    ///<summary>Starts playing specified media.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="mediaContentId">The ID of the content to play. Platform dependent. eg: https://home-assistant.io/images/cast/splash.png</param>
    ///<param name="mediaContentType">The type of the content to play. Such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="enqueue">If the content should be played now or be added to the queue.</param>
    ///<param name="announce">If the media should be played as an announcement. eg: true</param>
    public void PlayMedia(ServiceTarget target, string mediaContentId, string mediaContentType, object? enqueue = null, bool? announce = null)
    {
        _haContext.CallService("media_player", "play_media", target, new MediaPlayerPlayMediaParameters { MediaContentId = mediaContentId, MediaContentType = mediaContentType, Enqueue = enqueue, Announce = announce });
    }

    ///<summary>Playback mode that plays the media in a loop.</summary>
    ///<param name="target">The target for this service call</param>
    public void RepeatSet(ServiceTarget target, MediaPlayerRepeatSetParameters data)
    {
        _haContext.CallService("media_player", "repeat_set", target, data);
    }

    ///<summary>Playback mode that plays the media in a loop.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="repeat">Repeat mode to set.</param>
    public void RepeatSet(ServiceTarget target, object repeat)
    {
        _haContext.CallService("media_player", "repeat_set", target, new MediaPlayerRepeatSetParameters { Repeat = repeat });
    }

    ///<summary>Selects a specific sound mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectSoundMode(ServiceTarget target, MediaPlayerSelectSoundModeParameters data)
    {
        _haContext.CallService("media_player", "select_sound_mode", target, data);
    }

    ///<summary>Selects a specific sound mode.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="soundMode">Name of the sound mode to switch to. eg: Music</param>
    public void SelectSoundMode(ServiceTarget target, string? soundMode = null)
    {
        _haContext.CallService("media_player", "select_sound_mode", target, new MediaPlayerSelectSoundModeParameters { SoundMode = soundMode });
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectSource(ServiceTarget target, MediaPlayerSelectSourceParameters data)
    {
        _haContext.CallService("media_player", "select_source", target, data);
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="source">Name of the source to switch to. Platform dependent. eg: video1</param>
    public void SelectSource(ServiceTarget target, string source)
    {
        _haContext.CallService("media_player", "select_source", target, new MediaPlayerSelectSourceParameters { Source = source });
    }

    ///<summary>Playback mode that selects the media in randomized order.</summary>
    ///<param name="target">The target for this service call</param>
    public void ShuffleSet(ServiceTarget target, MediaPlayerShuffleSetParameters data)
    {
        _haContext.CallService("media_player", "shuffle_set", target, data);
    }

    ///<summary>Playback mode that selects the media in randomized order.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="shuffle">Whether or not shuffle mode is enabled.</param>
    public void ShuffleSet(ServiceTarget target, bool shuffle)
    {
        _haContext.CallService("media_player", "shuffle_set", target, new MediaPlayerShuffleSetParameters { Shuffle = shuffle });
    }

    ///<summary>Toggles a media player on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("media_player", "toggle", target);
    }

    ///<summary>Turns off the power of the media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("media_player", "turn_off", target);
    }

    ///<summary>Turns on the power of the media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("media_player", "turn_on", target);
    }

    ///<summary>Removes the player from a group. Only works on platforms which support player groups.</summary>
    ///<param name="target">The target for this service call</param>
    public void Unjoin(ServiceTarget target)
    {
        _haContext.CallService("media_player", "unjoin", target);
    }

    ///<summary>Turns down the volume.</summary>
    ///<param name="target">The target for this service call</param>
    public void VolumeDown(ServiceTarget target)
    {
        _haContext.CallService("media_player", "volume_down", target);
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void VolumeMute(ServiceTarget target, MediaPlayerVolumeMuteParameters data)
    {
        _haContext.CallService("media_player", "volume_mute", target, data);
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="isVolumeMuted">Defines whether or not it is muted.</param>
    public void VolumeMute(ServiceTarget target, bool isVolumeMuted)
    {
        _haContext.CallService("media_player", "volume_mute", target, new MediaPlayerVolumeMuteParameters { IsVolumeMuted = isVolumeMuted });
    }

    ///<summary>Sets the volume level.</summary>
    ///<param name="target">The target for this service call</param>
    public void VolumeSet(ServiceTarget target, MediaPlayerVolumeSetParameters data)
    {
        _haContext.CallService("media_player", "volume_set", target, data);
    }

    ///<summary>Sets the volume level.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="volumeLevel">The volume. 0 is inaudible, 1 is the maximum volume.</param>
    public void VolumeSet(ServiceTarget target, double volumeLevel)
    {
        _haContext.CallService("media_player", "volume_set", target, new MediaPlayerVolumeSetParameters { VolumeLevel = volumeLevel });
    }

    ///<summary>Turns up the volume.</summary>
    ///<param name="target">The target for this service call</param>
    public void VolumeUp(ServiceTarget target)
    {
        _haContext.CallService("media_player", "volume_up", target);
    }
}

public partial record MediaPlayerJoinParameters
{
    ///<summary>The players which will be synced with the playback specified in `target`. eg: - media_player.multiroom_player2 - media_player.multiroom_player3 </summary>
    [JsonPropertyName("group_members")]
    public string? GroupMembers { get; init; }
}

public partial record MediaPlayerMediaSeekParameters
{
    ///<summary>Target position in the currently playing media. The format is platform dependent.</summary>
    [JsonPropertyName("seek_position")]
    public double? SeekPosition { get; init; }
}

public partial record MediaPlayerPlayMediaParameters
{
    ///<summary>The ID of the content to play. Platform dependent. eg: https://home-assistant.io/images/cast/splash.png</summary>
    [JsonPropertyName("media_content_id")]
    public string? MediaContentId { get; init; }

    ///<summary>The type of the content to play. Such as image, music, tv show, video, episode, channel, or playlist. eg: music</summary>
    [JsonPropertyName("media_content_type")]
    public string? MediaContentType { get; init; }

    ///<summary>If the content should be played now or be added to the queue.</summary>
    [JsonPropertyName("enqueue")]
    public object? Enqueue { get; init; }

    ///<summary>If the media should be played as an announcement. eg: true</summary>
    [JsonPropertyName("announce")]
    public bool? Announce { get; init; }
}

public partial record MediaPlayerRepeatSetParameters
{
    ///<summary>Repeat mode to set.</summary>
    [JsonPropertyName("repeat")]
    public object? Repeat { get; init; }
}

public partial record MediaPlayerSelectSoundModeParameters
{
    ///<summary>Name of the sound mode to switch to. eg: Music</summary>
    [JsonPropertyName("sound_mode")]
    public string? SoundMode { get; init; }
}

public partial record MediaPlayerSelectSourceParameters
{
    ///<summary>Name of the source to switch to. Platform dependent. eg: video1</summary>
    [JsonPropertyName("source")]
    public string? Source { get; init; }
}

public partial record MediaPlayerShuffleSetParameters
{
    ///<summary>Whether or not shuffle mode is enabled.</summary>
    [JsonPropertyName("shuffle")]
    public bool? Shuffle { get; init; }
}

public partial record MediaPlayerVolumeMuteParameters
{
    ///<summary>Defines whether or not it is muted.</summary>
    [JsonPropertyName("is_volume_muted")]
    public bool? IsVolumeMuted { get; init; }
}

public partial record MediaPlayerVolumeSetParameters
{
    ///<summary>The volume. 0 is inaudible, 1 is the maximum volume.</summary>
    [JsonPropertyName("volume_level")]
    public double? VolumeLevel { get; init; }
}

public partial class MotionBlindsServices
{
    private readonly IHaContext _haContext;
    public MotionBlindsServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the absolute position of the cover.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetAbsolutePosition(ServiceTarget target, MotionBlindsSetAbsolutePositionParameters data)
    {
        _haContext.CallService("motion_blinds", "set_absolute_position", target, data);
    }

    ///<summary>Sets the absolute position of the cover.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="absolutePosition">Absolute position to move to.</param>
    ///<param name="tiltPosition">Tilt position to move to.</param>
    ///<param name="width">Specify the width that is covered, only for TDBU Combined entities.</param>
    public void SetAbsolutePosition(ServiceTarget target, long absolutePosition, long? tiltPosition = null, long? width = null)
    {
        _haContext.CallService("motion_blinds", "set_absolute_position", target, new MotionBlindsSetAbsolutePositionParameters { AbsolutePosition = absolutePosition, TiltPosition = tiltPosition, Width = width });
    }
}

public partial record MotionBlindsSetAbsolutePositionParameters
{
    ///<summary>Absolute position to move to.</summary>
    [JsonPropertyName("absolute_position")]
    public long? AbsolutePosition { get; init; }

    ///<summary>Tilt position to move to.</summary>
    [JsonPropertyName("tilt_position")]
    public long? TiltPosition { get; init; }

    ///<summary>Specify the width that is covered, only for TDBU Combined entities.</summary>
    [JsonPropertyName("width")]
    public long? Width { get; init; }
}

public partial class MqttServices
{
    private readonly IHaContext _haContext;
    public MqttServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Writes all messages on a specific topic into the `mqtt_dump.txt` file in your configuration folder.</summary>
    public void Dump(MqttDumpParameters data)
    {
        _haContext.CallService("mqtt", "dump", null, data);
    }

    ///<summary>Writes all messages on a specific topic into the `mqtt_dump.txt` file in your configuration folder.</summary>
    ///<param name="topic">Topic to listen to. eg: OpenZWave/#</param>
    ///<param name="duration">How long we should listen for messages in seconds.</param>
    public void Dump(string? topic = null, long? duration = null)
    {
        _haContext.CallService("mqtt", "dump", null, new MqttDumpParameters { Topic = topic, Duration = duration });
    }

    ///<summary>Publishes a message to an MQTT topic.</summary>
    public void Publish(MqttPublishParameters data)
    {
        _haContext.CallService("mqtt", "publish", null, data);
    }

    ///<summary>Publishes a message to an MQTT topic.</summary>
    ///<param name="topic">Topic to publish to. eg: /homeassistant/hello</param>
    ///<param name="payload">The payload to publish. eg: This is great</param>
    ///<param name="payloadTemplate">Template to render as a payload value. If a payload is provided, the template is ignored. eg: {{ states(&apos;sensor.temperature&apos;) }}</param>
    ///<param name="qos">Quality of Service to use. O. At most once. 1: At least once. 2: Exactly once.</param>
    ///<param name="retain">If the message should have the retain flag set. If set, the broker stores the most recent message on a topic.</param>
    public void Publish(string topic, string? payload = null, object? payloadTemplate = null, object? qos = null, bool? retain = null)
    {
        _haContext.CallService("mqtt", "publish", null, new MqttPublishParameters { Topic = topic, Payload = payload, PayloadTemplate = payloadTemplate, Qos = qos, Retain = retain });
    }

    ///<summary>Reloads MQTT entities from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("mqtt", "reload", null);
    }
}

public partial record MqttDumpParameters
{
    ///<summary>Topic to listen to. eg: OpenZWave/#</summary>
    [JsonPropertyName("topic")]
    public string? Topic { get; init; }

    ///<summary>How long we should listen for messages in seconds.</summary>
    [JsonPropertyName("duration")]
    public long? Duration { get; init; }
}

public partial record MqttPublishParameters
{
    ///<summary>Topic to publish to. eg: /homeassistant/hello</summary>
    [JsonPropertyName("topic")]
    public string? Topic { get; init; }

    ///<summary>The payload to publish. eg: This is great</summary>
    [JsonPropertyName("payload")]
    public string? Payload { get; init; }

    ///<summary>Template to render as a payload value. If a payload is provided, the template is ignored. eg: {{ states(&apos;sensor.temperature&apos;) }}</summary>
    [JsonPropertyName("payload_template")]
    public object? PayloadTemplate { get; init; }

    ///<summary>Quality of Service to use. O. At most once. 1: At least once. 2: Exactly once.</summary>
    [JsonPropertyName("qos")]
    public object? Qos { get; init; }

    ///<summary>If the message should have the retain flag set. If set, the broker stores the most recent message on a topic.</summary>
    [JsonPropertyName("retain")]
    public bool? Retain { get; init; }
}

public partial class NotifyServices
{
    private readonly IHaContext _haContext;
    public NotifyServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sends a notification message using the mobile_app_sm_g780g integration.</summary>
    public void MobileAppSmG780g(NotifyMobileAppSmG780gParameters data)
    {
        _haContext.CallService("notify", "mobile_app_sm_g780g", null, data);
    }

    ///<summary>Sends a notification message using the mobile_app_sm_g780g integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void MobileAppSmG780g(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "mobile_app_sm_g780g", null, new NotifyMobileAppSmG780gParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the mobile_app_sm_s908b integration.</summary>
    public void MobileAppSmS908b(NotifyMobileAppSmS908bParameters data)
    {
        _haContext.CallService("notify", "mobile_app_sm_s908b", null, data);
    }

    ///<summary>Sends a notification message using the mobile_app_sm_s908b integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void MobileAppSmS908b(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "mobile_app_sm_s908b", null, new NotifyMobileAppSmS908bParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the mobile_app_sm_t860 integration.</summary>
    public void MobileAppSmT860(NotifyMobileAppSmT860Parameters data)
    {
        _haContext.CallService("notify", "mobile_app_sm_t860", null, data);
    }

    ///<summary>Sends a notification message using the mobile_app_sm_t860 integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void MobileAppSmT860(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "mobile_app_sm_t860", null, new NotifyMobileAppSmT860Parameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the notify service.</summary>
    public void Notify(NotifyNotifyParameters data)
    {
        _haContext.CallService("notify", "notify", null, data);
    }

    ///<summary>Sends a notification message using the notify service.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void Notify(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "notify", null, new NotifyNotifyParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification that is visible in the **Notifications** panel.</summary>
    public void PersistentNotification(NotifyPersistentNotificationParameters data)
    {
        _haContext.CallService("notify", "persistent_notification", null, data);
    }

    ///<summary>Sends a notification that is visible in the **Notifications** panel.</summary>
    ///<param name="message">Message body of the notification. eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title">Title of the notification. eg: Your Garage Door Friend</param>
    ///<param name="data">Some integrations provide extended functionality. For information on how to use _data_, refer to the integration documentation.. eg: platform specific</param>
    public void PersistentNotification(string message, string? title = null, object? data = null)
    {
        _haContext.CallService("notify", "persistent_notification", null, new NotifyPersistentNotificationParameters { Message = message, Title = title, Data = data });
    }
}

public partial record NotifyMobileAppSmG780gParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyMobileAppSmS908bParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyMobileAppSmT860Parameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyNotifyParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyPersistentNotificationParameters
{
    ///<summary>Message body of the notification. eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Title of the notification. eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>Some integrations provide extended functionality. For information on how to use _data_, refer to the integration documentation.. eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial class NumberServices
{
    private readonly IHaContext _haContext;
    public NumberServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Decrease a number entity value by a certain amount.</summary>
    ///<param name="target">The target for this service call</param>
    public void Decrement(ServiceTarget target, NumberDecrementParameters data)
    {
        _haContext.CallService("number", "decrement", target, data);
    }

    ///<summary>Decrease a number entity value by a certain amount.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="amount">The amount to decrease the number with. If not provided, the step of the number entity will be used.</param>
    public void Decrement(ServiceTarget target, long? amount = null)
    {
        _haContext.CallService("number", "decrement", target, new NumberDecrementParameters { Amount = amount });
    }

    ///<summary>Increase a number entity value by a certain amount.</summary>
    ///<param name="target">The target for this service call</param>
    public void Increment(ServiceTarget target, NumberIncrementParameters data)
    {
        _haContext.CallService("number", "increment", target, data);
    }

    ///<summary>Increase a number entity value by a certain amount.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="amount">The amount to increase the number with. If not provided, the step of the number entity will be used.</param>
    public void Increment(ServiceTarget target, long? amount = null)
    {
        _haContext.CallService("number", "increment", target, new NumberIncrementParameters { Amount = amount });
    }

    ///<summary>Set a number entity to its maximum value.</summary>
    ///<param name="target">The target for this service call</param>
    public void Max(ServiceTarget target)
    {
        _haContext.CallService("number", "max", target);
    }

    ///<summary>Set a number entity to its minimum value.</summary>
    ///<param name="target">The target for this service call</param>
    public void Min(ServiceTarget target)
    {
        _haContext.CallService("number", "min", target);
    }

    ///<summary>Sets the value of a number.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, NumberSetValueParameters data)
    {
        _haContext.CallService("number", "set_value", target, data);
    }

    ///<summary>Sets the value of a number.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="value">The target value to set. eg: 42</param>
    public void SetValue(ServiceTarget target, string? value = null)
    {
        _haContext.CallService("number", "set_value", target, new NumberSetValueParameters { Value = value });
    }
}

public partial record NumberDecrementParameters
{
    ///<summary>The amount to decrease the number with. If not provided, the step of the number entity will be used.</summary>
    [JsonPropertyName("amount")]
    public long? Amount { get; init; }
}

public partial record NumberIncrementParameters
{
    ///<summary>The amount to increase the number with. If not provided, the step of the number entity will be used.</summary>
    [JsonPropertyName("amount")]
    public long? Amount { get; init; }
}

public partial record NumberSetValueParameters
{
    ///<summary>The target value to set. eg: 42</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial class OpenaiConversationServices
{
    private readonly IHaContext _haContext;
    public OpenaiConversationServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Turn a prompt into an image</summary>
    public void GenerateImage(OpenaiConversationGenerateImageParameters data)
    {
        _haContext.CallService("openai_conversation", "generate_image", null, data);
    }

    ///<summary>Turn a prompt into an image</summary>
    ///<param name="configEntry">The config entry to use for this service</param>
    ///<param name="prompt">The text to turn into an image eg: A photo of a dog</param>
    ///<param name="size">The size of the image to generate eg: 512</param>
    public void GenerateImage(object configEntry, string prompt, object size)
    {
        _haContext.CallService("openai_conversation", "generate_image", null, new OpenaiConversationGenerateImageParameters { ConfigEntry = configEntry, Prompt = prompt, Size = size });
    }
}

public partial record OpenaiConversationGenerateImageParameters
{
    ///<summary>The config entry to use for this service</summary>
    [JsonPropertyName("config_entry")]
    public object? ConfigEntry { get; init; }

    ///<summary>The text to turn into an image eg: A photo of a dog</summary>
    [JsonPropertyName("prompt")]
    public string? Prompt { get; init; }

    ///<summary>The size of the image to generate eg: 512</summary>
    [JsonPropertyName("size")]
    public object? Size { get; init; }
}

public partial class PersistentNotificationServices
{
    private readonly IHaContext _haContext;
    public PersistentNotificationServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Shows a notification on the **Notifications** panel.</summary>
    public void Create(PersistentNotificationCreateParameters data)
    {
        _haContext.CallService("persistent_notification", "create", null, data);
    }

    ///<summary>Shows a notification on the **Notifications** panel.</summary>
    ///<param name="message">Message body of the notification. eg: Please check your configuration.yaml.</param>
    ///<param name="title">Optional title of the notification. eg: Test notification</param>
    ///<param name="notificationId">ID of the notification. This new notification will overwrite an existing notification with the same ID. eg: 1234</param>
    public void Create(string message, string? title = null, string? notificationId = null)
    {
        _haContext.CallService("persistent_notification", "create", null, new PersistentNotificationCreateParameters { Message = message, Title = title, NotificationId = notificationId });
    }

    ///<summary>Removes a notification from the **Notifications** panel.</summary>
    public void Dismiss(PersistentNotificationDismissParameters data)
    {
        _haContext.CallService("persistent_notification", "dismiss", null, data);
    }

    ///<summary>Removes a notification from the **Notifications** panel.</summary>
    ///<param name="notificationId">ID of the notification to be removed. eg: 1234</param>
    public void Dismiss(string notificationId)
    {
        _haContext.CallService("persistent_notification", "dismiss", null, new PersistentNotificationDismissParameters { NotificationId = notificationId });
    }

    ///<summary>Removes all notifications from the **Notifications** panel.</summary>
    public void DismissAll()
    {
        _haContext.CallService("persistent_notification", "dismiss_all", null);
    }
}

public partial record PersistentNotificationCreateParameters
{
    ///<summary>Message body of the notification. eg: Please check your configuration.yaml.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Optional title of the notification. eg: Test notification</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>ID of the notification. This new notification will overwrite an existing notification with the same ID. eg: 1234</summary>
    [JsonPropertyName("notification_id")]
    public string? NotificationId { get; init; }
}

public partial record PersistentNotificationDismissParameters
{
    ///<summary>ID of the notification to be removed. eg: 1234</summary>
    [JsonPropertyName("notification_id")]
    public string? NotificationId { get; init; }
}

public partial class PersonServices
{
    private readonly IHaContext _haContext;
    public PersonServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads persons from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("person", "reload", null);
    }
}

public partial class PicnicServices
{
    private readonly IHaContext _haContext;
    public PicnicServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Adds a product to the cart based on a search string or product ID. The search string and product ID are exclusive.</summary>
    public void AddProduct(PicnicAddProductParameters data)
    {
        _haContext.CallService("picnic", "add_product", null, data);
    }

    ///<summary>Adds a product to the cart based on a search string or product ID. The search string and product ID are exclusive.</summary>
    ///<param name="configEntryId">The product will be added to the selected service.</param>
    ///<param name="productId">The product ID of a Picnic product. eg: 10510201</param>
    ///<param name="productName">Search for a product and add the first result. eg: Yoghurt</param>
    ///<param name="amount">Amount to add of the selected product.</param>
    public void AddProduct(object configEntryId, string? productId = null, string? productName = null, long? amount = null)
    {
        _haContext.CallService("picnic", "add_product", null, new PicnicAddProductParameters { ConfigEntryId = configEntryId, ProductId = productId, ProductName = productName, Amount = amount });
    }
}

public partial record PicnicAddProductParameters
{
    ///<summary>The product will be added to the selected service.</summary>
    [JsonPropertyName("config_entry_id")]
    public object? ConfigEntryId { get; init; }

    ///<summary>The product ID of a Picnic product. eg: 10510201</summary>
    [JsonPropertyName("product_id")]
    public string? ProductId { get; init; }

    ///<summary>Search for a product and add the first result. eg: Yoghurt</summary>
    [JsonPropertyName("product_name")]
    public string? ProductName { get; init; }

    ///<summary>Amount to add of the selected product.</summary>
    [JsonPropertyName("amount")]
    public long? Amount { get; init; }
}

public partial class PingServices
{
    private readonly IHaContext _haContext;
    public PingServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads ping sensors from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("ping", "reload", null);
    }
}

public partial class PowercalcServices
{
    private readonly IHaContext _haContext;
    public PowercalcServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Start execution of a playbook.</summary>
    ///<param name="target">The target for this service call</param>
    public void ActivatePlaybook(ServiceTarget target, PowercalcActivatePlaybookParameters data)
    {
        _haContext.CallService("powercalc", "activate_playbook", target, data);
    }

    ///<summary>Start execution of a playbook.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="playbookId">Playbook identifier. eg: program1</param>
    public void ActivatePlaybook(ServiceTarget target, string playbookId)
    {
        _haContext.CallService("powercalc", "activate_playbook", target, new PowercalcActivatePlaybookParameters { PlaybookId = playbookId });
    }

    ///<summary>Sets the energy sensor to a given kWh value.</summary>
    ///<param name="target">The target for this service call</param>
    public void CalibrateEnergy(ServiceTarget target, PowercalcCalibrateEnergyParameters data)
    {
        _haContext.CallService("powercalc", "calibrate_energy", target, data);
    }

    ///<summary>Sets the energy sensor to a given kWh value.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="value">The value to set. eg: 100</param>
    public void CalibrateEnergy(ServiceTarget target, string value)
    {
        _haContext.CallService("powercalc", "calibrate_energy", target, new PowercalcCalibrateEnergyParameters { Value = value });
    }

    ///<summary>Calibrates a utility meter sensor.</summary>
    ///<param name="target">The target for this service call</param>
    public void CalibrateUtilityMeter(ServiceTarget target, PowercalcCalibrateUtilityMeterParameters data)
    {
        _haContext.CallService("powercalc", "calibrate_utility_meter", target, data);
    }

    ///<summary>Calibrates a utility meter sensor.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="value">The value to set. eg: 100</param>
    public void CalibrateUtilityMeter(ServiceTarget target, string value)
    {
        _haContext.CallService("powercalc", "calibrate_utility_meter", target, new PowercalcCalibrateUtilityMeterParameters { Value = value });
    }

    ///<summary>Increases the sensor with a given amount.</summary>
    ///<param name="target">The target for this service call</param>
    public void IncreaseDailyEnergy(ServiceTarget target, PowercalcIncreaseDailyEnergyParameters data)
    {
        _haContext.CallService("powercalc", "increase_daily_energy", target, data);
    }

    ///<summary>Increases the sensor with a given amount.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="value">Amount to add to the sensor. eg: 100</param>
    public void IncreaseDailyEnergy(ServiceTarget target, string value)
    {
        _haContext.CallService("powercalc", "increase_daily_energy", target, new PowercalcIncreaseDailyEnergyParameters { Value = value });
    }

    ///<summary>Reset an energy sensor to zero kWh.</summary>
    ///<param name="target">The target for this service call</param>
    public void ResetEnergy(ServiceTarget target)
    {
        _haContext.CallService("powercalc", "reset_energy", target);
    }

    ///<summary>Stop currently active playbook.</summary>
    ///<param name="target">The target for this service call</param>
    public void StopPlaybook(ServiceTarget target)
    {
        _haContext.CallService("powercalc", "stop_playbook", target);
    }

    ///<summary>Some profiles in the library has different sub profiles. This service allows you to switch to another one.</summary>
    ///<param name="target">The target for this service call</param>
    public void SwitchSubProfile(ServiceTarget target, PowercalcSwitchSubProfileParameters data)
    {
        _haContext.CallService("powercalc", "switch_sub_profile", target, data);
    }

    ///<summary>Some profiles in the library has different sub profiles. This service allows you to switch to another one.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="profile">Define one of the possible sub profiles eg: nigh_vision</param>
    public void SwitchSubProfile(ServiceTarget target, string profile)
    {
        _haContext.CallService("powercalc", "switch_sub_profile", target, new PowercalcSwitchSubProfileParameters { Profile = profile });
    }
}

public partial record PowercalcActivatePlaybookParameters
{
    ///<summary>Playbook identifier. eg: program1</summary>
    [JsonPropertyName("playbook_id")]
    public string? PlaybookId { get; init; }
}

public partial record PowercalcCalibrateEnergyParameters
{
    ///<summary>The value to set. eg: 100</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial record PowercalcCalibrateUtilityMeterParameters
{
    ///<summary>The value to set. eg: 100</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial record PowercalcIncreaseDailyEnergyParameters
{
    ///<summary>Amount to add to the sensor. eg: 100</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial record PowercalcSwitchSubProfileParameters
{
    ///<summary>Define one of the possible sub profiles eg: nigh_vision</summary>
    [JsonPropertyName("profile")]
    public string? Profile { get; init; }
}

public partial class RecorderServices
{
    private readonly IHaContext _haContext;
    public RecorderServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Stops the recording of events and state changes.</summary>
    public void Disable()
    {
        _haContext.CallService("recorder", "disable", null);
    }

    ///<summary>Starts the recording of events and state changes.</summary>
    public void Enable()
    {
        _haContext.CallService("recorder", "enable", null);
    }

    ///<summary>Import long-term statistics.</summary>
    public void ImportStatistics(RecorderImportStatisticsParameters data)
    {
        _haContext.CallService("recorder", "import_statistics", null, data);
    }

    ///<summary>Import long-term statistics.</summary>
    ///<param name="statisticId">The statistics ID (entity ID) to import for.</param>
    ///<param name="name">The name of the statistics.</param>
    ///<param name="source">The source of the statistics data.</param>
    ///<param name="unitOfMeasurement">The unit of measurement of the statistics.</param>
    ///<param name="hasMean">If the statistics has a mean value.</param>
    ///<param name="hasSum">If the statistics has a sum value.</param>
    ///<param name="stats">A list of mappings/dictionaries with statistics to import. The dictionaries must contain a &quot;start&quot; key with a datetime string other valid options are &quot;mean&quot;, &quot;sum&quot;, &quot;min&quot;, &quot;max&quot;, &quot;last_reset&quot;, and &quot;state&quot;. All of those are optional and either an integer or a float, except for &quot;last_reset&quot; which is a datetime string.</param>
    public void ImportStatistics(string statisticId, string source, bool hasMean, bool hasSum, object stats, string? name = null, string? unitOfMeasurement = null)
    {
        _haContext.CallService("recorder", "import_statistics", null, new RecorderImportStatisticsParameters { StatisticId = statisticId, Name = name, Source = source, UnitOfMeasurement = unitOfMeasurement, HasMean = hasMean, HasSum = hasSum, Stats = stats });
    }

    ///<summary>Starts purge task - to clean up old data from your database.</summary>
    public void Purge(RecorderPurgeParameters data)
    {
        _haContext.CallService("recorder", "purge", null, data);
    }

    ///<summary>Starts purge task - to clean up old data from your database.</summary>
    ///<param name="keepDays">Number of days to keep the data in the database. Starting today, counting backward. A value of `7` means that everything older than a week will be purged.</param>
    ///<param name="repack">Attempt to save disk space by rewriting the entire database file.</param>
    ///<param name="applyFilter">Applys `entity_id` and `event_type` filters in addition to time-based purge.</param>
    public void Purge(long? keepDays = null, bool? repack = null, bool? applyFilter = null)
    {
        _haContext.CallService("recorder", "purge", null, new RecorderPurgeParameters { KeepDays = keepDays, Repack = repack, ApplyFilter = applyFilter });
    }

    ///<summary>Starts a purge task to remove the data related to specific entities from your database.</summary>
    ///<param name="target">The target for this service call</param>
    public void PurgeEntities(ServiceTarget target, RecorderPurgeEntitiesParameters data)
    {
        _haContext.CallService("recorder", "purge_entities", target, data);
    }

    ///<summary>Starts a purge task to remove the data related to specific entities from your database.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="domains">List of domains for which the data needs to be removed from the recorder database. eg: sun</param>
    ///<param name="entityGlobs">List of glob patterns used to select the entities for which the data is to be removed from the recorder database. eg: domain*.object_id*</param>
    ///<param name="keepDays">Number of days to keep the data for rows matching the filter. Starting today, counting backward. A value of `7` means that everything older than a week will be purged. The default of 0 days will remove all matching rows immediately.</param>
    public void PurgeEntities(ServiceTarget target, object? domains = null, object? entityGlobs = null, long? keepDays = null)
    {
        _haContext.CallService("recorder", "purge_entities", target, new RecorderPurgeEntitiesParameters { Domains = domains, EntityGlobs = entityGlobs, KeepDays = keepDays });
    }
}

public partial record RecorderImportStatisticsParameters
{
    ///<summary>The statistics ID (entity ID) to import for.</summary>
    [JsonPropertyName("statistic_id")]
    public string? StatisticId { get; init; }

    ///<summary>The name of the statistics.</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>The source of the statistics data.</summary>
    [JsonPropertyName("source")]
    public string? Source { get; init; }

    ///<summary>The unit of measurement of the statistics.</summary>
    [JsonPropertyName("unit_of_measurement")]
    public string? UnitOfMeasurement { get; init; }

    ///<summary>If the statistics has a mean value.</summary>
    [JsonPropertyName("has_mean")]
    public bool? HasMean { get; init; }

    ///<summary>If the statistics has a sum value.</summary>
    [JsonPropertyName("has_sum")]
    public bool? HasSum { get; init; }

    ///<summary>A list of mappings/dictionaries with statistics to import. The dictionaries must contain a &quot;start&quot; key with a datetime string other valid options are &quot;mean&quot;, &quot;sum&quot;, &quot;min&quot;, &quot;max&quot;, &quot;last_reset&quot;, and &quot;state&quot;. All of those are optional and either an integer or a float, except for &quot;last_reset&quot; which is a datetime string.</summary>
    [JsonPropertyName("stats")]
    public object? Stats { get; init; }
}

public partial record RecorderPurgeParameters
{
    ///<summary>Number of days to keep the data in the database. Starting today, counting backward. A value of `7` means that everything older than a week will be purged.</summary>
    [JsonPropertyName("keep_days")]
    public long? KeepDays { get; init; }

    ///<summary>Attempt to save disk space by rewriting the entire database file.</summary>
    [JsonPropertyName("repack")]
    public bool? Repack { get; init; }

    ///<summary>Applys `entity_id` and `event_type` filters in addition to time-based purge.</summary>
    [JsonPropertyName("apply_filter")]
    public bool? ApplyFilter { get; init; }
}

public partial record RecorderPurgeEntitiesParameters
{
    ///<summary>List of domains for which the data needs to be removed from the recorder database. eg: sun</summary>
    [JsonPropertyName("domains")]
    public object? Domains { get; init; }

    ///<summary>List of glob patterns used to select the entities for which the data is to be removed from the recorder database. eg: domain*.object_id*</summary>
    [JsonPropertyName("entity_globs")]
    public object? EntityGlobs { get; init; }

    ///<summary>Number of days to keep the data for rows matching the filter. Starting today, counting backward. A value of `7` means that everything older than a week will be purged. The default of 0 days will remove all matching rows immediately.</summary>
    [JsonPropertyName("keep_days")]
    public long? KeepDays { get; init; }
}

public partial class RemoteServices
{
    private readonly IHaContext _haContext;
    public RemoteServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Deletes a command or a list of commands from the database.</summary>
    ///<param name="target">The target for this service call</param>
    public void DeleteCommand(ServiceTarget target, RemoteDeleteCommandParameters data)
    {
        _haContext.CallService("remote", "delete_command", target, data);
    }

    ///<summary>Deletes a command or a list of commands from the database.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="device">Device from which commands will be deleted. eg: television</param>
    ///<param name="command">The single command or the list of commands to be deleted. eg: Mute</param>
    public void DeleteCommand(ServiceTarget target, object command, string? device = null)
    {
        _haContext.CallService("remote", "delete_command", target, new RemoteDeleteCommandParameters { Device = device, Command = command });
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    ///<param name="target">The target for this service call</param>
    public void LearnCommand(ServiceTarget target, RemoteLearnCommandParameters data)
    {
        _haContext.CallService("remote", "learn_command", target, data);
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="device">Device ID to learn command from. eg: television</param>
    ///<param name="command">A single command or a list of commands to learn. eg: Turn on</param>
    ///<param name="commandType">The type of command to be learned.</param>
    ///<param name="alternative">If code must be stored as an alternative. This is useful for discrete codes. Discrete codes are used for toggles that only perform one function. For example, a code to only turn a device on. If it is on already, sending the code won&apos;t change the state.</param>
    ///<param name="timeout">Timeout for the command to be learned.</param>
    public void LearnCommand(ServiceTarget target, string? device = null, object? command = null, object? commandType = null, bool? alternative = null, long? timeout = null)
    {
        _haContext.CallService("remote", "learn_command", target, new RemoteLearnCommandParameters { Device = device, Command = command, CommandType = commandType, Alternative = alternative, Timeout = timeout });
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    ///<param name="target">The target for this service call</param>
    public void SendCommand(ServiceTarget target, RemoteSendCommandParameters data)
    {
        _haContext.CallService("remote", "send_command", target, data);
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="device">Device ID to send command to. eg: 32756745</param>
    ///<param name="command">A single command or a list of commands to send. eg: Play</param>
    ///<param name="numRepeats">The number of times you want to repeat the commands.</param>
    ///<param name="delaySecs">The time you want to wait in between repeated commands.</param>
    ///<param name="holdSecs">The time you want to have it held before the release is send.</param>
    public void SendCommand(ServiceTarget target, object command, string? device = null, long? numRepeats = null, double? delaySecs = null, double? holdSecs = null)
    {
        _haContext.CallService("remote", "send_command", target, new RemoteSendCommandParameters { Device = device, Command = command, NumRepeats = numRepeats, DelaySecs = delaySecs, HoldSecs = holdSecs });
    }

    ///<summary>Toggles a device on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("remote", "toggle", target);
    }

    ///<summary>Turns the device off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("remote", "turn_off", target);
    }

    ///<summary>Sends the power on command.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, RemoteTurnOnParameters data)
    {
        _haContext.CallService("remote", "turn_on", target, data);
    }

    ///<summary>Sends the power on command.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="activity">Activity ID or activity name to be started. eg: BedroomTV</param>
    public void TurnOn(ServiceTarget target, string? activity = null)
    {
        _haContext.CallService("remote", "turn_on", target, new RemoteTurnOnParameters { Activity = activity });
    }
}

public partial record RemoteDeleteCommandParameters
{
    ///<summary>Device from which commands will be deleted. eg: television</summary>
    [JsonPropertyName("device")]
    public string? Device { get; init; }

    ///<summary>The single command or the list of commands to be deleted. eg: Mute</summary>
    [JsonPropertyName("command")]
    public object? Command { get; init; }
}

public partial record RemoteLearnCommandParameters
{
    ///<summary>Device ID to learn command from. eg: television</summary>
    [JsonPropertyName("device")]
    public string? Device { get; init; }

    ///<summary>A single command or a list of commands to learn. eg: Turn on</summary>
    [JsonPropertyName("command")]
    public object? Command { get; init; }

    ///<summary>The type of command to be learned.</summary>
    [JsonPropertyName("command_type")]
    public object? CommandType { get; init; }

    ///<summary>If code must be stored as an alternative. This is useful for discrete codes. Discrete codes are used for toggles that only perform one function. For example, a code to only turn a device on. If it is on already, sending the code won&apos;t change the state.</summary>
    [JsonPropertyName("alternative")]
    public bool? Alternative { get; init; }

    ///<summary>Timeout for the command to be learned.</summary>
    [JsonPropertyName("timeout")]
    public long? Timeout { get; init; }
}

public partial record RemoteSendCommandParameters
{
    ///<summary>Device ID to send command to. eg: 32756745</summary>
    [JsonPropertyName("device")]
    public string? Device { get; init; }

    ///<summary>A single command or a list of commands to send. eg: Play</summary>
    [JsonPropertyName("command")]
    public object? Command { get; init; }

    ///<summary>The number of times you want to repeat the commands.</summary>
    [JsonPropertyName("num_repeats")]
    public long? NumRepeats { get; init; }

    ///<summary>The time you want to wait in between repeated commands.</summary>
    [JsonPropertyName("delay_secs")]
    public double? DelaySecs { get; init; }

    ///<summary>The time you want to have it held before the release is send.</summary>
    [JsonPropertyName("hold_secs")]
    public double? HoldSecs { get; init; }
}

public partial record RemoteTurnOnParameters
{
    ///<summary>Activity ID or activity name to be started. eg: BedroomTV</summary>
    [JsonPropertyName("activity")]
    public string? Activity { get; init; }
}

public partial class RepairsServices
{
    private readonly IHaContext _haContext;
    public RepairsServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Manually create and raise a issue in Home Assistant repairs.</summary>
    public void Create(RepairsCreateParameters data)
    {
        _haContext.CallService("repairs", "create", null, data);
    }

    ///<summary>Manually create and raise a issue in Home Assistant repairs.</summary>
    ///<param name="title">The title of the issue.</param>
    ///<param name="description">The description of the issue. Supports Markdown.</param>
    ///<param name="issueId">The issue can have an identifier, which allows you to cancel it later with that ID if needed. It also prevent duplicate issues to be created. If not provided, a random ID will be generated.</param>
    ///<param name="domain">This field can be used to set the domain of the issue. For example, by default (if not set), it will use &quot;spook&quot;. This causes Spook to be shown in the logo/image of the issue. If you set it to &quot;homeassistant&quot;, the Home Assistant logo will be used, or use &quot;hue&quot;, &quot;zwave_js&quot;, &quot;mqtt&quot;, etc. to use the logo of that integration.</param>
    ///<param name="severity">The severity of the issue. This will be used to determine the priority of the issue. If not set, &quot;warning&quot; will be used</param>
    ///<param name="persistent">If the issue should be persistent, which means it will survive restarts of Home Assistant. By default, issues are not persistent.</param>
    public void Create(string title, string description, string? issueId = null, string? domain = null, object? severity = null, bool? persistent = null)
    {
        _haContext.CallService("repairs", "create", null, new RepairsCreateParameters { Title = title, Description = description, IssueId = issueId, Domain = domain, Severity = severity, Persistent = persistent });
    }

    ///<summary>Ignore all issues currently raised in Home Assistant Repairs.</summary>
    public void IgnoreAll()
    {
        _haContext.CallService("repairs", "ignore_all", null);
    }

    ///<summary>Removes a manually created Home Assistant repairs issue. This service can only remove issues created with the `repairs_create` service.</summary>
    public void Remove(RepairsRemoveParameters data)
    {
        _haContext.CallService("repairs", "remove", null, data);
    }

    ///<summary>Removes a manually created Home Assistant repairs issue. This service can only remove issues created with the `repairs_create` service.</summary>
    ///<param name="issueId">The issue ID to remove.</param>
    public void Remove(string issueId)
    {
        _haContext.CallService("repairs", "remove", null, new RepairsRemoveParameters { IssueId = issueId });
    }

    ///<summary>Unignore all issues currently raised in Home Assistant Repairs.</summary>
    public void UnignoreAll()
    {
        _haContext.CallService("repairs", "unignore_all", null);
    }
}

public partial record RepairsCreateParameters
{
    ///<summary>The title of the issue.</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>The description of the issue. Supports Markdown.</summary>
    [JsonPropertyName("description")]
    public string? Description { get; init; }

    ///<summary>The issue can have an identifier, which allows you to cancel it later with that ID if needed. It also prevent duplicate issues to be created. If not provided, a random ID will be generated.</summary>
    [JsonPropertyName("issue_id")]
    public string? IssueId { get; init; }

    ///<summary>This field can be used to set the domain of the issue. For example, by default (if not set), it will use &quot;spook&quot;. This causes Spook to be shown in the logo/image of the issue. If you set it to &quot;homeassistant&quot;, the Home Assistant logo will be used, or use &quot;hue&quot;, &quot;zwave_js&quot;, &quot;mqtt&quot;, etc. to use the logo of that integration.</summary>
    [JsonPropertyName("domain")]
    public string? Domain { get; init; }

    ///<summary>The severity of the issue. This will be used to determine the priority of the issue. If not set, &quot;warning&quot; will be used</summary>
    [JsonPropertyName("severity")]
    public object? Severity { get; init; }

    ///<summary>If the issue should be persistent, which means it will survive restarts of Home Assistant. By default, issues are not persistent.</summary>
    [JsonPropertyName("persistent")]
    public bool? Persistent { get; init; }
}

public partial record RepairsRemoveParameters
{
    ///<summary>The issue ID to remove.</summary>
    [JsonPropertyName("issue_id")]
    public string? IssueId { get; init; }
}

public partial class RingServices
{
    private readonly IHaContext _haContext;
    public RingServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Updates the data we have for all your ring devices.</summary>
    public void Update()
    {
        _haContext.CallService("ring", "update", null);
    }
}

public partial class SceneServices
{
    private readonly IHaContext _haContext;
    public SceneServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Activates a scene with configuration.</summary>
    public void Apply(SceneApplyParameters data)
    {
        _haContext.CallService("scene", "apply", null, data);
    }

    ///<summary>Activates a scene with configuration.</summary>
    ///<param name="entities">List of entities and their target state. eg: light.kitchen: &quot;on&quot; light.ceiling:   state: &quot;on&quot;   brightness: 80 </param>
    ///<param name="transition">Time it takes the devices to transition into the states defined in the scene.</param>
    public void Apply(object entities, long? transition = null)
    {
        _haContext.CallService("scene", "apply", null, new SceneApplyParameters { Entities = entities, Transition = transition });
    }

    ///<summary>Creates a new scene.</summary>
    public void Create(SceneCreateParameters data)
    {
        _haContext.CallService("scene", "create", null, data);
    }

    ///<summary>Creates a new scene.</summary>
    ///<param name="sceneId">The entity ID of the new scene. eg: all_lights</param>
    ///<param name="entities">List of entities and their target state. If your entities are already in the target state right now, use `snapshot_entities` instead. eg: light.tv_back_light: &quot;on&quot; light.ceiling:   state: &quot;on&quot;   brightness: 200 </param>
    ///<param name="snapshotEntities">List of entities to be included in the snapshot. By taking a snapshot, you record the current state of those entities. If you do not want to use the current state of all your entities for this scene, you can combine the `snapshot_entities` with `entities`. eg: - light.ceiling - light.kitchen </param>
    public void Create(string sceneId, object? entities = null, object? snapshotEntities = null)
    {
        _haContext.CallService("scene", "create", null, new SceneCreateParameters { SceneId = sceneId, Entities = entities, SnapshotEntities = snapshotEntities });
    }

    ///<summary>Reloads the scenes from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("scene", "reload", null);
    }

    ///<summary>Activates a scene.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, SceneTurnOnParameters data)
    {
        _haContext.CallService("scene", "turn_on", target, data);
    }

    ///<summary>Activates a scene.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="transition">Time it takes the devices to transition into the states defined in the scene.</param>
    public void TurnOn(ServiceTarget target, long? transition = null)
    {
        _haContext.CallService("scene", "turn_on", target, new SceneTurnOnParameters { Transition = transition });
    }
}

public partial record SceneApplyParameters
{
    ///<summary>List of entities and their target state. eg: light.kitchen: &quot;on&quot; light.ceiling:   state: &quot;on&quot;   brightness: 80 </summary>
    [JsonPropertyName("entities")]
    public object? Entities { get; init; }

    ///<summary>Time it takes the devices to transition into the states defined in the scene.</summary>
    [JsonPropertyName("transition")]
    public long? Transition { get; init; }
}

public partial record SceneCreateParameters
{
    ///<summary>The entity ID of the new scene. eg: all_lights</summary>
    [JsonPropertyName("scene_id")]
    public string? SceneId { get; init; }

    ///<summary>List of entities and their target state. If your entities are already in the target state right now, use `snapshot_entities` instead. eg: light.tv_back_light: &quot;on&quot; light.ceiling:   state: &quot;on&quot;   brightness: 200 </summary>
    [JsonPropertyName("entities")]
    public object? Entities { get; init; }

    ///<summary>List of entities to be included in the snapshot. By taking a snapshot, you record the current state of those entities. If you do not want to use the current state of all your entities for this scene, you can combine the `snapshot_entities` with `entities`. eg: - light.ceiling - light.kitchen </summary>
    [JsonPropertyName("snapshot_entities")]
    public object? SnapshotEntities { get; init; }
}

public partial record SceneTurnOnParameters
{
    ///<summary>Time it takes the devices to transition into the states defined in the scene.</summary>
    [JsonPropertyName("transition")]
    public long? Transition { get; init; }
}

public partial class ScheduleServices
{
    private readonly IHaContext _haContext;
    public ScheduleServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads schedules from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("schedule", "reload", null);
    }
}

public partial class ScriptServices
{
    private readonly IHaContext _haContext;
    public ScriptServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads all the available scripts.</summary>
    public void Reload()
    {
        _haContext.CallService("script", "reload", null);
    }

    ///<summary>Toggle a script. Starts it, if isn&apos;t running, stops it otherwise.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("script", "toggle", target);
    }

    ///<summary>Stops a running script.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("script", "turn_off", target);
    }

    ///<summary>Runs the sequence of actions defined in a script.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("script", "turn_on", target);
    }
}

public partial class SelectServices
{
    private readonly IHaContext _haContext;
    public SelectServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Select an random option for a select entity.</summary>
    ///<param name="target">The target for this service call</param>
    public void Random(ServiceTarget target, SelectRandomParameters data)
    {
        _haContext.CallService("select", "random", target, data);
    }

    ///<summary>Select an random option for a select entity.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="options">Limits the options to select from. If not provided, all options will be considered.</param>
    public void Random(ServiceTarget target, object? options = null)
    {
        _haContext.CallService("select", "random", target, new SelectRandomParameters { Options = options });
    }

    ///<summary>Selects the first option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectFirst(ServiceTarget target)
    {
        _haContext.CallService("select", "select_first", target);
    }

    ///<summary>Selects the last option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectLast(ServiceTarget target)
    {
        _haContext.CallService("select", "select_last", target);
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectNext(ServiceTarget target, SelectSelectNextParameters data)
    {
        _haContext.CallService("select", "select_next", target, data);
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="cycle">If the option should cycle from the last to the first.</param>
    public void SelectNext(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("select", "select_next", target, new SelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectOption(ServiceTarget target, SelectSelectOptionParameters data)
    {
        _haContext.CallService("select", "select_option", target, data);
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public void SelectOption(ServiceTarget target, string option)
    {
        _haContext.CallService("select", "select_option", target, new SelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectPrevious(ServiceTarget target, SelectSelectPreviousParameters data)
    {
        _haContext.CallService("select", "select_previous", target, data);
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="cycle">If the option should cycle from the first to the last.</param>
    public void SelectPrevious(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("select", "select_previous", target, new SelectSelectPreviousParameters { Cycle = cycle });
    }
}

public partial record SelectRandomParameters
{
    ///<summary>Limits the options to select from. If not provided, all options will be considered.</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }
}

public partial record SelectSelectNextParameters
{
    ///<summary>If the option should cycle from the last to the first.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial record SelectSelectOptionParameters
{
    ///<summary>Option to be selected. eg: &quot;Item A&quot;</summary>
    [JsonPropertyName("option")]
    public string? Option { get; init; }
}

public partial record SelectSelectPreviousParameters
{
    ///<summary>If the option should cycle from the first to the last.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial class SirenServices
{
    private readonly IHaContext _haContext;
    public SirenServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Toggles the siren on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("siren", "toggle", target);
    }

    ///<summary>Turns the siren off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("siren", "turn_off", target);
    }

    ///<summary>Turns the siren on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, SirenTurnOnParameters data)
    {
        _haContext.CallService("siren", "turn_on", target, data);
    }

    ///<summary>Turns the siren on.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="tone">The tone to emit. When `available_tones` property is a map, either the key or the value can be used. Must be supported by the integration. eg: fire</param>
    ///<param name="volumeLevel">The volume. 0 is inaudible, 1 is the maximum volume. Must be supported by the integration. eg: 0.5</param>
    ///<param name="duration">Number of seconds the sound is played. Must be supported by the integration. eg: 15</param>
    public void TurnOn(ServiceTarget target, string? tone = null, double? volumeLevel = null, string? duration = null)
    {
        _haContext.CallService("siren", "turn_on", target, new SirenTurnOnParameters { Tone = tone, VolumeLevel = volumeLevel, Duration = duration });
    }
}

public partial record SirenTurnOnParameters
{
    ///<summary>The tone to emit. When `available_tones` property is a map, either the key or the value can be used. Must be supported by the integration. eg: fire</summary>
    [JsonPropertyName("tone")]
    public string? Tone { get; init; }

    ///<summary>The volume. 0 is inaudible, 1 is the maximum volume. Must be supported by the integration. eg: 0.5</summary>
    [JsonPropertyName("volume_level")]
    public double? VolumeLevel { get; init; }

    ///<summary>Number of seconds the sound is played. Must be supported by the integration. eg: 15</summary>
    [JsonPropertyName("duration")]
    public string? Duration { get; init; }
}

public partial class SpookServices
{
    private readonly IHaContext _haContext;
    public SpookServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Calling this service, spookes Home Assistant. The service call will always fail.</summary>
    public void Boo()
    {
        _haContext.CallService("spook", "boo", null);
    }

    ///<summary>A call to this service will randomly fail.</summary>
    public void RandomFail()
    {
        _haContext.CallService("spook", "random_fail", null);
    }
}

public partial class SwitchServices
{
    private readonly IHaContext _haContext;
    public SwitchServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Toggles a switch on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("switch", "toggle", target);
    }

    ///<summary>Turns a switch off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("switch", "turn_off", target);
    }

    ///<summary>Turns a switch on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("switch", "turn_on", target);
    }
}

public partial class SynologyDsmServices
{
    private readonly IHaContext _haContext;
    public SynologyDsmServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reboots the NAS. This service is deprecated and will be removed in future release. Please use the corresponding button entity.</summary>
    public void Reboot(SynologyDsmRebootParameters data)
    {
        _haContext.CallService("synology_dsm", "reboot", null, data);
    }

    ///<summary>Reboots the NAS. This service is deprecated and will be removed in future release. Please use the corresponding button entity.</summary>
    ///<param name="serial">Serial of the NAS to reboot; required when multiple NAS are configured. eg: 1NDVC86409</param>
    public void Reboot(string? serial = null)
    {
        _haContext.CallService("synology_dsm", "reboot", null, new SynologyDsmRebootParameters { Serial = serial });
    }

    ///<summary>Shutdowns the NAS. This service is deprecated and will be removed in future release. Please use the corresponding button entity.</summary>
    public void Shutdown(SynologyDsmShutdownParameters data)
    {
        _haContext.CallService("synology_dsm", "shutdown", null, data);
    }

    ///<summary>Shutdowns the NAS. This service is deprecated and will be removed in future release. Please use the corresponding button entity.</summary>
    ///<param name="serial">Serial of the NAS to shutdown; required when multiple NAS are configured. eg: 1NDVC86409</param>
    public void Shutdown(string? serial = null)
    {
        _haContext.CallService("synology_dsm", "shutdown", null, new SynologyDsmShutdownParameters { Serial = serial });
    }
}

public partial record SynologyDsmRebootParameters
{
    ///<summary>Serial of the NAS to reboot; required when multiple NAS are configured. eg: 1NDVC86409</summary>
    [JsonPropertyName("serial")]
    public string? Serial { get; init; }
}

public partial record SynologyDsmShutdownParameters
{
    ///<summary>Serial of the NAS to shutdown; required when multiple NAS are configured. eg: 1NDVC86409</summary>
    [JsonPropertyName("serial")]
    public string? Serial { get; init; }
}

public partial class SystemLogServices
{
    private readonly IHaContext _haContext;
    public SystemLogServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Clears all log entries.</summary>
    public void Clear()
    {
        _haContext.CallService("system_log", "clear", null);
    }

    ///<summary>Write log entry.</summary>
    public void Write(SystemLogWriteParameters data)
    {
        _haContext.CallService("system_log", "write", null, data);
    }

    ///<summary>Write log entry.</summary>
    ///<param name="message">Message to log. eg: Something went wrong</param>
    ///<param name="level">Log level.</param>
    ///<param name="logger">Logger name under which to log the message. Defaults to `system_log.external`. eg: mycomponent.myplatform</param>
    public void Write(string message, object? level = null, string? logger = null)
    {
        _haContext.CallService("system_log", "write", null, new SystemLogWriteParameters { Message = message, Level = level, Logger = logger });
    }
}

public partial record SystemLogWriteParameters
{
    ///<summary>Message to log. eg: Something went wrong</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Log level.</summary>
    [JsonPropertyName("level")]
    public object? Level { get; init; }

    ///<summary>Logger name under which to log the message. Defaults to `system_log.external`. eg: mycomponent.myplatform</summary>
    [JsonPropertyName("logger")]
    public string? Logger { get; init; }
}

public partial class TemplateServices
{
    private readonly IHaContext _haContext;
    public TemplateServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads template entities from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("template", "reload", null);
    }
}

public partial class TextServices
{
    private readonly IHaContext _haContext;
    public TextServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, TextSetValueParameters data)
    {
        _haContext.CallService("text", "set_value", target, data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="value">Enter your text. eg: Hello world!</param>
    public void SetValue(ServiceTarget target, string value)
    {
        _haContext.CallService("text", "set_value", target, new TextSetValueParameters { Value = value });
    }
}

public partial record TextSetValueParameters
{
    ///<summary>Enter your text. eg: Hello world!</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial class TimeServices
{
    private readonly IHaContext _haContext;
    public TimeServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the time.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, TimeSetValueParameters data)
    {
        _haContext.CallService("time", "set_value", target, data);
    }

    ///<summary>Sets the time.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="time">The time to set. eg: 22:15</param>
    public void SetValue(ServiceTarget target, DateTime time)
    {
        _haContext.CallService("time", "set_value", target, new TimeSetValueParameters { Time = time });
    }
}

public partial record TimeSetValueParameters
{
    ///<summary>The time to set. eg: 22:15</summary>
    [JsonPropertyName("time")]
    public DateTime? Time { get; init; }
}

public partial class TimerServices
{
    private readonly IHaContext _haContext;
    public TimerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Cancels a timer.</summary>
    ///<param name="target">The target for this service call</param>
    public void Cancel(ServiceTarget target)
    {
        _haContext.CallService("timer", "cancel", target);
    }

    ///<summary>Changes a timer.</summary>
    ///<param name="target">The target for this service call</param>
    public void Change(ServiceTarget target, TimerChangeParameters data)
    {
        _haContext.CallService("timer", "change", target, data);
    }

    ///<summary>Changes a timer.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="duration">Duration to add or subtract to the running timer. eg: 00:01:00, 60 or -60</param>
    public void Change(ServiceTarget target, string duration)
    {
        _haContext.CallService("timer", "change", target, new TimerChangeParameters { Duration = duration });
    }

    ///<summary>Finishes a timer.</summary>
    ///<param name="target">The target for this service call</param>
    public void Finish(ServiceTarget target)
    {
        _haContext.CallService("timer", "finish", target);
    }

    ///<summary>Pauses a timer.</summary>
    ///<param name="target">The target for this service call</param>
    public void Pause(ServiceTarget target)
    {
        _haContext.CallService("timer", "pause", target);
    }

    public void Reload()
    {
        _haContext.CallService("timer", "reload", null);
    }

    ///<summary>Starts a timer.</summary>
    ///<param name="target">The target for this service call</param>
    public void Start(ServiceTarget target, TimerStartParameters data)
    {
        _haContext.CallService("timer", "start", target, data);
    }

    ///<summary>Starts a timer.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="duration">Duration the timer requires to finish. [optional]. eg: 00:01:00 or 60</param>
    public void Start(ServiceTarget target, string? duration = null)
    {
        _haContext.CallService("timer", "start", target, new TimerStartParameters { Duration = duration });
    }
}

public partial record TimerChangeParameters
{
    ///<summary>Duration to add or subtract to the running timer. eg: 00:01:00, 60 or -60</summary>
    [JsonPropertyName("duration")]
    public string? Duration { get; init; }
}

public partial record TimerStartParameters
{
    ///<summary>Duration the timer requires to finish. [optional]. eg: 00:01:00 or 60</summary>
    [JsonPropertyName("duration")]
    public string? Duration { get; init; }
}

public partial class TtsServices
{
    private readonly IHaContext _haContext;
    public TtsServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Removes all cached text-to-speech files and purges the memory.</summary>
    public void ClearCache()
    {
        _haContext.CallService("tts", "clear_cache", null);
    }

    ///<summary>Say something using text-to-speech on a media player with cloud.</summary>
    public void CloudSay(TtsCloudSayParameters data)
    {
        _haContext.CallService("tts", "cloud_say", null, data);
    }

    ///<summary>Say something using text-to-speech on a media player with cloud.</summary>
    ///<param name="entityId"></param>
    ///<param name="message"> eg: My name is hanna</param>
    ///<param name="cache"></param>
    ///<param name="language"> eg: ru</param>
    ///<param name="options"> eg: platform specific</param>
    public void CloudSay(string entityId, string message, bool? cache = null, string? language = null, object? options = null)
    {
        _haContext.CallService("tts", "cloud_say", null, new TtsCloudSayParameters { EntityId = entityId, Message = message, Cache = cache, Language = language, Options = options });
    }

    ///<summary>Speaks something using text-to-speech on a media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void Speak(ServiceTarget target, TtsSpeakParameters data)
    {
        _haContext.CallService("tts", "speak", target, data);
    }

    ///<summary>Speaks something using text-to-speech on a media player.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="mediaPlayerEntityId">Media players to play the message.</param>
    ///<param name="message">The text you want to convert into speech so that you can listen to it on your device. eg: My name is hanna</param>
    ///<param name="cache">Stores this message locally so that when the text is requested again, the output can be produced more quickly.</param>
    ///<param name="language">Language to use for speech generation. eg: ru</param>
    ///<param name="options">A dictionary containing integration-specific options. eg: platform specific</param>
    public void Speak(ServiceTarget target, string mediaPlayerEntityId, string message, bool? cache = null, string? language = null, object? options = null)
    {
        _haContext.CallService("tts", "speak", target, new TtsSpeakParameters { MediaPlayerEntityId = mediaPlayerEntityId, Message = message, Cache = cache, Language = language, Options = options });
    }
}

public partial record TtsCloudSayParameters
{
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary> eg: My name is hanna</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    [JsonPropertyName("cache")]
    public bool? Cache { get; init; }

    ///<summary> eg: ru</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }
}

public partial record TtsSpeakParameters
{
    ///<summary>Media players to play the message.</summary>
    [JsonPropertyName("media_player_entity_id")]
    public string? MediaPlayerEntityId { get; init; }

    ///<summary>The text you want to convert into speech so that you can listen to it on your device. eg: My name is hanna</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Stores this message locally so that when the text is requested again, the output can be produced more quickly.</summary>
    [JsonPropertyName("cache")]
    public bool? Cache { get; init; }

    ///<summary>Language to use for speech generation. eg: ru</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary>A dictionary containing integration-specific options. eg: platform specific</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }
}

public partial class UpdateServices
{
    private readonly IHaContext _haContext;
    public UpdateServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Removes the skipped version marker from an update.</summary>
    ///<param name="target">The target for this service call</param>
    public void ClearSkipped(ServiceTarget target)
    {
        _haContext.CallService("update", "clear_skipped", target);
    }

    ///<summary>Installs an update for this device or service.</summary>
    ///<param name="target">The target for this service call</param>
    public void Install(ServiceTarget target, UpdateInstallParameters data)
    {
        _haContext.CallService("update", "install", target, data);
    }

    ///<summary>Installs an update for this device or service.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="version">The version to install. If omitted, the latest version will be installed. eg: 1.0.0</param>
    ///<param name="backup">If supported by the integration, this creates a backup before starting the update .</param>
    public void Install(ServiceTarget target, string? version = null, bool? backup = null)
    {
        _haContext.CallService("update", "install", target, new UpdateInstallParameters { Version = version, Backup = backup });
    }

    ///<summary>Marks currently available update as skipped.</summary>
    ///<param name="target">The target for this service call</param>
    public void Skip(ServiceTarget target)
    {
        _haContext.CallService("update", "skip", target);
    }
}

public partial record UpdateInstallParameters
{
    ///<summary>The version to install. If omitted, the latest version will be installed. eg: 1.0.0</summary>
    [JsonPropertyName("version")]
    public string? Version { get; init; }

    ///<summary>If supported by the integration, this creates a backup before starting the update .</summary>
    [JsonPropertyName("backup")]
    public bool? Backup { get; init; }
}

public partial class UtilityMeterServices
{
    private readonly IHaContext _haContext;
    public UtilityMeterServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Resets all counters of a utility meter.</summary>
    ///<param name="target">The target for this service call</param>
    public void Reset(ServiceTarget target)
    {
        _haContext.CallService("utility_meter", "reset", target);
    }
}

public partial class VacuumServices
{
    private readonly IHaContext _haContext;
    public VacuumServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Tells the vacuum cleaner to do a spot clean-up.</summary>
    ///<param name="target">The target for this service call</param>
    public void CleanSpot(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "clean_spot", target);
    }

    ///<summary>Locates the vacuum cleaner robot.</summary>
    ///<param name="target">The target for this service call</param>
    public void Locate(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "locate", target);
    }

    ///<summary>Pauses the cleaning task.</summary>
    ///<param name="target">The target for this service call</param>
    public void Pause(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "pause", target);
    }

    ///<summary>Tells the vacuum cleaner to return to its dock.</summary>
    ///<param name="target">The target for this service call</param>
    public void ReturnToBase(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "return_to_base", target);
    }

    ///<summary>Sends a command to the vacuum cleaner.</summary>
    ///<param name="target">The target for this service call</param>
    public void SendCommand(ServiceTarget target, VacuumSendCommandParameters data)
    {
        _haContext.CallService("vacuum", "send_command", target, data);
    }

    ///<summary>Sends a command to the vacuum cleaner.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="command">Command to execute. The commands are integration-specific. eg: set_dnd_timer</param>
    ///<param name="params">Parameters for the command. The parameters are integration-specific. eg: { &quot;key&quot;: &quot;value&quot; }</param>
    public void SendCommand(ServiceTarget target, string command, object? @params = null)
    {
        _haContext.CallService("vacuum", "send_command", target, new VacuumSendCommandParameters { Command = command, Params = @params });
    }

    ///<summary>Sets the fan speed of the vacuum cleaner.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetFanSpeed(ServiceTarget target, VacuumSetFanSpeedParameters data)
    {
        _haContext.CallService("vacuum", "set_fan_speed", target, data);
    }

    ///<summary>Sets the fan speed of the vacuum cleaner.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="fanSpeed">Fan speed. The value depends on the integration. Some integrations have speed steps, like &apos;medium&apos;. Some use a percentage, between 0 and 100. eg: low</param>
    public void SetFanSpeed(ServiceTarget target, string fanSpeed)
    {
        _haContext.CallService("vacuum", "set_fan_speed", target, new VacuumSetFanSpeedParameters { FanSpeed = fanSpeed });
    }

    ///<summary>Starts or resumes the cleaning task.</summary>
    ///<param name="target">The target for this service call</param>
    public void Start(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "start", target);
    }

    ///<summary>Starts, pauses, or resumes the cleaning task.</summary>
    ///<param name="target">The target for this service call</param>
    public void StartPause(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "start_pause", target);
    }

    ///<summary>Stops the current cleaning task.</summary>
    ///<param name="target">The target for this service call</param>
    public void Stop(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "stop", target);
    }

    public void Toggle()
    {
        _haContext.CallService("vacuum", "toggle", null);
    }

    ///<summary>Stops the current cleaning task and returns to its dock.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "turn_off", target);
    }

    ///<summary>Starts a new cleaning task.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "turn_on", target);
    }
}

public partial record VacuumSendCommandParameters
{
    ///<summary>Command to execute. The commands are integration-specific. eg: set_dnd_timer</summary>
    [JsonPropertyName("command")]
    public string? Command { get; init; }

    ///<summary>Parameters for the command. The parameters are integration-specific. eg: { &quot;key&quot;: &quot;value&quot; }</summary>
    [JsonPropertyName("params")]
    public object? Params { get; init; }
}

public partial record VacuumSetFanSpeedParameters
{
    ///<summary>Fan speed. The value depends on the integration. Some integrations have speed steps, like &apos;medium&apos;. Some use a percentage, between 0 and 100. eg: low</summary>
    [JsonPropertyName("fan_speed")]
    public string? FanSpeed { get; init; }
}

public partial class WatchmanServices
{
    private readonly IHaContext _haContext;
    public WatchmanServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Run watchman report</summary>
    public void Report(WatchmanReportParameters data)
    {
        _haContext.CallService("watchman", "report", null, data);
    }

    ///<summary>Run watchman report</summary>
    ///<param name="createFile">Whether report file should be created (optional, true by default) eg: True</param>
    ///<param name="sendNotification">Whether report should be sent via notification service (optional, false by default) eg: True</param>
    ///<param name="service">Notification service to send report via (optional). Overrides &quot;service&quot; setting from watchman configuration eg: notify.telegram</param>
    ///<param name="data">Additional data in form of key:value pairs for notification service (optional) eg: parse_mode: html</param>
    ///<param name="parseConfig">Parse configuration files before report is created. Usually this is done by watchman automatically, so this flag is not required. (optional, false by default) eg: True</param>
    ///<param name="chunkSize">Maximum message size in bytes. If report size exceeds chunk_size, the report will be sent in several subsequent notifications. (optional, default is 3500 or whatever specified in integration settings) eg: True</param>
    public void Report(bool? createFile = null, bool? sendNotification = null, string? service = null, object? data = null, bool? parseConfig = null, long? chunkSize = null)
    {
        _haContext.CallService("watchman", "report", null, new WatchmanReportParameters { CreateFile = createFile, SendNotification = sendNotification, Service = service, Data = data, ParseConfig = parseConfig, ChunkSize = chunkSize });
    }
}

public partial record WatchmanReportParameters
{
    ///<summary>Whether report file should be created (optional, true by default) eg: True</summary>
    [JsonPropertyName("create_file")]
    public bool? CreateFile { get; init; }

    ///<summary>Whether report should be sent via notification service (optional, false by default) eg: True</summary>
    [JsonPropertyName("send_notification")]
    public bool? SendNotification { get; init; }

    ///<summary>Notification service to send report via (optional). Overrides &quot;service&quot; setting from watchman configuration eg: notify.telegram</summary>
    [JsonPropertyName("service")]
    public string? Service { get; init; }

    ///<summary>Additional data in form of key:value pairs for notification service (optional) eg: parse_mode: html</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }

    ///<summary>Parse configuration files before report is created. Usually this is done by watchman automatically, so this flag is not required. (optional, false by default) eg: True</summary>
    [JsonPropertyName("parse_config")]
    public bool? ParseConfig { get; init; }

    ///<summary>Maximum message size in bytes. If report size exceeds chunk_size, the report will be sent in several subsequent notifications. (optional, default is 3500 or whatever specified in integration settings) eg: True</summary>
    [JsonPropertyName("chunk_size")]
    public long? ChunkSize { get; init; }
}

public partial class WaterHeaterServices
{
    private readonly IHaContext _haContext;
    public WaterHeaterServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Turns away mode on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetAwayMode(ServiceTarget target, WaterHeaterSetAwayModeParameters data)
    {
        _haContext.CallService("water_heater", "set_away_mode", target, data);
    }

    ///<summary>Turns away mode on/off.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="awayMode">New value of away mode.</param>
    public void SetAwayMode(ServiceTarget target, bool awayMode)
    {
        _haContext.CallService("water_heater", "set_away_mode", target, new WaterHeaterSetAwayModeParameters { AwayMode = awayMode });
    }

    ///<summary>Sets the operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetOperationMode(ServiceTarget target, WaterHeaterSetOperationModeParameters data)
    {
        _haContext.CallService("water_heater", "set_operation_mode", target, data);
    }

    ///<summary>Sets the operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="operationMode">New value of the operation mode. For a list of possible modes, refer to the integration documentation. eg: eco</param>
    public void SetOperationMode(ServiceTarget target, string operationMode)
    {
        _haContext.CallService("water_heater", "set_operation_mode", target, new WaterHeaterSetOperationModeParameters { OperationMode = operationMode });
    }

    ///<summary>Sets the target temperature.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetTemperature(ServiceTarget target, WaterHeaterSetTemperatureParameters data)
    {
        _haContext.CallService("water_heater", "set_temperature", target, data);
    }

    ///<summary>Sets the target temperature.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="temperature">New target temperature for the water heater.</param>
    ///<param name="operationMode">New value of the operation mode. For a list of possible modes, refer to the integration documentation. eg: eco</param>
    public void SetTemperature(ServiceTarget target, double temperature, string? operationMode = null)
    {
        _haContext.CallService("water_heater", "set_temperature", target, new WaterHeaterSetTemperatureParameters { Temperature = temperature, OperationMode = operationMode });
    }

    ///<summary>Turns water heater off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("water_heater", "turn_off", target);
    }

    ///<summary>Turns water heater on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("water_heater", "turn_on", target);
    }
}

public partial record WaterHeaterSetAwayModeParameters
{
    ///<summary>New value of away mode.</summary>
    [JsonPropertyName("away_mode")]
    public bool? AwayMode { get; init; }
}

public partial record WaterHeaterSetOperationModeParameters
{
    ///<summary>New value of the operation mode. For a list of possible modes, refer to the integration documentation. eg: eco</summary>
    [JsonPropertyName("operation_mode")]
    public string? OperationMode { get; init; }
}

public partial record WaterHeaterSetTemperatureParameters
{
    ///<summary>New target temperature for the water heater.</summary>
    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    ///<summary>New value of the operation mode. For a list of possible modes, refer to the integration documentation. eg: eco</summary>
    [JsonPropertyName("operation_mode")]
    public string? OperationMode { get; init; }
}

public static class AutomationEntityExtensionMethods
{
    ///<summary>Toggles (enable / disable) an automation.</summary>
    public static void Toggle(this AutomationEntity target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggles (enable / disable) an automation.</summary>
    public static void Toggle(this IEnumerable<AutomationEntity> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Triggers the actions of an automation.</summary>
    public static void Trigger(this AutomationEntity target, AutomationTriggerParameters data)
    {
        target.CallService("trigger", data);
    }

    ///<summary>Triggers the actions of an automation.</summary>
    public static void Trigger(this IEnumerable<AutomationEntity> target, AutomationTriggerParameters data)
    {
        target.CallService("trigger", data);
    }

    ///<summary>Triggers the actions of an automation.</summary>
    ///<param name="target">The AutomationEntity to call this service for</param>
    ///<param name="skipCondition">Defines whether or not the conditions will be skipped.</param>
    public static void Trigger(this AutomationEntity target, bool? skipCondition = null)
    {
        target.CallService("trigger", new AutomationTriggerParameters { SkipCondition = skipCondition });
    }

    ///<summary>Triggers the actions of an automation.</summary>
    ///<param name="target">The IEnumerable&lt;AutomationEntity&gt; to call this service for</param>
    ///<param name="skipCondition">Defines whether or not the conditions will be skipped.</param>
    public static void Trigger(this IEnumerable<AutomationEntity> target, bool? skipCondition = null)
    {
        target.CallService("trigger", new AutomationTriggerParameters { SkipCondition = skipCondition });
    }

    ///<summary>Disables an automation.</summary>
    public static void TurnOff(this AutomationEntity target, AutomationTurnOffParameters data)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Disables an automation.</summary>
    public static void TurnOff(this IEnumerable<AutomationEntity> target, AutomationTurnOffParameters data)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Disables an automation.</summary>
    ///<param name="target">The AutomationEntity to call this service for</param>
    ///<param name="stopActions">Stops currently running actions.</param>
    public static void TurnOff(this AutomationEntity target, bool? stopActions = null)
    {
        target.CallService("turn_off", new AutomationTurnOffParameters { StopActions = stopActions });
    }

    ///<summary>Disables an automation.</summary>
    ///<param name="target">The IEnumerable&lt;AutomationEntity&gt; to call this service for</param>
    ///<param name="stopActions">Stops currently running actions.</param>
    public static void TurnOff(this IEnumerable<AutomationEntity> target, bool? stopActions = null)
    {
        target.CallService("turn_off", new AutomationTurnOffParameters { StopActions = stopActions });
    }

    ///<summary>Enables an automation.</summary>
    public static void TurnOn(this AutomationEntity target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Enables an automation.</summary>
    public static void TurnOn(this IEnumerable<AutomationEntity> target)
    {
        target.CallService("turn_on");
    }
}

public static class ButtonEntityExtensionMethods
{
    ///<summary>Press the button entity.</summary>
    public static void Press(this ButtonEntity target)
    {
        target.CallService("press");
    }

    ///<summary>Press the button entity.</summary>
    public static void Press(this IEnumerable<ButtonEntity> target)
    {
        target.CallService("press");
    }
}

public static class CalendarEntityExtensionMethods
{
    ///<summary>Adds a new calendar event.</summary>
    public static void CreateEvent(this CalendarEntity target, CalendarCreateEventParameters data)
    {
        target.CallService("create_event", data);
    }

    ///<summary>Adds a new calendar event.</summary>
    public static void CreateEvent(this IEnumerable<CalendarEntity> target, CalendarCreateEventParameters data)
    {
        target.CallService("create_event", data);
    }

    ///<summary>Adds a new calendar event.</summary>
    ///<param name="target">The CalendarEntity to call this service for</param>
    ///<param name="summary">Defines the short summary or subject for the event. eg: Department Party</param>
    ///<param name="description">A more complete description of the event than the one provided by the summary. eg: Meeting to provide technical review for &apos;Phoenix&apos; design.</param>
    ///<param name="startDateTime">The date and time the event should start. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">The date and time the event should end. eg: 2022-03-22 22:00:00</param>
    ///<param name="startDate">The date the all-day event should start. eg: 2022-03-22</param>
    ///<param name="endDate">The date the all-day event should end (exclusive). eg: 2022-03-23</param>
    ///<param name="in">Days or weeks that you want to create the event in. eg: {&quot;days&quot;: 2} or {&quot;weeks&quot;: 2}</param>
    ///<param name="location">The location of the event. eg: Conference Room - F123, Bldg. 002</param>
    public static void CreateEvent(this CalendarEntity target, string summary, string? description = null, object? startDateTime = null, object? endDateTime = null, object? startDate = null, object? endDate = null, object? @in = null, string? location = null)
    {
        target.CallService("create_event", new CalendarCreateEventParameters { Summary = summary, Description = description, StartDateTime = startDateTime, EndDateTime = endDateTime, StartDate = startDate, EndDate = endDate, In = @in, Location = location });
    }

    ///<summary>Adds a new calendar event.</summary>
    ///<param name="target">The IEnumerable&lt;CalendarEntity&gt; to call this service for</param>
    ///<param name="summary">Defines the short summary or subject for the event. eg: Department Party</param>
    ///<param name="description">A more complete description of the event than the one provided by the summary. eg: Meeting to provide technical review for &apos;Phoenix&apos; design.</param>
    ///<param name="startDateTime">The date and time the event should start. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">The date and time the event should end. eg: 2022-03-22 22:00:00</param>
    ///<param name="startDate">The date the all-day event should start. eg: 2022-03-22</param>
    ///<param name="endDate">The date the all-day event should end (exclusive). eg: 2022-03-23</param>
    ///<param name="in">Days or weeks that you want to create the event in. eg: {&quot;days&quot;: 2} or {&quot;weeks&quot;: 2}</param>
    ///<param name="location">The location of the event. eg: Conference Room - F123, Bldg. 002</param>
    public static void CreateEvent(this IEnumerable<CalendarEntity> target, string summary, string? description = null, object? startDateTime = null, object? endDateTime = null, object? startDate = null, object? endDate = null, object? @in = null, string? location = null)
    {
        target.CallService("create_event", new CalendarCreateEventParameters { Summary = summary, Description = description, StartDateTime = startDateTime, EndDateTime = endDateTime, StartDate = startDate, EndDate = endDate, In = @in, Location = location });
    }

    ///<summary>Lists events on a calendar within a time range.</summary>
    public static void ListEvents(this CalendarEntity target, CalendarListEventsParameters data)
    {
        target.CallService("list_events", data);
    }

    ///<summary>Lists events on a calendar within a time range.</summary>
    public static void ListEvents(this IEnumerable<CalendarEntity> target, CalendarListEventsParameters data)
    {
        target.CallService("list_events", data);
    }

    ///<summary>Lists events on a calendar within a time range.</summary>
    ///<param name="target">The CalendarEntity to call this service for</param>
    ///<param name="startDateTime">Returns active events after this time (exclusive). When not set, defaults to now. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">Returns active events before this time (exclusive). Cannot be used with &apos;duration&apos;. eg: 2022-03-22 22:00:00</param>
    ///<param name="duration">Returns active events from start_date_time until the specified duration.</param>
    public static void ListEvents(this CalendarEntity target, object? startDateTime = null, object? endDateTime = null, object? duration = null)
    {
        target.CallService("list_events", new CalendarListEventsParameters { StartDateTime = startDateTime, EndDateTime = endDateTime, Duration = duration });
    }

    ///<summary>Lists events on a calendar within a time range.</summary>
    ///<param name="target">The IEnumerable&lt;CalendarEntity&gt; to call this service for</param>
    ///<param name="startDateTime">Returns active events after this time (exclusive). When not set, defaults to now. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">Returns active events before this time (exclusive). Cannot be used with &apos;duration&apos;. eg: 2022-03-22 22:00:00</param>
    ///<param name="duration">Returns active events from start_date_time until the specified duration.</param>
    public static void ListEvents(this IEnumerable<CalendarEntity> target, object? startDateTime = null, object? endDateTime = null, object? duration = null)
    {
        target.CallService("list_events", new CalendarListEventsParameters { StartDateTime = startDateTime, EndDateTime = endDateTime, Duration = duration });
    }
}

public static class CameraEntityExtensionMethods
{
    ///<summary>Disables the motion detection.</summary>
    public static void DisableMotionDetection(this CameraEntity target)
    {
        target.CallService("disable_motion_detection");
    }

    ///<summary>Disables the motion detection.</summary>
    public static void DisableMotionDetection(this IEnumerable<CameraEntity> target)
    {
        target.CallService("disable_motion_detection");
    }

    ///<summary>Enables the motion detection.</summary>
    public static void EnableMotionDetection(this CameraEntity target)
    {
        target.CallService("enable_motion_detection");
    }

    ///<summary>Enables the motion detection.</summary>
    public static void EnableMotionDetection(this IEnumerable<CameraEntity> target)
    {
        target.CallService("enable_motion_detection");
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    public static void PlayStream(this CameraEntity target, CameraPlayStreamParameters data)
    {
        target.CallService("play_stream", data);
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    public static void PlayStream(this IEnumerable<CameraEntity> target, CameraPlayStreamParameters data)
    {
        target.CallService("play_stream", data);
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    ///<param name="target">The CameraEntity to call this service for</param>
    ///<param name="mediaPlayer">Media players to stream to.</param>
    ///<param name="format">Stream format supported by the media player.</param>
    public static void PlayStream(this CameraEntity target, string mediaPlayer, object? format = null)
    {
        target.CallService("play_stream", new CameraPlayStreamParameters { MediaPlayer = mediaPlayer, Format = format });
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    ///<param name="target">The IEnumerable&lt;CameraEntity&gt; to call this service for</param>
    ///<param name="mediaPlayer">Media players to stream to.</param>
    ///<param name="format">Stream format supported by the media player.</param>
    public static void PlayStream(this IEnumerable<CameraEntity> target, string mediaPlayer, object? format = null)
    {
        target.CallService("play_stream", new CameraPlayStreamParameters { MediaPlayer = mediaPlayer, Format = format });
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    public static void Record(this CameraEntity target, CameraRecordParameters data)
    {
        target.CallService("record", data);
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    public static void Record(this IEnumerable<CameraEntity> target, CameraRecordParameters data)
    {
        target.CallService("record", data);
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    ///<param name="target">The CameraEntity to call this service for</param>
    ///<param name="filename">Template of a filename. Variable available is `entity_id`. Must be mp4. eg: /tmp/snapshot_{{ entity_id.name }}.mp4</param>
    ///<param name="duration">Planned duration of the recording. The actual duration may vary.</param>
    ///<param name="lookback">Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary.</param>
    public static void Record(this CameraEntity target, string filename, long? duration = null, long? lookback = null)
    {
        target.CallService("record", new CameraRecordParameters { Filename = filename, Duration = duration, Lookback = lookback });
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    ///<param name="target">The IEnumerable&lt;CameraEntity&gt; to call this service for</param>
    ///<param name="filename">Template of a filename. Variable available is `entity_id`. Must be mp4. eg: /tmp/snapshot_{{ entity_id.name }}.mp4</param>
    ///<param name="duration">Planned duration of the recording. The actual duration may vary.</param>
    ///<param name="lookback">Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary.</param>
    public static void Record(this IEnumerable<CameraEntity> target, string filename, long? duration = null, long? lookback = null)
    {
        target.CallService("record", new CameraRecordParameters { Filename = filename, Duration = duration, Lookback = lookback });
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    public static void Snapshot(this CameraEntity target, CameraSnapshotParameters data)
    {
        target.CallService("snapshot", data);
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    public static void Snapshot(this IEnumerable<CameraEntity> target, CameraSnapshotParameters data)
    {
        target.CallService("snapshot", data);
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    ///<param name="target">The CameraEntity to call this service for</param>
    ///<param name="filename">Template of a filename. Variable available is `entity_id`. eg: /tmp/snapshot_{{ entity_id.name }}.jpg</param>
    public static void Snapshot(this CameraEntity target, string filename)
    {
        target.CallService("snapshot", new CameraSnapshotParameters { Filename = filename });
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    ///<param name="target">The IEnumerable&lt;CameraEntity&gt; to call this service for</param>
    ///<param name="filename">Template of a filename. Variable available is `entity_id`. eg: /tmp/snapshot_{{ entity_id.name }}.jpg</param>
    public static void Snapshot(this IEnumerable<CameraEntity> target, string filename)
    {
        target.CallService("snapshot", new CameraSnapshotParameters { Filename = filename });
    }

    ///<summary>Turns off the camera.</summary>
    public static void TurnOff(this CameraEntity target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns off the camera.</summary>
    public static void TurnOff(this IEnumerable<CameraEntity> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns on the camera.</summary>
    public static void TurnOn(this CameraEntity target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Turns on the camera.</summary>
    public static void TurnOn(this IEnumerable<CameraEntity> target)
    {
        target.CallService("turn_on");
    }
}

public static class CoverEntityExtensionMethods
{
    ///<summary>Closes a cover.</summary>
    public static void CloseCover(this CoverEntity target)
    {
        target.CallService("close_cover");
    }

    ///<summary>Closes a cover.</summary>
    public static void CloseCover(this IEnumerable<CoverEntity> target)
    {
        target.CallService("close_cover");
    }

    ///<summary>Tilts a cover to close.</summary>
    public static void CloseCoverTilt(this CoverEntity target)
    {
        target.CallService("close_cover_tilt");
    }

    ///<summary>Tilts a cover to close.</summary>
    public static void CloseCoverTilt(this IEnumerable<CoverEntity> target)
    {
        target.CallService("close_cover_tilt");
    }

    ///<summary>Opens a cover.</summary>
    public static void OpenCover(this CoverEntity target)
    {
        target.CallService("open_cover");
    }

    ///<summary>Opens a cover.</summary>
    public static void OpenCover(this IEnumerable<CoverEntity> target)
    {
        target.CallService("open_cover");
    }

    ///<summary>Tilts a cover open.</summary>
    public static void OpenCoverTilt(this CoverEntity target)
    {
        target.CallService("open_cover_tilt");
    }

    ///<summary>Tilts a cover open.</summary>
    public static void OpenCoverTilt(this IEnumerable<CoverEntity> target)
    {
        target.CallService("open_cover_tilt");
    }

    ///<summary>Moves a cover to a specific position.</summary>
    public static void SetCoverPosition(this CoverEntity target, CoverSetCoverPositionParameters data)
    {
        target.CallService("set_cover_position", data);
    }

    ///<summary>Moves a cover to a specific position.</summary>
    public static void SetCoverPosition(this IEnumerable<CoverEntity> target, CoverSetCoverPositionParameters data)
    {
        target.CallService("set_cover_position", data);
    }

    ///<summary>Moves a cover to a specific position.</summary>
    ///<param name="target">The CoverEntity to call this service for</param>
    ///<param name="position">Target position.</param>
    public static void SetCoverPosition(this CoverEntity target, long position)
    {
        target.CallService("set_cover_position", new CoverSetCoverPositionParameters { Position = position });
    }

    ///<summary>Moves a cover to a specific position.</summary>
    ///<param name="target">The IEnumerable&lt;CoverEntity&gt; to call this service for</param>
    ///<param name="position">Target position.</param>
    public static void SetCoverPosition(this IEnumerable<CoverEntity> target, long position)
    {
        target.CallService("set_cover_position", new CoverSetCoverPositionParameters { Position = position });
    }

    ///<summary>Moves a cover tilt to a specific position.</summary>
    public static void SetCoverTiltPosition(this CoverEntity target, CoverSetCoverTiltPositionParameters data)
    {
        target.CallService("set_cover_tilt_position", data);
    }

    ///<summary>Moves a cover tilt to a specific position.</summary>
    public static void SetCoverTiltPosition(this IEnumerable<CoverEntity> target, CoverSetCoverTiltPositionParameters data)
    {
        target.CallService("set_cover_tilt_position", data);
    }

    ///<summary>Moves a cover tilt to a specific position.</summary>
    ///<param name="target">The CoverEntity to call this service for</param>
    ///<param name="tiltPosition">Target tilt positition.</param>
    public static void SetCoverTiltPosition(this CoverEntity target, long tiltPosition)
    {
        target.CallService("set_cover_tilt_position", new CoverSetCoverTiltPositionParameters { TiltPosition = tiltPosition });
    }

    ///<summary>Moves a cover tilt to a specific position.</summary>
    ///<param name="target">The IEnumerable&lt;CoverEntity&gt; to call this service for</param>
    ///<param name="tiltPosition">Target tilt positition.</param>
    public static void SetCoverTiltPosition(this IEnumerable<CoverEntity> target, long tiltPosition)
    {
        target.CallService("set_cover_tilt_position", new CoverSetCoverTiltPositionParameters { TiltPosition = tiltPosition });
    }

    ///<summary>Stops the cover movement.</summary>
    public static void StopCover(this CoverEntity target)
    {
        target.CallService("stop_cover");
    }

    ///<summary>Stops the cover movement.</summary>
    public static void StopCover(this IEnumerable<CoverEntity> target)
    {
        target.CallService("stop_cover");
    }

    ///<summary>Stops a tilting cover movement.</summary>
    public static void StopCoverTilt(this CoverEntity target)
    {
        target.CallService("stop_cover_tilt");
    }

    ///<summary>Stops a tilting cover movement.</summary>
    public static void StopCoverTilt(this IEnumerable<CoverEntity> target)
    {
        target.CallService("stop_cover_tilt");
    }

    ///<summary>Toggles a cover open/closed.</summary>
    public static void Toggle(this CoverEntity target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggles a cover open/closed.</summary>
    public static void Toggle(this IEnumerable<CoverEntity> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggles a cover tilt open/closed.</summary>
    public static void ToggleCoverTilt(this CoverEntity target)
    {
        target.CallService("toggle_cover_tilt");
    }

    ///<summary>Toggles a cover tilt open/closed.</summary>
    public static void ToggleCoverTilt(this IEnumerable<CoverEntity> target)
    {
        target.CallService("toggle_cover_tilt");
    }
}

public static class GoogleEntityExtensionMethods
{
    ///<summary>Add a new calendar event.</summary>
    public static void CreateEvent(this CalendarEntity target, GoogleCreateEventParameters data)
    {
        target.CallService("create_event", data);
    }

    ///<summary>Add a new calendar event.</summary>
    public static void CreateEvent(this IEnumerable<CalendarEntity> target, GoogleCreateEventParameters data)
    {
        target.CallService("create_event", data);
    }

    ///<summary>Add a new calendar event.</summary>
    ///<param name="target">The CalendarEntity to call this service for</param>
    ///<param name="summary">Acts as the title of the event. eg: Bowling</param>
    ///<param name="description">The description of the event. Optional. eg: Birthday bowling</param>
    ///<param name="startDateTime">The date and time the event should start. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">The date and time the event should end. eg: 2022-03-22 22:00:00</param>
    ///<param name="startDate">The date the whole day event should start. eg: 2022-03-10</param>
    ///<param name="endDate">The date the whole day event should end. eg: 2022-03-11</param>
    ///<param name="in">Days or weeks that you want to create the event in. eg: &quot;days&quot;: 2 or &quot;weeks&quot;: 2</param>
    ///<param name="location">The location of the event. Optional. eg: Conference Room - F123, Bldg. 002</param>
    public static void CreateEvent(this CalendarEntity target, string summary, string? description = null, string? startDateTime = null, string? endDateTime = null, string? startDate = null, string? endDate = null, object? @in = null, string? location = null)
    {
        target.CallService("create_event", new GoogleCreateEventParameters { Summary = summary, Description = description, StartDateTime = startDateTime, EndDateTime = endDateTime, StartDate = startDate, EndDate = endDate, In = @in, Location = location });
    }

    ///<summary>Add a new calendar event.</summary>
    ///<param name="target">The IEnumerable&lt;CalendarEntity&gt; to call this service for</param>
    ///<param name="summary">Acts as the title of the event. eg: Bowling</param>
    ///<param name="description">The description of the event. Optional. eg: Birthday bowling</param>
    ///<param name="startDateTime">The date and time the event should start. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">The date and time the event should end. eg: 2022-03-22 22:00:00</param>
    ///<param name="startDate">The date the whole day event should start. eg: 2022-03-10</param>
    ///<param name="endDate">The date the whole day event should end. eg: 2022-03-11</param>
    ///<param name="in">Days or weeks that you want to create the event in. eg: &quot;days&quot;: 2 or &quot;weeks&quot;: 2</param>
    ///<param name="location">The location of the event. Optional. eg: Conference Room - F123, Bldg. 002</param>
    public static void CreateEvent(this IEnumerable<CalendarEntity> target, string summary, string? description = null, string? startDateTime = null, string? endDateTime = null, string? startDate = null, string? endDate = null, object? @in = null, string? location = null)
    {
        target.CallService("create_event", new GoogleCreateEventParameters { Summary = summary, Description = description, StartDateTime = startDateTime, EndDateTime = endDateTime, StartDate = startDate, EndDate = endDate, In = @in, Location = location });
    }
}

public static class HueEntityExtensionMethods
{
    ///<summary>Activates a Hue scene with more control over the options.</summary>
    public static void ActivateScene(this SceneEntity target, HueActivateSceneParameters data)
    {
        target.CallService("activate_scene", data);
    }

    ///<summary>Activates a Hue scene with more control over the options.</summary>
    public static void ActivateScene(this IEnumerable<SceneEntity> target, HueActivateSceneParameters data)
    {
        target.CallService("activate_scene", data);
    }

    ///<summary>Activates a Hue scene with more control over the options.</summary>
    ///<param name="target">The SceneEntity to call this service for</param>
    ///<param name="transition">Transition duration it takes to bring devices to the state defined in the scene.</param>
    ///<param name="dynamic">Enable dynamic mode of the scene.</param>
    ///<param name="speed">Speed of dynamic palette for this scene.</param>
    ///<param name="brightness">Set brightness for the scene.</param>
    public static void ActivateScene(this SceneEntity target, long? transition = null, bool? dynamic = null, long? speed = null, long? brightness = null)
    {
        target.CallService("activate_scene", new HueActivateSceneParameters { Transition = transition, Dynamic = dynamic, Speed = speed, Brightness = brightness });
    }

    ///<summary>Activates a Hue scene with more control over the options.</summary>
    ///<param name="target">The IEnumerable&lt;SceneEntity&gt; to call this service for</param>
    ///<param name="transition">Transition duration it takes to bring devices to the state defined in the scene.</param>
    ///<param name="dynamic">Enable dynamic mode of the scene.</param>
    ///<param name="speed">Speed of dynamic palette for this scene.</param>
    ///<param name="brightness">Set brightness for the scene.</param>
    public static void ActivateScene(this IEnumerable<SceneEntity> target, long? transition = null, bool? dynamic = null, long? speed = null, long? brightness = null)
    {
        target.CallService("activate_scene", new HueActivateSceneParameters { Transition = transition, Dynamic = dynamic, Speed = speed, Brightness = brightness });
    }
}

public static class InputBooleanEntityExtensionMethods
{
    ///<summary>Toggles the helper on/off.</summary>
    public static void Toggle(this InputBooleanEntity target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggles the helper on/off.</summary>
    public static void Toggle(this IEnumerable<InputBooleanEntity> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Turns off the helper.</summary>
    public static void TurnOff(this InputBooleanEntity target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns off the helper.</summary>
    public static void TurnOff(this IEnumerable<InputBooleanEntity> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns on the helper.</summary>
    public static void TurnOn(this InputBooleanEntity target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Turns on the helper.</summary>
    public static void TurnOn(this IEnumerable<InputBooleanEntity> target)
    {
        target.CallService("turn_on");
    }
}

public static class InputButtonEntityExtensionMethods
{
    ///<summary>Mimics the physical button press on the device.</summary>
    public static void Press(this InputButtonEntity target)
    {
        target.CallService("press");
    }

    ///<summary>Mimics the physical button press on the device.</summary>
    public static void Press(this IEnumerable<InputButtonEntity> target)
    {
        target.CallService("press");
    }
}

public static class InputDatetimeEntityExtensionMethods
{
    ///<summary>Sets the date and/or time.</summary>
    public static void SetDatetime(this InputDatetimeEntity target, InputDatetimeSetDatetimeParameters data)
    {
        target.CallService("set_datetime", data);
    }

    ///<summary>Sets the date and/or time.</summary>
    public static void SetDatetime(this IEnumerable<InputDatetimeEntity> target, InputDatetimeSetDatetimeParameters data)
    {
        target.CallService("set_datetime", data);
    }

    ///<summary>Sets the date and/or time.</summary>
    ///<param name="target">The InputDatetimeEntity to call this service for</param>
    ///<param name="date">The target date. eg: &quot;2019-04-20&quot;</param>
    ///<param name="time">The target time. eg: &quot;05:04:20&quot;</param>
    ///<param name="datetime">The target date &amp; time. eg: &quot;2019-04-20 05:04:20&quot;</param>
    ///<param name="timestamp">The target date &amp; time, expressed by a UNIX timestamp.</param>
    public static void SetDatetime(this InputDatetimeEntity target, string? date = null, DateTime? time = null, string? datetime = null, long? timestamp = null)
    {
        target.CallService("set_datetime", new InputDatetimeSetDatetimeParameters { Date = date, Time = time, Datetime = datetime, Timestamp = timestamp });
    }

    ///<summary>Sets the date and/or time.</summary>
    ///<param name="target">The IEnumerable&lt;InputDatetimeEntity&gt; to call this service for</param>
    ///<param name="date">The target date. eg: &quot;2019-04-20&quot;</param>
    ///<param name="time">The target time. eg: &quot;05:04:20&quot;</param>
    ///<param name="datetime">The target date &amp; time. eg: &quot;2019-04-20 05:04:20&quot;</param>
    ///<param name="timestamp">The target date &amp; time, expressed by a UNIX timestamp.</param>
    public static void SetDatetime(this IEnumerable<InputDatetimeEntity> target, string? date = null, DateTime? time = null, string? datetime = null, long? timestamp = null)
    {
        target.CallService("set_datetime", new InputDatetimeSetDatetimeParameters { Date = date, Time = time, Datetime = datetime, Timestamp = timestamp });
    }
}

public static class InputNumberEntityExtensionMethods
{
    ///<summary>Decrease an input number entity value by a certain amount.</summary>
    public static void Decrement(this InputNumberEntity target, InputNumberDecrementParameters data)
    {
        target.CallService("decrement", data);
    }

    ///<summary>Decrease an input number entity value by a certain amount.</summary>
    public static void Decrement(this IEnumerable<InputNumberEntity> target, InputNumberDecrementParameters data)
    {
        target.CallService("decrement", data);
    }

    ///<summary>Decrease an input number entity value by a certain amount.</summary>
    ///<param name="target">The InputNumberEntity to call this service for</param>
    ///<param name="amount">The amount to decrease the input number with. If not provided, the step of the number entity will be used.</param>
    public static void Decrement(this InputNumberEntity target, long? amount = null)
    {
        target.CallService("decrement", new InputNumberDecrementParameters { Amount = amount });
    }

    ///<summary>Decrease an input number entity value by a certain amount.</summary>
    ///<param name="target">The IEnumerable&lt;InputNumberEntity&gt; to call this service for</param>
    ///<param name="amount">The amount to decrease the input number with. If not provided, the step of the number entity will be used.</param>
    public static void Decrement(this IEnumerable<InputNumberEntity> target, long? amount = null)
    {
        target.CallService("decrement", new InputNumberDecrementParameters { Amount = amount });
    }

    ///<summary>Increase an input number entity value by a certain amount.</summary>
    public static void Increment(this InputNumberEntity target, InputNumberIncrementParameters data)
    {
        target.CallService("increment", data);
    }

    ///<summary>Increase an input number entity value by a certain amount.</summary>
    public static void Increment(this IEnumerable<InputNumberEntity> target, InputNumberIncrementParameters data)
    {
        target.CallService("increment", data);
    }

    ///<summary>Increase an input number entity value by a certain amount.</summary>
    ///<param name="target">The InputNumberEntity to call this service for</param>
    ///<param name="amount">The amount to increase the input number with. If not provided, the step of the number entity will be used.</param>
    public static void Increment(this InputNumberEntity target, long? amount = null)
    {
        target.CallService("increment", new InputNumberIncrementParameters { Amount = amount });
    }

    ///<summary>Increase an input number entity value by a certain amount.</summary>
    ///<param name="target">The IEnumerable&lt;InputNumberEntity&gt; to call this service for</param>
    ///<param name="amount">The amount to increase the input number with. If not provided, the step of the number entity will be used.</param>
    public static void Increment(this IEnumerable<InputNumberEntity> target, long? amount = null)
    {
        target.CallService("increment", new InputNumberIncrementParameters { Amount = amount });
    }

    ///<summary>Set an input number entity to its maximum value.</summary>
    public static void Max(this InputNumberEntity target)
    {
        target.CallService("max");
    }

    ///<summary>Set an input number entity to its maximum value.</summary>
    public static void Max(this IEnumerable<InputNumberEntity> target)
    {
        target.CallService("max");
    }

    ///<summary>Set an input number entity to its minimum value.</summary>
    public static void Min(this InputNumberEntity target)
    {
        target.CallService("min");
    }

    ///<summary>Set an input number entity to its minimum value.</summary>
    public static void Min(this IEnumerable<InputNumberEntity> target)
    {
        target.CallService("min");
    }

    ///<summary>Sets the value.</summary>
    public static void SetValue(this InputNumberEntity target, InputNumberSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value.</summary>
    public static void SetValue(this IEnumerable<InputNumberEntity> target, InputNumberSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The InputNumberEntity to call this service for</param>
    ///<param name="value">The target value.</param>
    public static void SetValue(this InputNumberEntity target, double value)
    {
        target.CallService("set_value", new InputNumberSetValueParameters { Value = value });
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The IEnumerable&lt;InputNumberEntity&gt; to call this service for</param>
    ///<param name="value">The target value.</param>
    public static void SetValue(this IEnumerable<InputNumberEntity> target, double value)
    {
        target.CallService("set_value", new InputNumberSetValueParameters { Value = value });
    }
}

public static class InputSelectEntityExtensionMethods
{
    ///<summary>Select an random option for an input_select entity.</summary>
    public static void Random(this InputSelectEntity target, InputSelectRandomParameters data)
    {
        target.CallService("random", data);
    }

    ///<summary>Select an random option for an input_select entity.</summary>
    public static void Random(this IEnumerable<InputSelectEntity> target, InputSelectRandomParameters data)
    {
        target.CallService("random", data);
    }

    ///<summary>Select an random option for an input_select entity.</summary>
    ///<param name="target">The InputSelectEntity to call this service for</param>
    ///<param name="options">Limits the options to select from. If not provided, all options will be considered.</param>
    public static void Random(this InputSelectEntity target, object? options = null)
    {
        target.CallService("random", new InputSelectRandomParameters { Options = options });
    }

    ///<summary>Select an random option for an input_select entity.</summary>
    ///<param name="target">The IEnumerable&lt;InputSelectEntity&gt; to call this service for</param>
    ///<param name="options">Limits the options to select from. If not provided, all options will be considered.</param>
    public static void Random(this IEnumerable<InputSelectEntity> target, object? options = null)
    {
        target.CallService("random", new InputSelectRandomParameters { Options = options });
    }

    ///<summary>Selects the first option.</summary>
    public static void SelectFirst(this InputSelectEntity target)
    {
        target.CallService("select_first");
    }

    ///<summary>Selects the first option.</summary>
    public static void SelectFirst(this IEnumerable<InputSelectEntity> target)
    {
        target.CallService("select_first");
    }

    ///<summary>Selects the last option.</summary>
    public static void SelectLast(this InputSelectEntity target)
    {
        target.CallService("select_last");
    }

    ///<summary>Selects the last option.</summary>
    public static void SelectLast(this IEnumerable<InputSelectEntity> target)
    {
        target.CallService("select_last");
    }

    ///<summary>Select the next option.</summary>
    public static void SelectNext(this InputSelectEntity target, InputSelectSelectNextParameters data)
    {
        target.CallService("select_next", data);
    }

    ///<summary>Select the next option.</summary>
    public static void SelectNext(this IEnumerable<InputSelectEntity> target, InputSelectSelectNextParameters data)
    {
        target.CallService("select_next", data);
    }

    ///<summary>Select the next option.</summary>
    ///<param name="target">The InputSelectEntity to call this service for</param>
    ///<param name="cycle">If the option should cycle from the last to the first option on the list.</param>
    public static void SelectNext(this InputSelectEntity target, bool? cycle = null)
    {
        target.CallService("select_next", new InputSelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Select the next option.</summary>
    ///<param name="target">The IEnumerable&lt;InputSelectEntity&gt; to call this service for</param>
    ///<param name="cycle">If the option should cycle from the last to the first option on the list.</param>
    public static void SelectNext(this IEnumerable<InputSelectEntity> target, bool? cycle = null)
    {
        target.CallService("select_next", new InputSelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Selects an option.</summary>
    public static void SelectOption(this InputSelectEntity target, InputSelectSelectOptionParameters data)
    {
        target.CallService("select_option", data);
    }

    ///<summary>Selects an option.</summary>
    public static void SelectOption(this IEnumerable<InputSelectEntity> target, InputSelectSelectOptionParameters data)
    {
        target.CallService("select_option", data);
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The InputSelectEntity to call this service for</param>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public static void SelectOption(this InputSelectEntity target, string option)
    {
        target.CallService("select_option", new InputSelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The IEnumerable&lt;InputSelectEntity&gt; to call this service for</param>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public static void SelectOption(this IEnumerable<InputSelectEntity> target, string option)
    {
        target.CallService("select_option", new InputSelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects the previous option.</summary>
    public static void SelectPrevious(this InputSelectEntity target, InputSelectSelectPreviousParameters data)
    {
        target.CallService("select_previous", data);
    }

    ///<summary>Selects the previous option.</summary>
    public static void SelectPrevious(this IEnumerable<InputSelectEntity> target, InputSelectSelectPreviousParameters data)
    {
        target.CallService("select_previous", data);
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The InputSelectEntity to call this service for</param>
    ///<param name="cycle">If the option should cycle from the last to the first option on the list.</param>
    public static void SelectPrevious(this InputSelectEntity target, bool? cycle = null)
    {
        target.CallService("select_previous", new InputSelectSelectPreviousParameters { Cycle = cycle });
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The IEnumerable&lt;InputSelectEntity&gt; to call this service for</param>
    ///<param name="cycle">If the option should cycle from the last to the first option on the list.</param>
    public static void SelectPrevious(this IEnumerable<InputSelectEntity> target, bool? cycle = null)
    {
        target.CallService("select_previous", new InputSelectSelectPreviousParameters { Cycle = cycle });
    }

    ///<summary>Sets the options.</summary>
    public static void SetOptions(this InputSelectEntity target, InputSelectSetOptionsParameters data)
    {
        target.CallService("set_options", data);
    }

    ///<summary>Sets the options.</summary>
    public static void SetOptions(this IEnumerable<InputSelectEntity> target, InputSelectSetOptionsParameters data)
    {
        target.CallService("set_options", data);
    }

    ///<summary>Sets the options.</summary>
    ///<param name="target">The InputSelectEntity to call this service for</param>
    ///<param name="options">List of options. eg: [&quot;Item A&quot;, &quot;Item B&quot;, &quot;Item C&quot;]</param>
    public static void SetOptions(this InputSelectEntity target, object options)
    {
        target.CallService("set_options", new InputSelectSetOptionsParameters { Options = options });
    }

    ///<summary>Sets the options.</summary>
    ///<param name="target">The IEnumerable&lt;InputSelectEntity&gt; to call this service for</param>
    ///<param name="options">List of options. eg: [&quot;Item A&quot;, &quot;Item B&quot;, &quot;Item C&quot;]</param>
    public static void SetOptions(this IEnumerable<InputSelectEntity> target, object options)
    {
        target.CallService("set_options", new InputSelectSetOptionsParameters { Options = options });
    }

    ///<summary>Shuffles the list of selectable options for an `input_select` entity. This is not persistent and will be undone once reloaded or Home Assistant restarts.</summary>
    public static void Shuffle(this InputSelectEntity target)
    {
        target.CallService("shuffle");
    }

    ///<summary>Shuffles the list of selectable options for an `input_select` entity. This is not persistent and will be undone once reloaded or Home Assistant restarts.</summary>
    public static void Shuffle(this IEnumerable<InputSelectEntity> target)
    {
        target.CallService("shuffle");
    }

    ///<summary>Sorts the list of selectable options for an `input_select` entity. This is not persistent and will be undone once reloaded or Home Assistant restarts.</summary>
    public static void Sort(this InputSelectEntity target)
    {
        target.CallService("sort");
    }

    ///<summary>Sorts the list of selectable options for an `input_select` entity. This is not persistent and will be undone once reloaded or Home Assistant restarts.</summary>
    public static void Sort(this IEnumerable<InputSelectEntity> target)
    {
        target.CallService("sort");
    }
}

public static class InputTextEntityExtensionMethods
{
    ///<summary>Sets the value.</summary>
    public static void SetValue(this InputTextEntity target, InputTextSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value.</summary>
    public static void SetValue(this IEnumerable<InputTextEntity> target, InputTextSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The InputTextEntity to call this service for</param>
    ///<param name="value">The target value. eg: This is an example text</param>
    public static void SetValue(this InputTextEntity target, string value)
    {
        target.CallService("set_value", new InputTextSetValueParameters { Value = value });
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The IEnumerable&lt;InputTextEntity&gt; to call this service for</param>
    ///<param name="value">The target value. eg: This is an example text</param>
    public static void SetValue(this IEnumerable<InputTextEntity> target, string value)
    {
        target.CallService("set_value", new InputTextSetValueParameters { Value = value });
    }
}

public static class LightEntityExtensionMethods
{
    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state.</summary>
    public static void Toggle(this LightEntity target, LightToggleParameters data)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state.</summary>
    public static void Toggle(this IEnumerable<LightEntity> target, LightToggleParameters data)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state.</summary>
    ///<param name="target">The LightEntity to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="colorName">A human-readable color name.</param>
    ///<param name="hsColor">Color in hue/sat format. A list of two integers. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</param>
    ///<param name="xyColor">Color in XY-format. A list of two decimal numbers between 0 and 1. eg: [0.52, 0.43]</param>
    ///<param name="colorTemp">Color temperature in mireds.</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightness">Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness, and 255 is the maximum brightness.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="white">Set the light to white mode.</param>
    ///<param name="profile">Name of a light profile to use. eg: relax</param>
    ///<param name="flash">Tell light to flash, can be either value short or long.</param>
    ///<param name="effect">Light effect.</param>
    public static void Toggle(this LightEntity target, long? transition = null, object? rgbColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, long? kelvin = null, long? brightness = null, long? brightnessPct = null, object? white = null, string? profile = null, object? flash = null, string? effect = null)
    {
        target.CallService("toggle", new LightToggleParameters { Transition = transition, RgbColor = rgbColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Kelvin = kelvin, Brightness = brightness, BrightnessPct = brightnessPct, White = white, Profile = profile, Flash = flash, Effect = effect });
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state.</summary>
    ///<param name="target">The IEnumerable&lt;LightEntity&gt; to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="colorName">A human-readable color name.</param>
    ///<param name="hsColor">Color in hue/sat format. A list of two integers. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</param>
    ///<param name="xyColor">Color in XY-format. A list of two decimal numbers between 0 and 1. eg: [0.52, 0.43]</param>
    ///<param name="colorTemp">Color temperature in mireds.</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightness">Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness, and 255 is the maximum brightness.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="white">Set the light to white mode.</param>
    ///<param name="profile">Name of a light profile to use. eg: relax</param>
    ///<param name="flash">Tell light to flash, can be either value short or long.</param>
    ///<param name="effect">Light effect.</param>
    public static void Toggle(this IEnumerable<LightEntity> target, long? transition = null, object? rgbColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, long? kelvin = null, long? brightness = null, long? brightnessPct = null, object? white = null, string? profile = null, object? flash = null, string? effect = null)
    {
        target.CallService("toggle", new LightToggleParameters { Transition = transition, RgbColor = rgbColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Kelvin = kelvin, Brightness = brightness, BrightnessPct = brightnessPct, White = white, Profile = profile, Flash = flash, Effect = effect });
    }

    ///<summary>Turn off one or more lights.</summary>
    public static void TurnOff(this LightEntity target, LightTurnOffParameters data)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turn off one or more lights.</summary>
    public static void TurnOff(this IEnumerable<LightEntity> target, LightTurnOffParameters data)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turn off one or more lights.</summary>
    ///<param name="target">The LightEntity to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="flash">Tell light to flash, can be either value short or long.</param>
    public static void TurnOff(this LightEntity target, long? transition = null, object? flash = null)
    {
        target.CallService("turn_off", new LightTurnOffParameters { Transition = transition, Flash = flash });
    }

    ///<summary>Turn off one or more lights.</summary>
    ///<param name="target">The IEnumerable&lt;LightEntity&gt; to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="flash">Tell light to flash, can be either value short or long.</param>
    public static void TurnOff(this IEnumerable<LightEntity> target, long? transition = null, object? flash = null)
    {
        target.CallService("turn_off", new LightTurnOffParameters { Transition = transition, Flash = flash });
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already.</summary>
    public static void TurnOn(this LightEntity target, LightTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already.</summary>
    public static void TurnOn(this IEnumerable<LightEntity> target, LightTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already.</summary>
    ///<param name="target">The LightEntity to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue.</param>
    ///<param name="rgbwColor">The color in RGBW format. A list of four integers between 0 and 255 representing the values of red, green, blue, and white. eg: [255, 100, 100, 50]</param>
    ///<param name="rgbwwColor">The color in RGBWW format. A list of five integers between 0 and 255 representing the values of red, green, blue, cold white, and warm white. eg: [255, 100, 100, 50, 70]</param>
    ///<param name="colorName">A human-readable color name.</param>
    ///<param name="hsColor">Color in hue/sat format. A list of two integers. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</param>
    ///<param name="xyColor">Color in XY-format. A list of two decimal numbers between 0 and 1. eg: [0.52, 0.43]</param>
    ///<param name="colorTemp">Color temperature in mireds.</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightness">Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness, and 255 is the maximum brightness.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="brightnessStep">Change brightness by an amount.</param>
    ///<param name="brightnessStepPct">Change brightness by a percentage.</param>
    ///<param name="white">Set the light to white mode.</param>
    ///<param name="profile">Name of a light profile to use. eg: relax</param>
    ///<param name="flash">Tell light to flash, can be either value short or long.</param>
    ///<param name="effect">Light effect.</param>
    public static void TurnOn(this LightEntity target, long? transition = null, object? rgbColor = null, object? rgbwColor = null, object? rgbwwColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, long? kelvin = null, long? brightness = null, long? brightnessPct = null, long? brightnessStep = null, long? brightnessStepPct = null, object? white = null, string? profile = null, object? flash = null, string? effect = null)
    {
        target.CallService("turn_on", new LightTurnOnParameters { Transition = transition, RgbColor = rgbColor, RgbwColor = rgbwColor, RgbwwColor = rgbwwColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Kelvin = kelvin, Brightness = brightness, BrightnessPct = brightnessPct, BrightnessStep = brightnessStep, BrightnessStepPct = brightnessStepPct, White = white, Profile = profile, Flash = flash, Effect = effect });
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already.</summary>
    ///<param name="target">The IEnumerable&lt;LightEntity&gt; to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue.</param>
    ///<param name="rgbwColor">The color in RGBW format. A list of four integers between 0 and 255 representing the values of red, green, blue, and white. eg: [255, 100, 100, 50]</param>
    ///<param name="rgbwwColor">The color in RGBWW format. A list of five integers between 0 and 255 representing the values of red, green, blue, cold white, and warm white. eg: [255, 100, 100, 50, 70]</param>
    ///<param name="colorName">A human-readable color name.</param>
    ///<param name="hsColor">Color in hue/sat format. A list of two integers. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</param>
    ///<param name="xyColor">Color in XY-format. A list of two decimal numbers between 0 and 1. eg: [0.52, 0.43]</param>
    ///<param name="colorTemp">Color temperature in mireds.</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightness">Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness, and 255 is the maximum brightness.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="brightnessStep">Change brightness by an amount.</param>
    ///<param name="brightnessStepPct">Change brightness by a percentage.</param>
    ///<param name="white">Set the light to white mode.</param>
    ///<param name="profile">Name of a light profile to use. eg: relax</param>
    ///<param name="flash">Tell light to flash, can be either value short or long.</param>
    ///<param name="effect">Light effect.</param>
    public static void TurnOn(this IEnumerable<LightEntity> target, long? transition = null, object? rgbColor = null, object? rgbwColor = null, object? rgbwwColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, long? kelvin = null, long? brightness = null, long? brightnessPct = null, long? brightnessStep = null, long? brightnessStepPct = null, object? white = null, string? profile = null, object? flash = null, string? effect = null)
    {
        target.CallService("turn_on", new LightTurnOnParameters { Transition = transition, RgbColor = rgbColor, RgbwColor = rgbwColor, RgbwwColor = rgbwwColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Kelvin = kelvin, Brightness = brightness, BrightnessPct = brightnessPct, BrightnessStep = brightnessStep, BrightnessStepPct = brightnessStepPct, White = white, Profile = profile, Flash = flash, Effect = effect });
    }
}

public static class MediaPlayerEntityExtensionMethods
{
    ///<summary>Clears the playlist.</summary>
    public static void ClearPlaylist(this MediaPlayerEntity target)
    {
        target.CallService("clear_playlist");
    }

    ///<summary>Clears the playlist.</summary>
    public static void ClearPlaylist(this IEnumerable<MediaPlayerEntity> target)
    {
        target.CallService("clear_playlist");
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    public static void Join(this MediaPlayerEntity target, MediaPlayerJoinParameters data)
    {
        target.CallService("join", data);
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    public static void Join(this IEnumerable<MediaPlayerEntity> target, MediaPlayerJoinParameters data)
    {
        target.CallService("join", data);
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    ///<param name="target">The MediaPlayerEntity to call this service for</param>
    ///<param name="groupMembers">The players which will be synced with the playback specified in `target`. eg: - media_player.multiroom_player2 - media_player.multiroom_player3 </param>
    public static void Join(this MediaPlayerEntity target, string groupMembers)
    {
        target.CallService("join", new MediaPlayerJoinParameters { GroupMembers = groupMembers });
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    ///<param name="target">The IEnumerable&lt;MediaPlayerEntity&gt; to call this service for</param>
    ///<param name="groupMembers">The players which will be synced with the playback specified in `target`. eg: - media_player.multiroom_player2 - media_player.multiroom_player3 </param>
    public static void Join(this IEnumerable<MediaPlayerEntity> target, string groupMembers)
    {
        target.CallService("join", new MediaPlayerJoinParameters { GroupMembers = groupMembers });
    }

    ///<summary>Selects the next track.</summary>
    public static void MediaNextTrack(this MediaPlayerEntity target)
    {
        target.CallService("media_next_track");
    }

    ///<summary>Selects the next track.</summary>
    public static void MediaNextTrack(this IEnumerable<MediaPlayerEntity> target)
    {
        target.CallService("media_next_track");
    }

    ///<summary>Pauses.</summary>
    public static void MediaPause(this MediaPlayerEntity target)
    {
        target.CallService("media_pause");
    }

    ///<summary>Pauses.</summary>
    public static void MediaPause(this IEnumerable<MediaPlayerEntity> target)
    {
        target.CallService("media_pause");
    }

    ///<summary>Starts playing.</summary>
    public static void MediaPlay(this MediaPlayerEntity target)
    {
        target.CallService("media_play");
    }

    ///<summary>Starts playing.</summary>
    public static void MediaPlay(this IEnumerable<MediaPlayerEntity> target)
    {
        target.CallService("media_play");
    }

    ///<summary>Toggles play/pause.</summary>
    public static void MediaPlayPause(this MediaPlayerEntity target)
    {
        target.CallService("media_play_pause");
    }

    ///<summary>Toggles play/pause.</summary>
    public static void MediaPlayPause(this IEnumerable<MediaPlayerEntity> target)
    {
        target.CallService("media_play_pause");
    }

    ///<summary>Selects the previous track.</summary>
    public static void MediaPreviousTrack(this MediaPlayerEntity target)
    {
        target.CallService("media_previous_track");
    }

    ///<summary>Selects the previous track.</summary>
    public static void MediaPreviousTrack(this IEnumerable<MediaPlayerEntity> target)
    {
        target.CallService("media_previous_track");
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    public static void MediaSeek(this MediaPlayerEntity target, MediaPlayerMediaSeekParameters data)
    {
        target.CallService("media_seek", data);
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    public static void MediaSeek(this IEnumerable<MediaPlayerEntity> target, MediaPlayerMediaSeekParameters data)
    {
        target.CallService("media_seek", data);
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    ///<param name="target">The MediaPlayerEntity to call this service for</param>
    ///<param name="seekPosition">Target position in the currently playing media. The format is platform dependent.</param>
    public static void MediaSeek(this MediaPlayerEntity target, double seekPosition)
    {
        target.CallService("media_seek", new MediaPlayerMediaSeekParameters { SeekPosition = seekPosition });
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    ///<param name="target">The IEnumerable&lt;MediaPlayerEntity&gt; to call this service for</param>
    ///<param name="seekPosition">Target position in the currently playing media. The format is platform dependent.</param>
    public static void MediaSeek(this IEnumerable<MediaPlayerEntity> target, double seekPosition)
    {
        target.CallService("media_seek", new MediaPlayerMediaSeekParameters { SeekPosition = seekPosition });
    }

    ///<summary>Stops playing.</summary>
    public static void MediaStop(this MediaPlayerEntity target)
    {
        target.CallService("media_stop");
    }

    ///<summary>Stops playing.</summary>
    public static void MediaStop(this IEnumerable<MediaPlayerEntity> target)
    {
        target.CallService("media_stop");
    }

    ///<summary>Starts playing specified media.</summary>
    public static void PlayMedia(this MediaPlayerEntity target, MediaPlayerPlayMediaParameters data)
    {
        target.CallService("play_media", data);
    }

    ///<summary>Starts playing specified media.</summary>
    public static void PlayMedia(this IEnumerable<MediaPlayerEntity> target, MediaPlayerPlayMediaParameters data)
    {
        target.CallService("play_media", data);
    }

    ///<summary>Starts playing specified media.</summary>
    ///<param name="target">The MediaPlayerEntity to call this service for</param>
    ///<param name="mediaContentId">The ID of the content to play. Platform dependent. eg: https://home-assistant.io/images/cast/splash.png</param>
    ///<param name="mediaContentType">The type of the content to play. Such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="enqueue">If the content should be played now or be added to the queue.</param>
    ///<param name="announce">If the media should be played as an announcement. eg: true</param>
    public static void PlayMedia(this MediaPlayerEntity target, string mediaContentId, string mediaContentType, object? enqueue = null, bool? announce = null)
    {
        target.CallService("play_media", new MediaPlayerPlayMediaParameters { MediaContentId = mediaContentId, MediaContentType = mediaContentType, Enqueue = enqueue, Announce = announce });
    }

    ///<summary>Starts playing specified media.</summary>
    ///<param name="target">The IEnumerable&lt;MediaPlayerEntity&gt; to call this service for</param>
    ///<param name="mediaContentId">The ID of the content to play. Platform dependent. eg: https://home-assistant.io/images/cast/splash.png</param>
    ///<param name="mediaContentType">The type of the content to play. Such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="enqueue">If the content should be played now or be added to the queue.</param>
    ///<param name="announce">If the media should be played as an announcement. eg: true</param>
    public static void PlayMedia(this IEnumerable<MediaPlayerEntity> target, string mediaContentId, string mediaContentType, object? enqueue = null, bool? announce = null)
    {
        target.CallService("play_media", new MediaPlayerPlayMediaParameters { MediaContentId = mediaContentId, MediaContentType = mediaContentType, Enqueue = enqueue, Announce = announce });
    }

    ///<summary>Playback mode that plays the media in a loop.</summary>
    public static void RepeatSet(this MediaPlayerEntity target, MediaPlayerRepeatSetParameters data)
    {
        target.CallService("repeat_set", data);
    }

    ///<summary>Playback mode that plays the media in a loop.</summary>
    public static void RepeatSet(this IEnumerable<MediaPlayerEntity> target, MediaPlayerRepeatSetParameters data)
    {
        target.CallService("repeat_set", data);
    }

    ///<summary>Playback mode that plays the media in a loop.</summary>
    ///<param name="target">The MediaPlayerEntity to call this service for</param>
    ///<param name="repeat">Repeat mode to set.</param>
    public static void RepeatSet(this MediaPlayerEntity target, object repeat)
    {
        target.CallService("repeat_set", new MediaPlayerRepeatSetParameters { Repeat = repeat });
    }

    ///<summary>Playback mode that plays the media in a loop.</summary>
    ///<param name="target">The IEnumerable&lt;MediaPlayerEntity&gt; to call this service for</param>
    ///<param name="repeat">Repeat mode to set.</param>
    public static void RepeatSet(this IEnumerable<MediaPlayerEntity> target, object repeat)
    {
        target.CallService("repeat_set", new MediaPlayerRepeatSetParameters { Repeat = repeat });
    }

    ///<summary>Selects a specific sound mode.</summary>
    public static void SelectSoundMode(this MediaPlayerEntity target, MediaPlayerSelectSoundModeParameters data)
    {
        target.CallService("select_sound_mode", data);
    }

    ///<summary>Selects a specific sound mode.</summary>
    public static void SelectSoundMode(this IEnumerable<MediaPlayerEntity> target, MediaPlayerSelectSoundModeParameters data)
    {
        target.CallService("select_sound_mode", data);
    }

    ///<summary>Selects a specific sound mode.</summary>
    ///<param name="target">The MediaPlayerEntity to call this service for</param>
    ///<param name="soundMode">Name of the sound mode to switch to. eg: Music</param>
    public static void SelectSoundMode(this MediaPlayerEntity target, string? soundMode = null)
    {
        target.CallService("select_sound_mode", new MediaPlayerSelectSoundModeParameters { SoundMode = soundMode });
    }

    ///<summary>Selects a specific sound mode.</summary>
    ///<param name="target">The IEnumerable&lt;MediaPlayerEntity&gt; to call this service for</param>
    ///<param name="soundMode">Name of the sound mode to switch to. eg: Music</param>
    public static void SelectSoundMode(this IEnumerable<MediaPlayerEntity> target, string? soundMode = null)
    {
        target.CallService("select_sound_mode", new MediaPlayerSelectSoundModeParameters { SoundMode = soundMode });
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    public static void SelectSource(this MediaPlayerEntity target, MediaPlayerSelectSourceParameters data)
    {
        target.CallService("select_source", data);
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    public static void SelectSource(this IEnumerable<MediaPlayerEntity> target, MediaPlayerSelectSourceParameters data)
    {
        target.CallService("select_source", data);
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    ///<param name="target">The MediaPlayerEntity to call this service for</param>
    ///<param name="source">Name of the source to switch to. Platform dependent. eg: video1</param>
    public static void SelectSource(this MediaPlayerEntity target, string source)
    {
        target.CallService("select_source", new MediaPlayerSelectSourceParameters { Source = source });
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    ///<param name="target">The IEnumerable&lt;MediaPlayerEntity&gt; to call this service for</param>
    ///<param name="source">Name of the source to switch to. Platform dependent. eg: video1</param>
    public static void SelectSource(this IEnumerable<MediaPlayerEntity> target, string source)
    {
        target.CallService("select_source", new MediaPlayerSelectSourceParameters { Source = source });
    }

    ///<summary>Playback mode that selects the media in randomized order.</summary>
    public static void ShuffleSet(this MediaPlayerEntity target, MediaPlayerShuffleSetParameters data)
    {
        target.CallService("shuffle_set", data);
    }

    ///<summary>Playback mode that selects the media in randomized order.</summary>
    public static void ShuffleSet(this IEnumerable<MediaPlayerEntity> target, MediaPlayerShuffleSetParameters data)
    {
        target.CallService("shuffle_set", data);
    }

    ///<summary>Playback mode that selects the media in randomized order.</summary>
    ///<param name="target">The MediaPlayerEntity to call this service for</param>
    ///<param name="shuffle">Whether or not shuffle mode is enabled.</param>
    public static void ShuffleSet(this MediaPlayerEntity target, bool shuffle)
    {
        target.CallService("shuffle_set", new MediaPlayerShuffleSetParameters { Shuffle = shuffle });
    }

    ///<summary>Playback mode that selects the media in randomized order.</summary>
    ///<param name="target">The IEnumerable&lt;MediaPlayerEntity&gt; to call this service for</param>
    ///<param name="shuffle">Whether or not shuffle mode is enabled.</param>
    public static void ShuffleSet(this IEnumerable<MediaPlayerEntity> target, bool shuffle)
    {
        target.CallService("shuffle_set", new MediaPlayerShuffleSetParameters { Shuffle = shuffle });
    }

    ///<summary>Toggles a media player on/off.</summary>
    public static void Toggle(this MediaPlayerEntity target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggles a media player on/off.</summary>
    public static void Toggle(this IEnumerable<MediaPlayerEntity> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Turns off the power of the media player.</summary>
    public static void TurnOff(this MediaPlayerEntity target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns off the power of the media player.</summary>
    public static void TurnOff(this IEnumerable<MediaPlayerEntity> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns on the power of the media player.</summary>
    public static void TurnOn(this MediaPlayerEntity target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Turns on the power of the media player.</summary>
    public static void TurnOn(this IEnumerable<MediaPlayerEntity> target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Removes the player from a group. Only works on platforms which support player groups.</summary>
    public static void Unjoin(this MediaPlayerEntity target)
    {
        target.CallService("unjoin");
    }

    ///<summary>Removes the player from a group. Only works on platforms which support player groups.</summary>
    public static void Unjoin(this IEnumerable<MediaPlayerEntity> target)
    {
        target.CallService("unjoin");
    }

    ///<summary>Turns down the volume.</summary>
    public static void VolumeDown(this MediaPlayerEntity target)
    {
        target.CallService("volume_down");
    }

    ///<summary>Turns down the volume.</summary>
    public static void VolumeDown(this IEnumerable<MediaPlayerEntity> target)
    {
        target.CallService("volume_down");
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    public static void VolumeMute(this MediaPlayerEntity target, MediaPlayerVolumeMuteParameters data)
    {
        target.CallService("volume_mute", data);
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    public static void VolumeMute(this IEnumerable<MediaPlayerEntity> target, MediaPlayerVolumeMuteParameters data)
    {
        target.CallService("volume_mute", data);
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    ///<param name="target">The MediaPlayerEntity to call this service for</param>
    ///<param name="isVolumeMuted">Defines whether or not it is muted.</param>
    public static void VolumeMute(this MediaPlayerEntity target, bool isVolumeMuted)
    {
        target.CallService("volume_mute", new MediaPlayerVolumeMuteParameters { IsVolumeMuted = isVolumeMuted });
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    ///<param name="target">The IEnumerable&lt;MediaPlayerEntity&gt; to call this service for</param>
    ///<param name="isVolumeMuted">Defines whether or not it is muted.</param>
    public static void VolumeMute(this IEnumerable<MediaPlayerEntity> target, bool isVolumeMuted)
    {
        target.CallService("volume_mute", new MediaPlayerVolumeMuteParameters { IsVolumeMuted = isVolumeMuted });
    }

    ///<summary>Sets the volume level.</summary>
    public static void VolumeSet(this MediaPlayerEntity target, MediaPlayerVolumeSetParameters data)
    {
        target.CallService("volume_set", data);
    }

    ///<summary>Sets the volume level.</summary>
    public static void VolumeSet(this IEnumerable<MediaPlayerEntity> target, MediaPlayerVolumeSetParameters data)
    {
        target.CallService("volume_set", data);
    }

    ///<summary>Sets the volume level.</summary>
    ///<param name="target">The MediaPlayerEntity to call this service for</param>
    ///<param name="volumeLevel">The volume. 0 is inaudible, 1 is the maximum volume.</param>
    public static void VolumeSet(this MediaPlayerEntity target, double volumeLevel)
    {
        target.CallService("volume_set", new MediaPlayerVolumeSetParameters { VolumeLevel = volumeLevel });
    }

    ///<summary>Sets the volume level.</summary>
    ///<param name="target">The IEnumerable&lt;MediaPlayerEntity&gt; to call this service for</param>
    ///<param name="volumeLevel">The volume. 0 is inaudible, 1 is the maximum volume.</param>
    public static void VolumeSet(this IEnumerable<MediaPlayerEntity> target, double volumeLevel)
    {
        target.CallService("volume_set", new MediaPlayerVolumeSetParameters { VolumeLevel = volumeLevel });
    }

    ///<summary>Turns up the volume.</summary>
    public static void VolumeUp(this MediaPlayerEntity target)
    {
        target.CallService("volume_up");
    }

    ///<summary>Turns up the volume.</summary>
    public static void VolumeUp(this IEnumerable<MediaPlayerEntity> target)
    {
        target.CallService("volume_up");
    }
}

public static class MotionBlindsEntityExtensionMethods
{
    ///<summary>Sets the absolute position of the cover.</summary>
    public static void SetAbsolutePosition(this CoverEntity target, MotionBlindsSetAbsolutePositionParameters data)
    {
        target.CallService("set_absolute_position", data);
    }

    ///<summary>Sets the absolute position of the cover.</summary>
    public static void SetAbsolutePosition(this IEnumerable<CoverEntity> target, MotionBlindsSetAbsolutePositionParameters data)
    {
        target.CallService("set_absolute_position", data);
    }

    ///<summary>Sets the absolute position of the cover.</summary>
    ///<param name="target">The CoverEntity to call this service for</param>
    ///<param name="absolutePosition">Absolute position to move to.</param>
    ///<param name="tiltPosition">Tilt position to move to.</param>
    ///<param name="width">Specify the width that is covered, only for TDBU Combined entities.</param>
    public static void SetAbsolutePosition(this CoverEntity target, long absolutePosition, long? tiltPosition = null, long? width = null)
    {
        target.CallService("set_absolute_position", new MotionBlindsSetAbsolutePositionParameters { AbsolutePosition = absolutePosition, TiltPosition = tiltPosition, Width = width });
    }

    ///<summary>Sets the absolute position of the cover.</summary>
    ///<param name="target">The IEnumerable&lt;CoverEntity&gt; to call this service for</param>
    ///<param name="absolutePosition">Absolute position to move to.</param>
    ///<param name="tiltPosition">Tilt position to move to.</param>
    ///<param name="width">Specify the width that is covered, only for TDBU Combined entities.</param>
    public static void SetAbsolutePosition(this IEnumerable<CoverEntity> target, long absolutePosition, long? tiltPosition = null, long? width = null)
    {
        target.CallService("set_absolute_position", new MotionBlindsSetAbsolutePositionParameters { AbsolutePosition = absolutePosition, TiltPosition = tiltPosition, Width = width });
    }
}

public static class NumberEntityExtensionMethods
{
    ///<summary>Decrease a number entity value by a certain amount.</summary>
    public static void Decrement(this NumberEntity target, NumberDecrementParameters data)
    {
        target.CallService("decrement", data);
    }

    ///<summary>Decrease a number entity value by a certain amount.</summary>
    public static void Decrement(this IEnumerable<NumberEntity> target, NumberDecrementParameters data)
    {
        target.CallService("decrement", data);
    }

    ///<summary>Decrease a number entity value by a certain amount.</summary>
    ///<param name="target">The NumberEntity to call this service for</param>
    ///<param name="amount">The amount to decrease the number with. If not provided, the step of the number entity will be used.</param>
    public static void Decrement(this NumberEntity target, long? amount = null)
    {
        target.CallService("decrement", new NumberDecrementParameters { Amount = amount });
    }

    ///<summary>Decrease a number entity value by a certain amount.</summary>
    ///<param name="target">The IEnumerable&lt;NumberEntity&gt; to call this service for</param>
    ///<param name="amount">The amount to decrease the number with. If not provided, the step of the number entity will be used.</param>
    public static void Decrement(this IEnumerable<NumberEntity> target, long? amount = null)
    {
        target.CallService("decrement", new NumberDecrementParameters { Amount = amount });
    }

    ///<summary>Increase a number entity value by a certain amount.</summary>
    public static void Increment(this NumberEntity target, NumberIncrementParameters data)
    {
        target.CallService("increment", data);
    }

    ///<summary>Increase a number entity value by a certain amount.</summary>
    public static void Increment(this IEnumerable<NumberEntity> target, NumberIncrementParameters data)
    {
        target.CallService("increment", data);
    }

    ///<summary>Increase a number entity value by a certain amount.</summary>
    ///<param name="target">The NumberEntity to call this service for</param>
    ///<param name="amount">The amount to increase the number with. If not provided, the step of the number entity will be used.</param>
    public static void Increment(this NumberEntity target, long? amount = null)
    {
        target.CallService("increment", new NumberIncrementParameters { Amount = amount });
    }

    ///<summary>Increase a number entity value by a certain amount.</summary>
    ///<param name="target">The IEnumerable&lt;NumberEntity&gt; to call this service for</param>
    ///<param name="amount">The amount to increase the number with. If not provided, the step of the number entity will be used.</param>
    public static void Increment(this IEnumerable<NumberEntity> target, long? amount = null)
    {
        target.CallService("increment", new NumberIncrementParameters { Amount = amount });
    }

    ///<summary>Set a number entity to its maximum value.</summary>
    public static void Max(this NumberEntity target)
    {
        target.CallService("max");
    }

    ///<summary>Set a number entity to its maximum value.</summary>
    public static void Max(this IEnumerable<NumberEntity> target)
    {
        target.CallService("max");
    }

    ///<summary>Set a number entity to its minimum value.</summary>
    public static void Min(this NumberEntity target)
    {
        target.CallService("min");
    }

    ///<summary>Set a number entity to its minimum value.</summary>
    public static void Min(this IEnumerable<NumberEntity> target)
    {
        target.CallService("min");
    }

    ///<summary>Sets the value of a number.</summary>
    public static void SetValue(this NumberEntity target, NumberSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value of a number.</summary>
    public static void SetValue(this IEnumerable<NumberEntity> target, NumberSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value of a number.</summary>
    ///<param name="target">The NumberEntity to call this service for</param>
    ///<param name="value">The target value to set. eg: 42</param>
    public static void SetValue(this NumberEntity target, string? value = null)
    {
        target.CallService("set_value", new NumberSetValueParameters { Value = value });
    }

    ///<summary>Sets the value of a number.</summary>
    ///<param name="target">The IEnumerable&lt;NumberEntity&gt; to call this service for</param>
    ///<param name="value">The target value to set. eg: 42</param>
    public static void SetValue(this IEnumerable<NumberEntity> target, string? value = null)
    {
        target.CallService("set_value", new NumberSetValueParameters { Value = value });
    }
}

public static class PowercalcEntityExtensionMethods
{
    ///<summary>Start execution of a playbook.</summary>
    public static void ActivatePlaybook(this SensorEntity target, PowercalcActivatePlaybookParameters data)
    {
        target.CallService("activate_playbook", data);
    }

    ///<summary>Start execution of a playbook.</summary>
    public static void ActivatePlaybook(this IEnumerable<SensorEntity> target, PowercalcActivatePlaybookParameters data)
    {
        target.CallService("activate_playbook", data);
    }

    ///<summary>Start execution of a playbook.</summary>
    ///<param name="target">The SensorEntity to call this service for</param>
    ///<param name="playbookId">Playbook identifier. eg: program1</param>
    public static void ActivatePlaybook(this SensorEntity target, string playbookId)
    {
        target.CallService("activate_playbook", new PowercalcActivatePlaybookParameters { PlaybookId = playbookId });
    }

    ///<summary>Start execution of a playbook.</summary>
    ///<param name="target">The IEnumerable&lt;SensorEntity&gt; to call this service for</param>
    ///<param name="playbookId">Playbook identifier. eg: program1</param>
    public static void ActivatePlaybook(this IEnumerable<SensorEntity> target, string playbookId)
    {
        target.CallService("activate_playbook", new PowercalcActivatePlaybookParameters { PlaybookId = playbookId });
    }

    ///<summary>Sets the energy sensor to a given kWh value.</summary>
    public static void CalibrateEnergy(this SensorEntity target, PowercalcCalibrateEnergyParameters data)
    {
        target.CallService("calibrate_energy", data);
    }

    ///<summary>Sets the energy sensor to a given kWh value.</summary>
    public static void CalibrateEnergy(this IEnumerable<SensorEntity> target, PowercalcCalibrateEnergyParameters data)
    {
        target.CallService("calibrate_energy", data);
    }

    ///<summary>Sets the energy sensor to a given kWh value.</summary>
    ///<param name="target">The SensorEntity to call this service for</param>
    ///<param name="value">The value to set. eg: 100</param>
    public static void CalibrateEnergy(this SensorEntity target, string value)
    {
        target.CallService("calibrate_energy", new PowercalcCalibrateEnergyParameters { Value = value });
    }

    ///<summary>Sets the energy sensor to a given kWh value.</summary>
    ///<param name="target">The IEnumerable&lt;SensorEntity&gt; to call this service for</param>
    ///<param name="value">The value to set. eg: 100</param>
    public static void CalibrateEnergy(this IEnumerable<SensorEntity> target, string value)
    {
        target.CallService("calibrate_energy", new PowercalcCalibrateEnergyParameters { Value = value });
    }

    ///<summary>Calibrates a utility meter sensor.</summary>
    public static void CalibrateUtilityMeter(this SensorEntity target, PowercalcCalibrateUtilityMeterParameters data)
    {
        target.CallService("calibrate_utility_meter", data);
    }

    ///<summary>Calibrates a utility meter sensor.</summary>
    public static void CalibrateUtilityMeter(this IEnumerable<SensorEntity> target, PowercalcCalibrateUtilityMeterParameters data)
    {
        target.CallService("calibrate_utility_meter", data);
    }

    ///<summary>Calibrates a utility meter sensor.</summary>
    ///<param name="target">The SensorEntity to call this service for</param>
    ///<param name="value">The value to set. eg: 100</param>
    public static void CalibrateUtilityMeter(this SensorEntity target, string value)
    {
        target.CallService("calibrate_utility_meter", new PowercalcCalibrateUtilityMeterParameters { Value = value });
    }

    ///<summary>Calibrates a utility meter sensor.</summary>
    ///<param name="target">The IEnumerable&lt;SensorEntity&gt; to call this service for</param>
    ///<param name="value">The value to set. eg: 100</param>
    public static void CalibrateUtilityMeter(this IEnumerable<SensorEntity> target, string value)
    {
        target.CallService("calibrate_utility_meter", new PowercalcCalibrateUtilityMeterParameters { Value = value });
    }

    ///<summary>Increases the sensor with a given amount.</summary>
    public static void IncreaseDailyEnergy(this SensorEntity target, PowercalcIncreaseDailyEnergyParameters data)
    {
        target.CallService("increase_daily_energy", data);
    }

    ///<summary>Increases the sensor with a given amount.</summary>
    public static void IncreaseDailyEnergy(this IEnumerable<SensorEntity> target, PowercalcIncreaseDailyEnergyParameters data)
    {
        target.CallService("increase_daily_energy", data);
    }

    ///<summary>Increases the sensor with a given amount.</summary>
    ///<param name="target">The SensorEntity to call this service for</param>
    ///<param name="value">Amount to add to the sensor. eg: 100</param>
    public static void IncreaseDailyEnergy(this SensorEntity target, string value)
    {
        target.CallService("increase_daily_energy", new PowercalcIncreaseDailyEnergyParameters { Value = value });
    }

    ///<summary>Increases the sensor with a given amount.</summary>
    ///<param name="target">The IEnumerable&lt;SensorEntity&gt; to call this service for</param>
    ///<param name="value">Amount to add to the sensor. eg: 100</param>
    public static void IncreaseDailyEnergy(this IEnumerable<SensorEntity> target, string value)
    {
        target.CallService("increase_daily_energy", new PowercalcIncreaseDailyEnergyParameters { Value = value });
    }

    ///<summary>Reset an energy sensor to zero kWh.</summary>
    public static void ResetEnergy(this SensorEntity target)
    {
        target.CallService("reset_energy");
    }

    ///<summary>Reset an energy sensor to zero kWh.</summary>
    public static void ResetEnergy(this IEnumerable<SensorEntity> target)
    {
        target.CallService("reset_energy");
    }

    ///<summary>Stop currently active playbook.</summary>
    public static void StopPlaybook(this SensorEntity target)
    {
        target.CallService("stop_playbook");
    }

    ///<summary>Stop currently active playbook.</summary>
    public static void StopPlaybook(this IEnumerable<SensorEntity> target)
    {
        target.CallService("stop_playbook");
    }

    ///<summary>Some profiles in the library has different sub profiles. This service allows you to switch to another one.</summary>
    public static void SwitchSubProfile(this SensorEntity target, PowercalcSwitchSubProfileParameters data)
    {
        target.CallService("switch_sub_profile", data);
    }

    ///<summary>Some profiles in the library has different sub profiles. This service allows you to switch to another one.</summary>
    public static void SwitchSubProfile(this IEnumerable<SensorEntity> target, PowercalcSwitchSubProfileParameters data)
    {
        target.CallService("switch_sub_profile", data);
    }

    ///<summary>Some profiles in the library has different sub profiles. This service allows you to switch to another one.</summary>
    ///<param name="target">The SensorEntity to call this service for</param>
    ///<param name="profile">Define one of the possible sub profiles eg: nigh_vision</param>
    public static void SwitchSubProfile(this SensorEntity target, string profile)
    {
        target.CallService("switch_sub_profile", new PowercalcSwitchSubProfileParameters { Profile = profile });
    }

    ///<summary>Some profiles in the library has different sub profiles. This service allows you to switch to another one.</summary>
    ///<param name="target">The IEnumerable&lt;SensorEntity&gt; to call this service for</param>
    ///<param name="profile">Define one of the possible sub profiles eg: nigh_vision</param>
    public static void SwitchSubProfile(this IEnumerable<SensorEntity> target, string profile)
    {
        target.CallService("switch_sub_profile", new PowercalcSwitchSubProfileParameters { Profile = profile });
    }
}

public static class RemoteEntityExtensionMethods
{
    ///<summary>Deletes a command or a list of commands from the database.</summary>
    public static void DeleteCommand(this RemoteEntity target, RemoteDeleteCommandParameters data)
    {
        target.CallService("delete_command", data);
    }

    ///<summary>Deletes a command or a list of commands from the database.</summary>
    public static void DeleteCommand(this IEnumerable<RemoteEntity> target, RemoteDeleteCommandParameters data)
    {
        target.CallService("delete_command", data);
    }

    ///<summary>Deletes a command or a list of commands from the database.</summary>
    ///<param name="target">The RemoteEntity to call this service for</param>
    ///<param name="device">Device from which commands will be deleted. eg: television</param>
    ///<param name="command">The single command or the list of commands to be deleted. eg: Mute</param>
    public static void DeleteCommand(this RemoteEntity target, object command, string? device = null)
    {
        target.CallService("delete_command", new RemoteDeleteCommandParameters { Device = device, Command = command });
    }

    ///<summary>Deletes a command or a list of commands from the database.</summary>
    ///<param name="target">The IEnumerable&lt;RemoteEntity&gt; to call this service for</param>
    ///<param name="device">Device from which commands will be deleted. eg: television</param>
    ///<param name="command">The single command or the list of commands to be deleted. eg: Mute</param>
    public static void DeleteCommand(this IEnumerable<RemoteEntity> target, object command, string? device = null)
    {
        target.CallService("delete_command", new RemoteDeleteCommandParameters { Device = device, Command = command });
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    public static void LearnCommand(this RemoteEntity target, RemoteLearnCommandParameters data)
    {
        target.CallService("learn_command", data);
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    public static void LearnCommand(this IEnumerable<RemoteEntity> target, RemoteLearnCommandParameters data)
    {
        target.CallService("learn_command", data);
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    ///<param name="target">The RemoteEntity to call this service for</param>
    ///<param name="device">Device ID to learn command from. eg: television</param>
    ///<param name="command">A single command or a list of commands to learn. eg: Turn on</param>
    ///<param name="commandType">The type of command to be learned.</param>
    ///<param name="alternative">If code must be stored as an alternative. This is useful for discrete codes. Discrete codes are used for toggles that only perform one function. For example, a code to only turn a device on. If it is on already, sending the code won&apos;t change the state.</param>
    ///<param name="timeout">Timeout for the command to be learned.</param>
    public static void LearnCommand(this RemoteEntity target, string? device = null, object? command = null, object? commandType = null, bool? alternative = null, long? timeout = null)
    {
        target.CallService("learn_command", new RemoteLearnCommandParameters { Device = device, Command = command, CommandType = commandType, Alternative = alternative, Timeout = timeout });
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    ///<param name="target">The IEnumerable&lt;RemoteEntity&gt; to call this service for</param>
    ///<param name="device">Device ID to learn command from. eg: television</param>
    ///<param name="command">A single command or a list of commands to learn. eg: Turn on</param>
    ///<param name="commandType">The type of command to be learned.</param>
    ///<param name="alternative">If code must be stored as an alternative. This is useful for discrete codes. Discrete codes are used for toggles that only perform one function. For example, a code to only turn a device on. If it is on already, sending the code won&apos;t change the state.</param>
    ///<param name="timeout">Timeout for the command to be learned.</param>
    public static void LearnCommand(this IEnumerable<RemoteEntity> target, string? device = null, object? command = null, object? commandType = null, bool? alternative = null, long? timeout = null)
    {
        target.CallService("learn_command", new RemoteLearnCommandParameters { Device = device, Command = command, CommandType = commandType, Alternative = alternative, Timeout = timeout });
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    public static void SendCommand(this RemoteEntity target, RemoteSendCommandParameters data)
    {
        target.CallService("send_command", data);
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    public static void SendCommand(this IEnumerable<RemoteEntity> target, RemoteSendCommandParameters data)
    {
        target.CallService("send_command", data);
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    ///<param name="target">The RemoteEntity to call this service for</param>
    ///<param name="device">Device ID to send command to. eg: 32756745</param>
    ///<param name="command">A single command or a list of commands to send. eg: Play</param>
    ///<param name="numRepeats">The number of times you want to repeat the commands.</param>
    ///<param name="delaySecs">The time you want to wait in between repeated commands.</param>
    ///<param name="holdSecs">The time you want to have it held before the release is send.</param>
    public static void SendCommand(this RemoteEntity target, object command, string? device = null, long? numRepeats = null, double? delaySecs = null, double? holdSecs = null)
    {
        target.CallService("send_command", new RemoteSendCommandParameters { Device = device, Command = command, NumRepeats = numRepeats, DelaySecs = delaySecs, HoldSecs = holdSecs });
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    ///<param name="target">The IEnumerable&lt;RemoteEntity&gt; to call this service for</param>
    ///<param name="device">Device ID to send command to. eg: 32756745</param>
    ///<param name="command">A single command or a list of commands to send. eg: Play</param>
    ///<param name="numRepeats">The number of times you want to repeat the commands.</param>
    ///<param name="delaySecs">The time you want to wait in between repeated commands.</param>
    ///<param name="holdSecs">The time you want to have it held before the release is send.</param>
    public static void SendCommand(this IEnumerable<RemoteEntity> target, object command, string? device = null, long? numRepeats = null, double? delaySecs = null, double? holdSecs = null)
    {
        target.CallService("send_command", new RemoteSendCommandParameters { Device = device, Command = command, NumRepeats = numRepeats, DelaySecs = delaySecs, HoldSecs = holdSecs });
    }

    ///<summary>Toggles a device on/off.</summary>
    public static void Toggle(this RemoteEntity target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggles a device on/off.</summary>
    public static void Toggle(this IEnumerable<RemoteEntity> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Turns the device off.</summary>
    public static void TurnOff(this RemoteEntity target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns the device off.</summary>
    public static void TurnOff(this IEnumerable<RemoteEntity> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Sends the power on command.</summary>
    public static void TurnOn(this RemoteEntity target, RemoteTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Sends the power on command.</summary>
    public static void TurnOn(this IEnumerable<RemoteEntity> target, RemoteTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Sends the power on command.</summary>
    ///<param name="target">The RemoteEntity to call this service for</param>
    ///<param name="activity">Activity ID or activity name to be started. eg: BedroomTV</param>
    public static void TurnOn(this RemoteEntity target, string? activity = null)
    {
        target.CallService("turn_on", new RemoteTurnOnParameters { Activity = activity });
    }

    ///<summary>Sends the power on command.</summary>
    ///<param name="target">The IEnumerable&lt;RemoteEntity&gt; to call this service for</param>
    ///<param name="activity">Activity ID or activity name to be started. eg: BedroomTV</param>
    public static void TurnOn(this IEnumerable<RemoteEntity> target, string? activity = null)
    {
        target.CallService("turn_on", new RemoteTurnOnParameters { Activity = activity });
    }
}

public static class SceneEntityExtensionMethods
{
    ///<summary>Activates a scene.</summary>
    public static void TurnOn(this SceneEntity target, SceneTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Activates a scene.</summary>
    public static void TurnOn(this IEnumerable<SceneEntity> target, SceneTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Activates a scene.</summary>
    ///<param name="target">The SceneEntity to call this service for</param>
    ///<param name="transition">Time it takes the devices to transition into the states defined in the scene.</param>
    public static void TurnOn(this SceneEntity target, long? transition = null)
    {
        target.CallService("turn_on", new SceneTurnOnParameters { Transition = transition });
    }

    ///<summary>Activates a scene.</summary>
    ///<param name="target">The IEnumerable&lt;SceneEntity&gt; to call this service for</param>
    ///<param name="transition">Time it takes the devices to transition into the states defined in the scene.</param>
    public static void TurnOn(this IEnumerable<SceneEntity> target, long? transition = null)
    {
        target.CallService("turn_on", new SceneTurnOnParameters { Transition = transition });
    }
}

public static class SelectEntityExtensionMethods
{
    ///<summary>Select an random option for a select entity.</summary>
    public static void Random(this SelectEntity target, SelectRandomParameters data)
    {
        target.CallService("random", data);
    }

    ///<summary>Select an random option for a select entity.</summary>
    public static void Random(this IEnumerable<SelectEntity> target, SelectRandomParameters data)
    {
        target.CallService("random", data);
    }

    ///<summary>Select an random option for a select entity.</summary>
    ///<param name="target">The SelectEntity to call this service for</param>
    ///<param name="options">Limits the options to select from. If not provided, all options will be considered.</param>
    public static void Random(this SelectEntity target, object? options = null)
    {
        target.CallService("random", new SelectRandomParameters { Options = options });
    }

    ///<summary>Select an random option for a select entity.</summary>
    ///<param name="target">The IEnumerable&lt;SelectEntity&gt; to call this service for</param>
    ///<param name="options">Limits the options to select from. If not provided, all options will be considered.</param>
    public static void Random(this IEnumerable<SelectEntity> target, object? options = null)
    {
        target.CallService("random", new SelectRandomParameters { Options = options });
    }

    ///<summary>Selects the first option.</summary>
    public static void SelectFirst(this SelectEntity target)
    {
        target.CallService("select_first");
    }

    ///<summary>Selects the first option.</summary>
    public static void SelectFirst(this IEnumerable<SelectEntity> target)
    {
        target.CallService("select_first");
    }

    ///<summary>Selects the last option.</summary>
    public static void SelectLast(this SelectEntity target)
    {
        target.CallService("select_last");
    }

    ///<summary>Selects the last option.</summary>
    public static void SelectLast(this IEnumerable<SelectEntity> target)
    {
        target.CallService("select_last");
    }

    ///<summary>Selects the next option.</summary>
    public static void SelectNext(this SelectEntity target, SelectSelectNextParameters data)
    {
        target.CallService("select_next", data);
    }

    ///<summary>Selects the next option.</summary>
    public static void SelectNext(this IEnumerable<SelectEntity> target, SelectSelectNextParameters data)
    {
        target.CallService("select_next", data);
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="target">The SelectEntity to call this service for</param>
    ///<param name="cycle">If the option should cycle from the last to the first.</param>
    public static void SelectNext(this SelectEntity target, bool? cycle = null)
    {
        target.CallService("select_next", new SelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="target">The IEnumerable&lt;SelectEntity&gt; to call this service for</param>
    ///<param name="cycle">If the option should cycle from the last to the first.</param>
    public static void SelectNext(this IEnumerable<SelectEntity> target, bool? cycle = null)
    {
        target.CallService("select_next", new SelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Selects an option.</summary>
    public static void SelectOption(this SelectEntity target, SelectSelectOptionParameters data)
    {
        target.CallService("select_option", data);
    }

    ///<summary>Selects an option.</summary>
    public static void SelectOption(this IEnumerable<SelectEntity> target, SelectSelectOptionParameters data)
    {
        target.CallService("select_option", data);
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The SelectEntity to call this service for</param>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public static void SelectOption(this SelectEntity target, string option)
    {
        target.CallService("select_option", new SelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The IEnumerable&lt;SelectEntity&gt; to call this service for</param>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public static void SelectOption(this IEnumerable<SelectEntity> target, string option)
    {
        target.CallService("select_option", new SelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects the previous option.</summary>
    public static void SelectPrevious(this SelectEntity target, SelectSelectPreviousParameters data)
    {
        target.CallService("select_previous", data);
    }

    ///<summary>Selects the previous option.</summary>
    public static void SelectPrevious(this IEnumerable<SelectEntity> target, SelectSelectPreviousParameters data)
    {
        target.CallService("select_previous", data);
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The SelectEntity to call this service for</param>
    ///<param name="cycle">If the option should cycle from the first to the last.</param>
    public static void SelectPrevious(this SelectEntity target, bool? cycle = null)
    {
        target.CallService("select_previous", new SelectSelectPreviousParameters { Cycle = cycle });
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The IEnumerable&lt;SelectEntity&gt; to call this service for</param>
    ///<param name="cycle">If the option should cycle from the first to the last.</param>
    public static void SelectPrevious(this IEnumerable<SelectEntity> target, bool? cycle = null)
    {
        target.CallService("select_previous", new SelectSelectPreviousParameters { Cycle = cycle });
    }
}

public static class SwitchEntityExtensionMethods
{
    ///<summary>Toggles a switch on/off.</summary>
    public static void Toggle(this SwitchEntity target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggles a switch on/off.</summary>
    public static void Toggle(this IEnumerable<SwitchEntity> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Turns a switch off.</summary>
    public static void TurnOff(this SwitchEntity target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns a switch off.</summary>
    public static void TurnOff(this IEnumerable<SwitchEntity> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns a switch on.</summary>
    public static void TurnOn(this SwitchEntity target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Turns a switch on.</summary>
    public static void TurnOn(this IEnumerable<SwitchEntity> target)
    {
        target.CallService("turn_on");
    }
}

public static class TtsEntityExtensionMethods
{
    ///<summary>Speaks something using text-to-speech on a media player.</summary>
    public static void Speak(this TtsEntity target, TtsSpeakParameters data)
    {
        target.CallService("speak", data);
    }

    ///<summary>Speaks something using text-to-speech on a media player.</summary>
    public static void Speak(this IEnumerable<TtsEntity> target, TtsSpeakParameters data)
    {
        target.CallService("speak", data);
    }

    ///<summary>Speaks something using text-to-speech on a media player.</summary>
    ///<param name="target">The TtsEntity to call this service for</param>
    ///<param name="mediaPlayerEntityId">Media players to play the message.</param>
    ///<param name="message">The text you want to convert into speech so that you can listen to it on your device. eg: My name is hanna</param>
    ///<param name="cache">Stores this message locally so that when the text is requested again, the output can be produced more quickly.</param>
    ///<param name="language">Language to use for speech generation. eg: ru</param>
    ///<param name="options">A dictionary containing integration-specific options. eg: platform specific</param>
    public static void Speak(this TtsEntity target, string mediaPlayerEntityId, string message, bool? cache = null, string? language = null, object? options = null)
    {
        target.CallService("speak", new TtsSpeakParameters { MediaPlayerEntityId = mediaPlayerEntityId, Message = message, Cache = cache, Language = language, Options = options });
    }

    ///<summary>Speaks something using text-to-speech on a media player.</summary>
    ///<param name="target">The IEnumerable&lt;TtsEntity&gt; to call this service for</param>
    ///<param name="mediaPlayerEntityId">Media players to play the message.</param>
    ///<param name="message">The text you want to convert into speech so that you can listen to it on your device. eg: My name is hanna</param>
    ///<param name="cache">Stores this message locally so that when the text is requested again, the output can be produced more quickly.</param>
    ///<param name="language">Language to use for speech generation. eg: ru</param>
    ///<param name="options">A dictionary containing integration-specific options. eg: platform specific</param>
    public static void Speak(this IEnumerable<TtsEntity> target, string mediaPlayerEntityId, string message, bool? cache = null, string? language = null, object? options = null)
    {
        target.CallService("speak", new TtsSpeakParameters { MediaPlayerEntityId = mediaPlayerEntityId, Message = message, Cache = cache, Language = language, Options = options });
    }
}

public static class UpdateEntityExtensionMethods
{
    ///<summary>Removes the skipped version marker from an update.</summary>
    public static void ClearSkipped(this UpdateEntity target)
    {
        target.CallService("clear_skipped");
    }

    ///<summary>Removes the skipped version marker from an update.</summary>
    public static void ClearSkipped(this IEnumerable<UpdateEntity> target)
    {
        target.CallService("clear_skipped");
    }

    ///<summary>Installs an update for this device or service.</summary>
    public static void Install(this UpdateEntity target, UpdateInstallParameters data)
    {
        target.CallService("install", data);
    }

    ///<summary>Installs an update for this device or service.</summary>
    public static void Install(this IEnumerable<UpdateEntity> target, UpdateInstallParameters data)
    {
        target.CallService("install", data);
    }

    ///<summary>Installs an update for this device or service.</summary>
    ///<param name="target">The UpdateEntity to call this service for</param>
    ///<param name="version">The version to install. If omitted, the latest version will be installed. eg: 1.0.0</param>
    ///<param name="backup">If supported by the integration, this creates a backup before starting the update .</param>
    public static void Install(this UpdateEntity target, string? version = null, bool? backup = null)
    {
        target.CallService("install", new UpdateInstallParameters { Version = version, Backup = backup });
    }

    ///<summary>Installs an update for this device or service.</summary>
    ///<param name="target">The IEnumerable&lt;UpdateEntity&gt; to call this service for</param>
    ///<param name="version">The version to install. If omitted, the latest version will be installed. eg: 1.0.0</param>
    ///<param name="backup">If supported by the integration, this creates a backup before starting the update .</param>
    public static void Install(this IEnumerable<UpdateEntity> target, string? version = null, bool? backup = null)
    {
        target.CallService("install", new UpdateInstallParameters { Version = version, Backup = backup });
    }

    ///<summary>Marks currently available update as skipped.</summary>
    public static void Skip(this UpdateEntity target)
    {
        target.CallService("skip");
    }

    ///<summary>Marks currently available update as skipped.</summary>
    public static void Skip(this IEnumerable<UpdateEntity> target)
    {
        target.CallService("skip");
    }
}

public static class UtilityMeterEntityExtensionMethods
{
    ///<summary>Resets all counters of a utility meter.</summary>
    public static void Reset(this SelectEntity target)
    {
        target.CallService("reset");
    }

    ///<summary>Resets all counters of a utility meter.</summary>
    public static void Reset(this IEnumerable<SelectEntity> target)
    {
        target.CallService("reset");
    }
}

public static class VacuumEntityExtensionMethods
{
    ///<summary>Tells the vacuum cleaner to do a spot clean-up.</summary>
    public static void CleanSpot(this VacuumEntity target)
    {
        target.CallService("clean_spot");
    }

    ///<summary>Tells the vacuum cleaner to do a spot clean-up.</summary>
    public static void CleanSpot(this IEnumerable<VacuumEntity> target)
    {
        target.CallService("clean_spot");
    }

    ///<summary>Locates the vacuum cleaner robot.</summary>
    public static void Locate(this VacuumEntity target)
    {
        target.CallService("locate");
    }

    ///<summary>Locates the vacuum cleaner robot.</summary>
    public static void Locate(this IEnumerable<VacuumEntity> target)
    {
        target.CallService("locate");
    }

    ///<summary>Pauses the cleaning task.</summary>
    public static void Pause(this VacuumEntity target)
    {
        target.CallService("pause");
    }

    ///<summary>Pauses the cleaning task.</summary>
    public static void Pause(this IEnumerable<VacuumEntity> target)
    {
        target.CallService("pause");
    }

    ///<summary>Tells the vacuum cleaner to return to its dock.</summary>
    public static void ReturnToBase(this VacuumEntity target)
    {
        target.CallService("return_to_base");
    }

    ///<summary>Tells the vacuum cleaner to return to its dock.</summary>
    public static void ReturnToBase(this IEnumerable<VacuumEntity> target)
    {
        target.CallService("return_to_base");
    }

    ///<summary>Sends a command to the vacuum cleaner.</summary>
    public static void SendCommand(this VacuumEntity target, VacuumSendCommandParameters data)
    {
        target.CallService("send_command", data);
    }

    ///<summary>Sends a command to the vacuum cleaner.</summary>
    public static void SendCommand(this IEnumerable<VacuumEntity> target, VacuumSendCommandParameters data)
    {
        target.CallService("send_command", data);
    }

    ///<summary>Sends a command to the vacuum cleaner.</summary>
    ///<param name="target">The VacuumEntity to call this service for</param>
    ///<param name="command">Command to execute. The commands are integration-specific. eg: set_dnd_timer</param>
    ///<param name="params">Parameters for the command. The parameters are integration-specific. eg: { &quot;key&quot;: &quot;value&quot; }</param>
    public static void SendCommand(this VacuumEntity target, string command, object? @params = null)
    {
        target.CallService("send_command", new VacuumSendCommandParameters { Command = command, Params = @params });
    }

    ///<summary>Sends a command to the vacuum cleaner.</summary>
    ///<param name="target">The IEnumerable&lt;VacuumEntity&gt; to call this service for</param>
    ///<param name="command">Command to execute. The commands are integration-specific. eg: set_dnd_timer</param>
    ///<param name="params">Parameters for the command. The parameters are integration-specific. eg: { &quot;key&quot;: &quot;value&quot; }</param>
    public static void SendCommand(this IEnumerable<VacuumEntity> target, string command, object? @params = null)
    {
        target.CallService("send_command", new VacuumSendCommandParameters { Command = command, Params = @params });
    }

    ///<summary>Sets the fan speed of the vacuum cleaner.</summary>
    public static void SetFanSpeed(this VacuumEntity target, VacuumSetFanSpeedParameters data)
    {
        target.CallService("set_fan_speed", data);
    }

    ///<summary>Sets the fan speed of the vacuum cleaner.</summary>
    public static void SetFanSpeed(this IEnumerable<VacuumEntity> target, VacuumSetFanSpeedParameters data)
    {
        target.CallService("set_fan_speed", data);
    }

    ///<summary>Sets the fan speed of the vacuum cleaner.</summary>
    ///<param name="target">The VacuumEntity to call this service for</param>
    ///<param name="fanSpeed">Fan speed. The value depends on the integration. Some integrations have speed steps, like &apos;medium&apos;. Some use a percentage, between 0 and 100. eg: low</param>
    public static void SetFanSpeed(this VacuumEntity target, string fanSpeed)
    {
        target.CallService("set_fan_speed", new VacuumSetFanSpeedParameters { FanSpeed = fanSpeed });
    }

    ///<summary>Sets the fan speed of the vacuum cleaner.</summary>
    ///<param name="target">The IEnumerable&lt;VacuumEntity&gt; to call this service for</param>
    ///<param name="fanSpeed">Fan speed. The value depends on the integration. Some integrations have speed steps, like &apos;medium&apos;. Some use a percentage, between 0 and 100. eg: low</param>
    public static void SetFanSpeed(this IEnumerable<VacuumEntity> target, string fanSpeed)
    {
        target.CallService("set_fan_speed", new VacuumSetFanSpeedParameters { FanSpeed = fanSpeed });
    }

    ///<summary>Starts or resumes the cleaning task.</summary>
    public static void Start(this VacuumEntity target)
    {
        target.CallService("start");
    }

    ///<summary>Starts or resumes the cleaning task.</summary>
    public static void Start(this IEnumerable<VacuumEntity> target)
    {
        target.CallService("start");
    }

    ///<summary>Starts, pauses, or resumes the cleaning task.</summary>
    public static void StartPause(this VacuumEntity target)
    {
        target.CallService("start_pause");
    }

    ///<summary>Starts, pauses, or resumes the cleaning task.</summary>
    public static void StartPause(this IEnumerable<VacuumEntity> target)
    {
        target.CallService("start_pause");
    }

    ///<summary>Stops the current cleaning task.</summary>
    public static void Stop(this VacuumEntity target)
    {
        target.CallService("stop");
    }

    ///<summary>Stops the current cleaning task.</summary>
    public static void Stop(this IEnumerable<VacuumEntity> target)
    {
        target.CallService("stop");
    }

    ///<summary>Stops the current cleaning task and returns to its dock.</summary>
    public static void TurnOff(this VacuumEntity target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Stops the current cleaning task and returns to its dock.</summary>
    public static void TurnOff(this IEnumerable<VacuumEntity> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Starts a new cleaning task.</summary>
    public static void TurnOn(this VacuumEntity target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Starts a new cleaning task.</summary>
    public static void TurnOn(this IEnumerable<VacuumEntity> target)
    {
        target.CallService("turn_on");
    }
}